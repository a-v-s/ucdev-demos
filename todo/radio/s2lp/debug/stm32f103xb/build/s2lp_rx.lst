ARM GAS  /tmp/ccVJDjsH.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"s2lp_rx.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "S2LP_Driver/s2lp_rx.c"
  18              		.global	S2LP_CHANNEL_FILTER_WORDS
  19              		.section	.rodata.S2LP_CHANNEL_FILTER_WORDS,"a"
  20              		.align	3
  23              	S2LP_CHANNEL_FILTER_WORDS:
  24 0000 CDCCCCCC 		.word	-858993459
  25 0004 CC008940 		.word	1082720460
  26 0008 66666666 		.word	1717986918
  27 000c 662E7C40 		.word	1081880166
  28 0010 66666666 		.word	1717986918
  29 0014 66166C40 		.word	1080825446
  30 0018 33333333 		.word	858993459
  31 001c 33135C40 		.word	1079776051
  32 0020 CDCCCCCC 		.word	-858993459
  33 0024 CC0C4C40 		.word	1078725836
  34 0028 00000000 		.word	0
  35 002c 00003C40 		.word	1077673984
  36 0030 00000000 		.word	0
  37 0034 00002C40 		.word	1076625408
  38 0038 00000000 		.word	0
  39 003c 00001C40 		.word	1075576832
  40 0040 00000000 		.word	0
  41 0044 00000C40 		.word	1074528256
  42 0048 CDCCCCCC 		.word	-858993459
  43 004c CCCCFC3F 		.word	1073532108
  44 0050 CDCCCCCC 		.word	-858993459
  45 0054 CCD88840 		.word	1082710220
  46 0058 66666666 		.word	1717986918
  47 005c 669E7A40 		.word	1081777766
  48 0060 CDCCCCCC 		.word	-858993459
  49 0064 CC8C6A40 		.word	1080724684
  50 0068 CDCCCCCC 		.word	-858993459
  51 006c CC8C5A40 		.word	1079676108
  52 0070 00000000 		.word	0
  53 0074 00804A40 		.word	1078624256
  54 0078 00000000 		.word	0
  55 007c 00803A40 		.word	1077575680
  56 0080 9A999999 		.word	-1717986918
  57 0084 99992A40 		.word	1076533657
  58 0088 66666666 		.word	1717986918
  59 008c 66661A40 		.word	1075471974
ARM GAS  /tmp/ccVJDjsH.s 			page 2


  60 0090 66666666 		.word	1717986918
  61 0094 66660A40 		.word	1074423398
  62 0098 33333333 		.word	858993459
  63 009c 3333FB3F 		.word	1073427251
  64 00a0 33333333 		.word	858993459
  65 00a4 33038840 		.word	1082655539
  66 00a8 33333333 		.word	858993459
  67 00ac 33337940 		.word	1081684787
  68 00b0 33333333 		.word	858993459
  69 00b4 33236940 		.word	1080632115
  70 00b8 00000000 		.word	0
  71 00bc 00205940 		.word	1079582720
  72 00c0 9A999999 		.word	-1717986918
  73 00c4 99194940 		.word	1078532505
  74 00c8 9A999999 		.word	-1717986918
  75 00cc 99193940 		.word	1077483929
  76 00d0 33333333 		.word	858993459
  77 00d4 33332940 		.word	1076441907
  78 00d8 33333333 		.word	858993459
  79 00dc 33331940 		.word	1075393331
  80 00e0 CDCCCCCC 		.word	-858993459
  81 00e4 CCCC0840 		.word	1074318540
  82 00e8 9A999999 		.word	-1717986918
  83 00ec 9999F93F 		.word	1073322393
  84 00f0 66666666 		.word	1717986918
  85 00f4 66068740 		.word	1082590822
  86 00f8 CDCCCCCC 		.word	-858993459
  87 00fc CCCC7740 		.word	1081593036
  88 0100 00000000 		.word	0
  89 0104 00C06740 		.word	1080541184
  90 0108 00000000 		.word	0
  91 010c 00C05740 		.word	1079492608
  92 0110 33333333 		.word	858993459
  93 0114 33B34740 		.word	1078440755
  94 0118 33333333 		.word	858993459
  95 011c 33B33740 		.word	1077392179
  96 0120 CDCCCCCC 		.word	-858993459
  97 0124 CCCC2740 		.word	1076350156
  98 0128 9A999999 		.word	-1717986918
  99 012c 99991740 		.word	1075288473
 100 0130 00000000 		.word	0
 101 0134 00000840 		.word	1074266112
 102 0138 00000000 		.word	0
 103 013c 0000F83F 		.word	1073217536
 104 0140 CDCCCCCC 		.word	-858993459
 105 0144 CC088640 		.word	1082525900
 106 0148 9A999999 		.word	-1717986918
 107 014c 99A17640 		.word	1081516441
 108 0150 66666666 		.word	1717986918
 109 0154 66966640 		.word	1080464998
 110 0158 33333333 		.word	858993459
 111 015c 33935640 		.word	1079415603
 112 0160 CDCCCCCC 		.word	-858993459
 113 0164 CC8C4640 		.word	1078365388
 114 0168 9A999999 		.word	-1717986918
 115 016c 99993640 		.word	1077320089
 116 0170 9A999999 		.word	-1717986918
ARM GAS  /tmp/ccVJDjsH.s 			page 3


 117 0174 99992640 		.word	1076271513
 118 0178 66666666 		.word	1717986918
 119 017c 66661640 		.word	1075209830
 120 0180 66666666 		.word	1717986918
 121 0184 66660640 		.word	1074161254
 122 0188 66666666 		.word	1717986918
 123 018c 6666F63F 		.word	1073112678
 124 0190 33333333 		.word	858993459
 125 0194 33F78440 		.word	1082455859
 126 0198 33333333 		.word	858993459
 127 019c 335B7540 		.word	1081432883
 128 01a0 33333333 		.word	858993459
 129 01a4 33536540 		.word	1080382259
 130 01a8 33333333 		.word	858993459
 131 01ac 33535540 		.word	1079333683
 132 01b0 CDCCCCCC 		.word	-858993459
 133 01b4 CC4C4540 		.word	1078283468
 134 01b8 CDCCCCCC 		.word	-858993459
 135 01bc CC4C3540 		.word	1077234892
 136 01c0 33333333 		.word	858993459
 137 01c4 33332540 		.word	1076179763
 138 01c8 33333333 		.word	858993459
 139 01cc 33331540 		.word	1075131187
 140 01d0 9A999999 		.word	-1717986918
 141 01d4 99990540 		.word	1074108825
 142 01d8 CDCCCCCC 		.word	-858993459
 143 01dc CCCCF43F 		.word	1073007820
 144 01e0 66666666 		.word	1717986918
 145 01e4 66128440 		.word	1082397286
 146 01e8 66666666 		.word	1717986918
 147 01ec 66567440 		.word	1081366118
 148 01f0 CDCCCCCC 		.word	-858993459
 149 01f4 CC4C6440 		.word	1080315084
 150 01f8 CDCCCCCC 		.word	-858993459
 151 01fc CC4C5440 		.word	1079266508
 152 0200 CDCCCCCC 		.word	-858993459
 153 0204 CC4C4440 		.word	1078217932
 154 0208 CDCCCCCC 		.word	-858993459
 155 020c CC4C3440 		.word	1077169356
 156 0210 33333333 		.word	858993459
 157 0214 33332440 		.word	1076114227
 158 0218 66666666 		.word	1717986918
 159 021c 66661440 		.word	1075078758
 160 0220 00000000 		.word	0
 161 0224 00000440 		.word	1074003968
 162 0228 CDCCCCCC 		.word	-858993459
 163 022c CCCCF43F 		.word	1073007820
 164 0230 9A999999 		.word	-1717986918
 165 0234 99558240 		.word	1082283417
 166 0238 00000000 		.word	0
 167 023c 00687240 		.word	1081239552
 168 0240 33333333 		.word	858993459
 169 0244 33636240 		.word	1080189747
 170 0248 00000000 		.word	0
 171 024c 00605240 		.word	1079140352
 172 0250 9A999999 		.word	-1717986918
 173 0254 99594240 		.word	1078090137
ARM GAS  /tmp/ccVJDjsH.s 			page 4


 174 0258 66666666 		.word	1717986918
 175 025c 66663240 		.word	1077044838
 176 0260 66666666 		.word	1717986918
 177 0264 66662240 		.word	1075996262
 178 0268 66666666 		.word	1717986918
 179 026c 66661240 		.word	1074947686
 180 0270 66666666 		.word	1717986918
 181 0274 66660240 		.word	1073899110
 182 0278 33333333 		.word	858993459
 183 027c 3333F33F 		.word	1072902963
 184 0280 33333333 		.word	858993459
 185 0284 33EB8040 		.word	1082190643
 186 0288 CDCCCCCC 		.word	-858993459
 187 028c CCE47040 		.word	1081140428
 188 0290 00000000 		.word	0
 189 0294 00E06040 		.word	1080090624
 190 0298 00000000 		.word	0
 191 029c 00E05040 		.word	1079042048
 192 02a0 9A999999 		.word	-1717986918
 193 02a4 99D94040 		.word	1077991833
 194 02a8 66666666 		.word	1717986918
 195 02ac 66E63040 		.word	1076946534
 196 02b0 CDCCCCCC 		.word	-858993459
 197 02b4 CCCC2040 		.word	1075891404
 198 02b8 CDCCCCCC 		.word	-858993459
 199 02bc CCCC1040 		.word	1074842828
 200 02c0 CDCCCCCC 		.word	-858993459
 201 02c4 CCCC0040 		.word	1073794252
 202 02c8 9A999999 		.word	-1717986918
 203 02cc 9999F13F 		.word	1072798105
 204              		.section	.text.S2LP_RX_SetRSSIThreshold,"ax",%progbits
 205              		.align	1
 206              		.global	S2LP_RX_SetRSSIThreshold
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 211              	S2LP_RX_SetRSSIThreshold:
 212              	.LFB67:
   1:S2LP_Driver/s2lp_rx.c **** /*
   2:S2LP_Driver/s2lp_rx.c ****  * s2lp_rx.c
   3:S2LP_Driver/s2lp_rx.c ****  *
   4:S2LP_Driver/s2lp_rx.c ****  *  Created on: 30 sie 2021
   5:S2LP_Driver/s2lp_rx.c ****  *      Author: steelph0enix
   6:S2LP_Driver/s2lp_rx.c ****  */
   7:S2LP_Driver/s2lp_rx.c **** 
   8:S2LP_Driver/s2lp_rx.c **** #include "s2lp.h"
   9:S2LP_Driver/s2lp_rx.c **** #include "s2lp_rx.h"
  10:S2LP_Driver/s2lp_rx.c **** #include "bit_helpers.h"
  11:S2LP_Driver/s2lp_rx.c **** 
  12:S2LP_Driver/s2lp_rx.c **** // Channel filter words table
  13:S2LP_Driver/s2lp_rx.c **** 
  14:S2LP_Driver/s2lp_rx.c **** #define S2LP_CHANNEL_FILTER_WORDS_M 9
  15:S2LP_Driver/s2lp_rx.c **** #define S2LP_CHANNEL_FILTER_WORDS_E 10
  16:S2LP_Driver/s2lp_rx.c **** #define S2LP_CHANNEL_FILTER_WORDS_LENGTH (S2LP_CHANNEL_FILTER_WORDS_M * S2LP_CHANNEL_FILTER_WORDS_E
  17:S2LP_Driver/s2lp_rx.c **** #define S2LP_CHANNEL_FILTER_WORDS_SIZE (sizeof(double) * S2LP_CHANNEL_FILTER_WORDS_LENGTH)
  18:S2LP_Driver/s2lp_rx.c **** // @formatter:off
  19:S2LP_Driver/s2lp_rx.c **** double const S2LP_CHANNEL_FILTER_WORDS[S2LP_CHANNEL_FILTER_WORDS_M][S2LP_CHANNEL_FILTER_WORDS_E] =
ARM GAS  /tmp/ccVJDjsH.s 			page 5


  20:S2LP_Driver/s2lp_rx.c ****         {
  21:S2LP_Driver/s2lp_rx.c ****         /* E =            0      1      2      3     4     5     6    7    8    9 */
  22:S2LP_Driver/s2lp_rx.c ****         /* M = 0 */ { 800.1, 450.9, 224.7, 112.3, 56.1, 28.0, 14.0, 7.0, 3.5, 1.8},
  23:S2LP_Driver/s2lp_rx.c ****         /* M = 1 */ { 795.1, 425.9, 212.4, 106.2, 53.0, 26.5, 13.3, 6.6, 3.3, 1.7},
  24:S2LP_Driver/s2lp_rx.c ****         /* M = 2 */ { 768.4, 403.2, 201.1, 100.5, 50.2, 25.1, 12.6, 6.3, 3.1, 1.6},
  25:S2LP_Driver/s2lp_rx.c ****         /* M = 3 */ { 736.8, 380.8, 190.0,  95.0, 47.4, 23.7, 11.9, 5.9, 3.0, 1.5},
  26:S2LP_Driver/s2lp_rx.c ****         /* M = 4 */ { 705.1, 362.1, 180.7,  90.3, 45.1, 22.6, 11.3, 5.6, 2.8, 1.4},
  27:S2LP_Driver/s2lp_rx.c ****         /* M = 5 */ { 670.9, 341.7, 170.6,  85.3, 42.6, 21.3, 10.6, 5.3, 2.7, 1.3},
  28:S2LP_Driver/s2lp_rx.c ****         /* M = 6 */ { 642.3, 325.4, 162.4,  81.2, 40.6, 20.3, 10.1, 5.1, 2.5, 1.3},
  29:S2LP_Driver/s2lp_rx.c ****         /* M = 7 */ { 586.7, 294.5, 147.1,  73.5, 36.7, 18.4,  9.2, 4.6, 2.3, 1.2},
  30:S2LP_Driver/s2lp_rx.c ****         /* M = 8 */ { 541.4, 270.3, 135.0,  67.5, 33.7, 16.9,  8.4, 4.2, 2.1, 1.1},
  31:S2LP_Driver/s2lp_rx.c ****         };
  32:S2LP_Driver/s2lp_rx.c **** // @formatter:on
  33:S2LP_Driver/s2lp_rx.c **** 
  34:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetRSSIThreshold(S2LP_Handle* handle, uint8_t rssi) {
 213              		.loc 1 34 66
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 8
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 217 0000 80B5     		push	{r7, lr}
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 82B0     		sub	sp, sp, #8
 222              		.cfi_def_cfa_offset 16
 223 0004 00AF     		add	r7, sp, #0
 224              		.cfi_def_cfa_register 7
 225 0006 7860     		str	r0, [r7, #4]
 226 0008 0B46     		mov	r3, r1
 227 000a FB70     		strb	r3, [r7, #3]
  35:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_RSSI_TH, rssi);
 228              		.loc 1 35 2
 229 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 230 000e 1A46     		mov	r2, r3
 231 0010 1821     		movs	r1, #24
 232 0012 7868     		ldr	r0, [r7, #4]
 233 0014 FFF7FEFF 		bl	S2LP_WriteRegister
  36:S2LP_Driver/s2lp_rx.c **** }
 234              		.loc 1 36 1
 235 0018 00BF     		nop
 236 001a 0837     		adds	r7, r7, #8
 237              		.cfi_def_cfa_offset 8
 238 001c BD46     		mov	sp, r7
 239              		.cfi_def_cfa_register 13
 240              		@ sp needed
 241 001e 80BD     		pop	{r7, pc}
 242              		.cfi_endproc
 243              	.LFE67:
 245              		.section	.text.S2LP_RX_SetAFCFastLoopGain,"ax",%progbits
 246              		.align	1
 247              		.global	S2LP_RX_SetAFCFastLoopGain
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 252              	S2LP_RX_SetAFCFastLoopGain:
 253              	.LFB68:
  37:S2LP_Driver/s2lp_rx.c **** 
ARM GAS  /tmp/ccVJDjsH.s 			page 6


  38:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetAFCFastLoopGain(S2LP_Handle* handle, uint8_t gain) {
 254              		.loc 1 38 68
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 16
 257              		@ frame_needed = 1, uses_anonymous_args = 0
 258 0000 80B5     		push	{r7, lr}
 259              		.cfi_def_cfa_offset 8
 260              		.cfi_offset 7, -8
 261              		.cfi_offset 14, -4
 262 0002 84B0     		sub	sp, sp, #16
 263              		.cfi_def_cfa_offset 24
 264 0004 00AF     		add	r7, sp, #0
 265              		.cfi_def_cfa_register 7
 266 0006 7860     		str	r0, [r7, #4]
 267 0008 0B46     		mov	r3, r1
 268 000a FB70     		strb	r3, [r7, #3]
  39:S2LP_Driver/s2lp_rx.c **** 	if (gain > 15) {
 269              		.loc 1 39 5
 270 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 271 000e 0F2B     		cmp	r3, #15
 272 0010 18D8     		bhi	.L5
  40:S2LP_Driver/s2lp_rx.c **** 		return;
  41:S2LP_Driver/s2lp_rx.c **** 	}
  42:S2LP_Driver/s2lp_rx.c **** 
  43:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_AFC0);
 273              		.loc 1 43 20
 274 0012 1621     		movs	r1, #22
 275 0014 7868     		ldr	r0, [r7, #4]
 276 0016 FFF7FEFF 		bl	S2LP_ReadRegister
 277 001a 0346     		mov	r3, r0
 278 001c FB73     		strb	r3, [r7, #15]
  44:S2LP_Driver/s2lp_rx.c **** 	CLEARBITS(reg_val, 0xF, 4);
 279              		.loc 1 44 2
 280 001e FB7B     		ldrb	r3, [r7, #15]
 281 0020 03F00F03 		and	r3, r3, #15
 282 0024 FB73     		strb	r3, [r7, #15]
  45:S2LP_Driver/s2lp_rx.c **** 	SETBITS(reg_val, gain, 0xF, 4);
 283              		.loc 1 45 2
 284 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 285 0028 1B01     		lsls	r3, r3, #4
 286 002a 5AB2     		sxtb	r2, r3
 287 002c 97F90F30 		ldrsb	r3, [r7, #15]
 288 0030 1343     		orrs	r3, r3, r2
 289 0032 5BB2     		sxtb	r3, r3
 290 0034 FB73     		strb	r3, [r7, #15]
  46:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_AFC0, reg_val);
 291              		.loc 1 46 2
 292 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 293 0038 1A46     		mov	r2, r3
 294 003a 1621     		movs	r1, #22
 295 003c 7868     		ldr	r0, [r7, #4]
 296 003e FFF7FEFF 		bl	S2LP_WriteRegister
 297 0042 00E0     		b	.L2
 298              	.L5:
  40:S2LP_Driver/s2lp_rx.c **** 	}
 299              		.loc 1 40 3
 300 0044 00BF     		nop
ARM GAS  /tmp/ccVJDjsH.s 			page 7


 301              	.L2:
  47:S2LP_Driver/s2lp_rx.c **** }
 302              		.loc 1 47 1
 303 0046 1037     		adds	r7, r7, #16
 304              		.cfi_def_cfa_offset 8
 305 0048 BD46     		mov	sp, r7
 306              		.cfi_def_cfa_register 13
 307              		@ sp needed
 308 004a 80BD     		pop	{r7, pc}
 309              		.cfi_endproc
 310              	.LFE68:
 312              		.section	.text.S2LP_RX_SetAFCSlowLoopGain,"ax",%progbits
 313              		.align	1
 314              		.global	S2LP_RX_SetAFCSlowLoopGain
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 319              	S2LP_RX_SetAFCSlowLoopGain:
 320              	.LFB69:
  48:S2LP_Driver/s2lp_rx.c **** 
  49:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetAFCSlowLoopGain(S2LP_Handle* handle, uint8_t gain) {
 321              		.loc 1 49 68
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 16
 324              		@ frame_needed = 1, uses_anonymous_args = 0
 325 0000 80B5     		push	{r7, lr}
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 7, -8
 328              		.cfi_offset 14, -4
 329 0002 84B0     		sub	sp, sp, #16
 330              		.cfi_def_cfa_offset 24
 331 0004 00AF     		add	r7, sp, #0
 332              		.cfi_def_cfa_register 7
 333 0006 7860     		str	r0, [r7, #4]
 334 0008 0B46     		mov	r3, r1
 335 000a FB70     		strb	r3, [r7, #3]
  50:S2LP_Driver/s2lp_rx.c **** 	if (gain > 15) {
 336              		.loc 1 50 5
 337 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 338 000e 0F2B     		cmp	r3, #15
 339 0010 1AD8     		bhi	.L9
  51:S2LP_Driver/s2lp_rx.c **** 		return;
  52:S2LP_Driver/s2lp_rx.c **** 	}
  53:S2LP_Driver/s2lp_rx.c **** 
  54:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_AFC0);
 340              		.loc 1 54 20
 341 0012 1621     		movs	r1, #22
 342 0014 7868     		ldr	r0, [r7, #4]
 343 0016 FFF7FEFF 		bl	S2LP_ReadRegister
 344 001a 0346     		mov	r3, r0
 345 001c FB73     		strb	r3, [r7, #15]
  55:S2LP_Driver/s2lp_rx.c **** 	CLEARBITS(reg_val, 0xF, 0);
 346              		.loc 1 55 2
 347 001e FB7B     		ldrb	r3, [r7, #15]
 348 0020 23F00F03 		bic	r3, r3, #15
 349 0024 FB73     		strb	r3, [r7, #15]
  56:S2LP_Driver/s2lp_rx.c **** 	SETBITS(reg_val, gain, 0xF, 0);
ARM GAS  /tmp/ccVJDjsH.s 			page 8


 350              		.loc 1 56 2
 351 0026 97F90330 		ldrsb	r3, [r7, #3]
 352 002a 03F00F03 		and	r3, r3, #15
 353 002e 5AB2     		sxtb	r2, r3
 354 0030 97F90F30 		ldrsb	r3, [r7, #15]
 355 0034 1343     		orrs	r3, r3, r2
 356 0036 5BB2     		sxtb	r3, r3
 357 0038 FB73     		strb	r3, [r7, #15]
  57:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_AFC0, reg_val);
 358              		.loc 1 57 2
 359 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 360 003c 1A46     		mov	r2, r3
 361 003e 1621     		movs	r1, #22
 362 0040 7868     		ldr	r0, [r7, #4]
 363 0042 FFF7FEFF 		bl	S2LP_WriteRegister
 364 0046 00E0     		b	.L6
 365              	.L9:
  51:S2LP_Driver/s2lp_rx.c **** 	}
 366              		.loc 1 51 3
 367 0048 00BF     		nop
 368              	.L6:
  58:S2LP_Driver/s2lp_rx.c **** }
 369              		.loc 1 58 1
 370 004a 1037     		adds	r7, r7, #16
 371              		.cfi_def_cfa_offset 8
 372 004c BD46     		mov	sp, r7
 373              		.cfi_def_cfa_register 13
 374              		@ sp needed
 375 004e 80BD     		pop	{r7, pc}
 376              		.cfi_endproc
 377              	.LFE69:
 379              		.section	.text.S2LP_RX_SetAFCFastPeriod,"ax",%progbits
 380              		.align	1
 381              		.global	S2LP_RX_SetAFCFastPeriod
 382              		.syntax unified
 383              		.thumb
 384              		.thumb_func
 386              	S2LP_RX_SetAFCFastPeriod:
 387              	.LFB70:
  59:S2LP_Driver/s2lp_rx.c **** 
  60:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetAFCFastPeriod(S2LP_Handle* handle, uint8_t period) {
 388              		.loc 1 60 68
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 8
 391              		@ frame_needed = 1, uses_anonymous_args = 0
 392 0000 80B5     		push	{r7, lr}
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 7, -8
 395              		.cfi_offset 14, -4
 396 0002 82B0     		sub	sp, sp, #8
 397              		.cfi_def_cfa_offset 16
 398 0004 00AF     		add	r7, sp, #0
 399              		.cfi_def_cfa_register 7
 400 0006 7860     		str	r0, [r7, #4]
 401 0008 0B46     		mov	r3, r1
 402 000a FB70     		strb	r3, [r7, #3]
  61:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_AFC1, period);
ARM GAS  /tmp/ccVJDjsH.s 			page 9


 403              		.loc 1 61 2
 404 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 405 000e 1A46     		mov	r2, r3
 406 0010 1521     		movs	r1, #21
 407 0012 7868     		ldr	r0, [r7, #4]
 408 0014 FFF7FEFF 		bl	S2LP_WriteRegister
  62:S2LP_Driver/s2lp_rx.c **** }
 409              		.loc 1 62 1
 410 0018 00BF     		nop
 411 001a 0837     		adds	r7, r7, #8
 412              		.cfi_def_cfa_offset 8
 413 001c BD46     		mov	sp, r7
 414              		.cfi_def_cfa_register 13
 415              		@ sp needed
 416 001e 80BD     		pop	{r7, pc}
 417              		.cfi_endproc
 418              	.LFE70:
 420              		.section	.text.S2LP_RX_SetAFCMode,"ax",%progbits
 421              		.align	1
 422              		.global	S2LP_RX_SetAFCMode
 423              		.syntax unified
 424              		.thumb
 425              		.thumb_func
 427              	S2LP_RX_SetAFCMode:
 428              	.LFB71:
  63:S2LP_Driver/s2lp_rx.c **** 
  64:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetAFCMode(S2LP_Handle* handle, S2LP_AFC_Mode mode) {
 429              		.loc 1 64 66
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 16
 432              		@ frame_needed = 1, uses_anonymous_args = 0
 433 0000 80B5     		push	{r7, lr}
 434              		.cfi_def_cfa_offset 8
 435              		.cfi_offset 7, -8
 436              		.cfi_offset 14, -4
 437 0002 84B0     		sub	sp, sp, #16
 438              		.cfi_def_cfa_offset 24
 439 0004 00AF     		add	r7, sp, #0
 440              		.cfi_def_cfa_register 7
 441 0006 7860     		str	r0, [r7, #4]
 442 0008 0B46     		mov	r3, r1
 443 000a FB70     		strb	r3, [r7, #3]
  65:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_AFC2);
 444              		.loc 1 65 20
 445 000c 1421     		movs	r1, #20
 446 000e 7868     		ldr	r0, [r7, #4]
 447 0010 FFF7FEFF 		bl	S2LP_ReadRegister
 448 0014 0346     		mov	r3, r0
 449 0016 FB73     		strb	r3, [r7, #15]
  66:S2LP_Driver/s2lp_rx.c **** 	switch (mode) {
 450              		.loc 1 66 2
 451 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 452 001a 002B     		cmp	r3, #0
 453 001c 02D0     		beq	.L12
 454 001e 012B     		cmp	r3, #1
 455 0020 05D0     		beq	.L13
 456 0022 09E0     		b	.L14
ARM GAS  /tmp/ccVJDjsH.s 			page 10


 457              	.L12:
  67:S2LP_Driver/s2lp_rx.c **** 		case S2LP_AFC_SLICER_CORRECTION:
  68:S2LP_Driver/s2lp_rx.c **** 			CLEARBIT(reg_val, 5);
 458              		.loc 1 68 4
 459 0024 FB7B     		ldrb	r3, [r7, #15]
 460 0026 23F02003 		bic	r3, r3, #32
 461 002a FB73     		strb	r3, [r7, #15]
  69:S2LP_Driver/s2lp_rx.c **** 			break;
 462              		.loc 1 69 4
 463 002c 04E0     		b	.L14
 464              	.L13:
  70:S2LP_Driver/s2lp_rx.c **** 		case S2LP_AFC_2ND_IF_CORRECTION:
  71:S2LP_Driver/s2lp_rx.c **** 			SETBIT(reg_val, 5);
 465              		.loc 1 71 4
 466 002e FB7B     		ldrb	r3, [r7, #15]
 467 0030 43F02003 		orr	r3, r3, #32
 468 0034 FB73     		strb	r3, [r7, #15]
  72:S2LP_Driver/s2lp_rx.c **** 			break;
 469              		.loc 1 72 4
 470 0036 00BF     		nop
 471              	.L14:
  73:S2LP_Driver/s2lp_rx.c **** 	}
  74:S2LP_Driver/s2lp_rx.c **** 
  75:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_AFC2, reg_val);
 472              		.loc 1 75 2
 473 0038 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 474 003a 1A46     		mov	r2, r3
 475 003c 1421     		movs	r1, #20
 476 003e 7868     		ldr	r0, [r7, #4]
 477 0040 FFF7FEFF 		bl	S2LP_WriteRegister
  76:S2LP_Driver/s2lp_rx.c **** }
 478              		.loc 1 76 1
 479 0044 00BF     		nop
 480 0046 1037     		adds	r7, r7, #16
 481              		.cfi_def_cfa_offset 8
 482 0048 BD46     		mov	sp, r7
 483              		.cfi_def_cfa_register 13
 484              		@ sp needed
 485 004a 80BD     		pop	{r7, pc}
 486              		.cfi_endproc
 487              	.LFE71:
 489              		.section	.text.S2LP_RX_SetAFCState,"ax",%progbits
 490              		.align	1
 491              		.global	S2LP_RX_SetAFCState
 492              		.syntax unified
 493              		.thumb
 494              		.thumb_func
 496              	S2LP_RX_SetAFCState:
 497              	.LFB72:
  77:S2LP_Driver/s2lp_rx.c **** 
  78:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetAFCState(S2LP_Handle* handle, bool enabled) {
 498              		.loc 1 78 61
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 16
 501              		@ frame_needed = 1, uses_anonymous_args = 0
 502 0000 80B5     		push	{r7, lr}
 503              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccVJDjsH.s 			page 11


 504              		.cfi_offset 7, -8
 505              		.cfi_offset 14, -4
 506 0002 84B0     		sub	sp, sp, #16
 507              		.cfi_def_cfa_offset 24
 508 0004 00AF     		add	r7, sp, #0
 509              		.cfi_def_cfa_register 7
 510 0006 7860     		str	r0, [r7, #4]
 511 0008 0B46     		mov	r3, r1
 512 000a FB70     		strb	r3, [r7, #3]
  79:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_AFC2);
 513              		.loc 1 79 20
 514 000c 1421     		movs	r1, #20
 515 000e 7868     		ldr	r0, [r7, #4]
 516 0010 FFF7FEFF 		bl	S2LP_ReadRegister
 517 0014 0346     		mov	r3, r0
 518 0016 FB73     		strb	r3, [r7, #15]
  80:S2LP_Driver/s2lp_rx.c **** 	if (enabled) {
 519              		.loc 1 80 5
 520 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 521 001a 002B     		cmp	r3, #0
 522 001c 04D0     		beq	.L16
  81:S2LP_Driver/s2lp_rx.c **** 		SETBIT(reg_val, 6);
 523              		.loc 1 81 3
 524 001e FB7B     		ldrb	r3, [r7, #15]
 525 0020 43F04003 		orr	r3, r3, #64
 526 0024 FB73     		strb	r3, [r7, #15]
 527 0026 03E0     		b	.L17
 528              	.L16:
  82:S2LP_Driver/s2lp_rx.c **** 	} else {
  83:S2LP_Driver/s2lp_rx.c **** 		CLEARBIT(reg_val, 6);
 529              		.loc 1 83 3
 530 0028 FB7B     		ldrb	r3, [r7, #15]
 531 002a 23F04003 		bic	r3, r3, #64
 532 002e FB73     		strb	r3, [r7, #15]
 533              	.L17:
  84:S2LP_Driver/s2lp_rx.c **** 	}
  85:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_AFC2, reg_val);
 534              		.loc 1 85 2
 535 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 536 0032 1A46     		mov	r2, r3
 537 0034 1421     		movs	r1, #20
 538 0036 7868     		ldr	r0, [r7, #4]
 539 0038 FFF7FEFF 		bl	S2LP_WriteRegister
  86:S2LP_Driver/s2lp_rx.c **** }
 540              		.loc 1 86 1
 541 003c 00BF     		nop
 542 003e 1037     		adds	r7, r7, #16
 543              		.cfi_def_cfa_offset 8
 544 0040 BD46     		mov	sp, r7
 545              		.cfi_def_cfa_register 13
 546              		@ sp needed
 547 0042 80BD     		pop	{r7, pc}
 548              		.cfi_endproc
 549              	.LFE72:
 551              		.section	.text.S2LP_RX_SetAFCFreezeOnSyncState,"ax",%progbits
 552              		.align	1
 553              		.global	S2LP_RX_SetAFCFreezeOnSyncState
ARM GAS  /tmp/ccVJDjsH.s 			page 12


 554              		.syntax unified
 555              		.thumb
 556              		.thumb_func
 558              	S2LP_RX_SetAFCFreezeOnSyncState:
 559              	.LFB73:
  87:S2LP_Driver/s2lp_rx.c **** 
  88:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetAFCFreezeOnSyncState(S2LP_Handle* handle, bool enabled) {
 560              		.loc 1 88 73
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 16
 563              		@ frame_needed = 1, uses_anonymous_args = 0
 564 0000 80B5     		push	{r7, lr}
 565              		.cfi_def_cfa_offset 8
 566              		.cfi_offset 7, -8
 567              		.cfi_offset 14, -4
 568 0002 84B0     		sub	sp, sp, #16
 569              		.cfi_def_cfa_offset 24
 570 0004 00AF     		add	r7, sp, #0
 571              		.cfi_def_cfa_register 7
 572 0006 7860     		str	r0, [r7, #4]
 573 0008 0B46     		mov	r3, r1
 574 000a FB70     		strb	r3, [r7, #3]
  89:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_AFC2);
 575              		.loc 1 89 20
 576 000c 1421     		movs	r1, #20
 577 000e 7868     		ldr	r0, [r7, #4]
 578 0010 FFF7FEFF 		bl	S2LP_ReadRegister
 579 0014 0346     		mov	r3, r0
 580 0016 FB73     		strb	r3, [r7, #15]
  90:S2LP_Driver/s2lp_rx.c **** 	if (enabled) {
 581              		.loc 1 90 5
 582 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 583 001a 002B     		cmp	r3, #0
 584 001c 04D0     		beq	.L19
  91:S2LP_Driver/s2lp_rx.c **** 		SETBIT(reg_val, 7);
 585              		.loc 1 91 3
 586 001e FB7B     		ldrb	r3, [r7, #15]
 587 0020 63F07F03 		orn	r3, r3, #127
 588 0024 FB73     		strb	r3, [r7, #15]
 589 0026 03E0     		b	.L20
 590              	.L19:
  92:S2LP_Driver/s2lp_rx.c **** 	} else {
  93:S2LP_Driver/s2lp_rx.c **** 		CLEARBIT(reg_val, 7);
 591              		.loc 1 93 3
 592 0028 FB7B     		ldrb	r3, [r7, #15]
 593 002a 03F07F03 		and	r3, r3, #127
 594 002e FB73     		strb	r3, [r7, #15]
 595              	.L20:
  94:S2LP_Driver/s2lp_rx.c **** 	}
  95:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_AFC2, reg_val);
 596              		.loc 1 95 2
 597 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 598 0032 1A46     		mov	r2, r3
 599 0034 1421     		movs	r1, #20
 600 0036 7868     		ldr	r0, [r7, #4]
 601 0038 FFF7FEFF 		bl	S2LP_WriteRegister
  96:S2LP_Driver/s2lp_rx.c **** }
ARM GAS  /tmp/ccVJDjsH.s 			page 13


 602              		.loc 1 96 1
 603 003c 00BF     		nop
 604 003e 1037     		adds	r7, r7, #16
 605              		.cfi_def_cfa_offset 8
 606 0040 BD46     		mov	sp, r7
 607              		.cfi_def_cfa_register 13
 608              		@ sp needed
 609 0042 80BD     		pop	{r7, pc}
 610              		.cfi_endproc
 611              	.LFE73:
 613              		.section	.text.S2LP_RX_SetAGCHighThreshold,"ax",%progbits
 614              		.align	1
 615              		.global	S2LP_RX_SetAGCHighThreshold
 616              		.syntax unified
 617              		.thumb
 618              		.thumb_func
 620              	S2LP_RX_SetAGCHighThreshold:
 621              	.LFB74:
  97:S2LP_Driver/s2lp_rx.c **** 
  98:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetAGCHighThreshold(S2LP_Handle* handle, uint8_t value) {
 622              		.loc 1 98 70
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 16
 625              		@ frame_needed = 1, uses_anonymous_args = 0
 626 0000 80B5     		push	{r7, lr}
 627              		.cfi_def_cfa_offset 8
 628              		.cfi_offset 7, -8
 629              		.cfi_offset 14, -4
 630 0002 84B0     		sub	sp, sp, #16
 631              		.cfi_def_cfa_offset 24
 632 0004 00AF     		add	r7, sp, #0
 633              		.cfi_def_cfa_register 7
 634 0006 7860     		str	r0, [r7, #4]
 635 0008 0B46     		mov	r3, r1
 636 000a FB70     		strb	r3, [r7, #3]
  99:S2LP_Driver/s2lp_rx.c **** 	if (value > 15) {
 637              		.loc 1 99 5
 638 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 639 000e 0F2B     		cmp	r3, #15
 640 0010 18D8     		bhi	.L24
 100:S2LP_Driver/s2lp_rx.c **** 		return;
 101:S2LP_Driver/s2lp_rx.c **** 	}
 102:S2LP_Driver/s2lp_rx.c **** 
 103:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_AGCCTRL1);
 641              		.loc 1 103 20
 642 0012 1D21     		movs	r1, #29
 643 0014 7868     		ldr	r0, [r7, #4]
 644 0016 FFF7FEFF 		bl	S2LP_ReadRegister
 645 001a 0346     		mov	r3, r0
 646 001c FB73     		strb	r3, [r7, #15]
 104:S2LP_Driver/s2lp_rx.c **** 	CLEARBITS(reg_val, 0xF, 4);
 647              		.loc 1 104 2
 648 001e FB7B     		ldrb	r3, [r7, #15]
 649 0020 03F00F03 		and	r3, r3, #15
 650 0024 FB73     		strb	r3, [r7, #15]
 105:S2LP_Driver/s2lp_rx.c **** 	SETBITS(reg_val, value, 0xF, 4);
 651              		.loc 1 105 2
ARM GAS  /tmp/ccVJDjsH.s 			page 14


 652 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 653 0028 1B01     		lsls	r3, r3, #4
 654 002a 5AB2     		sxtb	r2, r3
 655 002c 97F90F30 		ldrsb	r3, [r7, #15]
 656 0030 1343     		orrs	r3, r3, r2
 657 0032 5BB2     		sxtb	r3, r3
 658 0034 FB73     		strb	r3, [r7, #15]
 106:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_AGCCTRL1, reg_val);
 659              		.loc 1 106 2
 660 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 661 0038 1A46     		mov	r2, r3
 662 003a 1D21     		movs	r1, #29
 663 003c 7868     		ldr	r0, [r7, #4]
 664 003e FFF7FEFF 		bl	S2LP_WriteRegister
 665 0042 00E0     		b	.L21
 666              	.L24:
 100:S2LP_Driver/s2lp_rx.c **** 	}
 667              		.loc 1 100 3
 668 0044 00BF     		nop
 669              	.L21:
 107:S2LP_Driver/s2lp_rx.c **** }
 670              		.loc 1 107 1
 671 0046 1037     		adds	r7, r7, #16
 672              		.cfi_def_cfa_offset 8
 673 0048 BD46     		mov	sp, r7
 674              		.cfi_def_cfa_register 13
 675              		@ sp needed
 676 004a 80BD     		pop	{r7, pc}
 677              		.cfi_endproc
 678              	.LFE74:
 680              		.section	.text.S2LP_RX_SetAGCLowThreshold,"ax",%progbits
 681              		.align	1
 682              		.global	S2LP_RX_SetAGCLowThreshold
 683              		.syntax unified
 684              		.thumb
 685              		.thumb_func
 687              	S2LP_RX_SetAGCLowThreshold:
 688              	.LFB75:
 108:S2LP_Driver/s2lp_rx.c **** 
 109:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetAGCLowThreshold(S2LP_Handle* handle, S2LP_AGC_Low_Threshold threshold, uint8_t valu
 689              		.loc 1 109 103
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 16
 692              		@ frame_needed = 1, uses_anonymous_args = 0
 693 0000 80B5     		push	{r7, lr}
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 7, -8
 696              		.cfi_offset 14, -4
 697 0002 84B0     		sub	sp, sp, #16
 698              		.cfi_def_cfa_offset 24
 699 0004 00AF     		add	r7, sp, #0
 700              		.cfi_def_cfa_register 7
 701 0006 7860     		str	r0, [r7, #4]
 702 0008 0B46     		mov	r3, r1
 703 000a FB70     		strb	r3, [r7, #3]
 704 000c 1346     		mov	r3, r2
 705 000e BB70     		strb	r3, [r7, #2]
ARM GAS  /tmp/ccVJDjsH.s 			page 15


 110:S2LP_Driver/s2lp_rx.c **** 	if (value > 15) {
 706              		.loc 1 110 5
 707 0010 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 708 0012 0F2B     		cmp	r3, #15
 709 0014 2ED8     		bhi	.L31
 111:S2LP_Driver/s2lp_rx.c **** 		return;
 112:S2LP_Driver/s2lp_rx.c **** 	}
 113:S2LP_Driver/s2lp_rx.c **** 
 114:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_AGCCTRL4);
 710              		.loc 1 114 20
 711 0016 1A21     		movs	r1, #26
 712 0018 7868     		ldr	r0, [r7, #4]
 713 001a FFF7FEFF 		bl	S2LP_ReadRegister
 714 001e 0346     		mov	r3, r0
 715 0020 FB73     		strb	r3, [r7, #15]
 115:S2LP_Driver/s2lp_rx.c **** 	switch (threshold) {
 716              		.loc 1 115 2
 717 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 718 0024 002B     		cmp	r3, #0
 719 0026 02D0     		beq	.L28
 720 0028 012B     		cmp	r3, #1
 721 002a 0DD0     		beq	.L29
 722 002c 1BE0     		b	.L30
 723              	.L28:
 116:S2LP_Driver/s2lp_rx.c **** 		case S2LP_AGC_LOW_THRESHOLD_0:
 117:S2LP_Driver/s2lp_rx.c **** 			CLEARBITS(reg_val, 0xF, 4);
 724              		.loc 1 117 4
 725 002e FB7B     		ldrb	r3, [r7, #15]
 726 0030 03F00F03 		and	r3, r3, #15
 727 0034 FB73     		strb	r3, [r7, #15]
 118:S2LP_Driver/s2lp_rx.c **** 			SETBITS(reg_val, value, 0xF, 4);
 728              		.loc 1 118 4
 729 0036 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 730 0038 1B01     		lsls	r3, r3, #4
 731 003a 5AB2     		sxtb	r2, r3
 732 003c 97F90F30 		ldrsb	r3, [r7, #15]
 733 0040 1343     		orrs	r3, r3, r2
 734 0042 5BB2     		sxtb	r3, r3
 735 0044 FB73     		strb	r3, [r7, #15]
 119:S2LP_Driver/s2lp_rx.c **** 			break;
 736              		.loc 1 119 4
 737 0046 0EE0     		b	.L30
 738              	.L29:
 120:S2LP_Driver/s2lp_rx.c **** 		case S2LP_AGC_LOW_THRESHOLD_1:
 121:S2LP_Driver/s2lp_rx.c **** 			CLEARBITS(reg_val, 0xF, 0);
 739              		.loc 1 121 4
 740 0048 FB7B     		ldrb	r3, [r7, #15]
 741 004a 23F00F03 		bic	r3, r3, #15
 742 004e FB73     		strb	r3, [r7, #15]
 122:S2LP_Driver/s2lp_rx.c **** 			SETBITS(reg_val, value, 0xF, 0);
 743              		.loc 1 122 4
 744 0050 97F90230 		ldrsb	r3, [r7, #2]
 745 0054 03F00F03 		and	r3, r3, #15
 746 0058 5AB2     		sxtb	r2, r3
 747 005a 97F90F30 		ldrsb	r3, [r7, #15]
 748 005e 1343     		orrs	r3, r3, r2
 749 0060 5BB2     		sxtb	r3, r3
ARM GAS  /tmp/ccVJDjsH.s 			page 16


 750 0062 FB73     		strb	r3, [r7, #15]
 123:S2LP_Driver/s2lp_rx.c **** 			break;
 751              		.loc 1 123 4
 752 0064 00BF     		nop
 753              	.L30:
 124:S2LP_Driver/s2lp_rx.c **** 	}
 125:S2LP_Driver/s2lp_rx.c **** 
 126:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_AGCCTRL4, reg_val);
 754              		.loc 1 126 2
 755 0066 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 756 0068 1A46     		mov	r2, r3
 757 006a 1A21     		movs	r1, #26
 758 006c 7868     		ldr	r0, [r7, #4]
 759 006e FFF7FEFF 		bl	S2LP_WriteRegister
 760 0072 00E0     		b	.L25
 761              	.L31:
 111:S2LP_Driver/s2lp_rx.c **** 	}
 762              		.loc 1 111 3
 763 0074 00BF     		nop
 764              	.L25:
 127:S2LP_Driver/s2lp_rx.c **** }
 765              		.loc 1 127 1
 766 0076 1037     		adds	r7, r7, #16
 767              		.cfi_def_cfa_offset 8
 768 0078 BD46     		mov	sp, r7
 769              		.cfi_def_cfa_register 13
 770              		@ sp needed
 771 007a 80BD     		pop	{r7, pc}
 772              		.cfi_endproc
 773              	.LFE75:
 775              		.section	.text.S2LP_RX_SetAGCMeasureTimeRaw,"ax",%progbits
 776              		.align	1
 777              		.global	S2LP_RX_SetAGCMeasureTimeRaw
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 782              	S2LP_RX_SetAGCMeasureTimeRaw:
 783              	.LFB76:
 128:S2LP_Driver/s2lp_rx.c **** 
 129:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetAGCMeasureTimeRaw(S2LP_Handle* handle, uint8_t time) {
 784              		.loc 1 129 70
 785              		.cfi_startproc
 786              		@ args = 0, pretend = 0, frame = 16
 787              		@ frame_needed = 1, uses_anonymous_args = 0
 788 0000 80B5     		push	{r7, lr}
 789              		.cfi_def_cfa_offset 8
 790              		.cfi_offset 7, -8
 791              		.cfi_offset 14, -4
 792 0002 84B0     		sub	sp, sp, #16
 793              		.cfi_def_cfa_offset 24
 794 0004 00AF     		add	r7, sp, #0
 795              		.cfi_def_cfa_register 7
 796 0006 7860     		str	r0, [r7, #4]
 797 0008 0B46     		mov	r3, r1
 798 000a FB70     		strb	r3, [r7, #3]
 130:S2LP_Driver/s2lp_rx.c **** 	if (time > 15) {
 799              		.loc 1 130 5
ARM GAS  /tmp/ccVJDjsH.s 			page 17


 800 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 801 000e 0F2B     		cmp	r3, #15
 802 0010 1AD8     		bhi	.L35
 131:S2LP_Driver/s2lp_rx.c **** 		return;
 132:S2LP_Driver/s2lp_rx.c **** 	}
 133:S2LP_Driver/s2lp_rx.c **** 
 134:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_AGCCTRL2);
 803              		.loc 1 134 20
 804 0012 1C21     		movs	r1, #28
 805 0014 7868     		ldr	r0, [r7, #4]
 806 0016 FFF7FEFF 		bl	S2LP_ReadRegister
 807 001a 0346     		mov	r3, r0
 808 001c FB73     		strb	r3, [r7, #15]
 135:S2LP_Driver/s2lp_rx.c **** 	CLEARBITS(reg_val, 0xF, 0);
 809              		.loc 1 135 2
 810 001e FB7B     		ldrb	r3, [r7, #15]
 811 0020 23F00F03 		bic	r3, r3, #15
 812 0024 FB73     		strb	r3, [r7, #15]
 136:S2LP_Driver/s2lp_rx.c **** 	SETBITS(reg_val, time, 0xF, 0);
 813              		.loc 1 136 2
 814 0026 97F90330 		ldrsb	r3, [r7, #3]
 815 002a 03F00F03 		and	r3, r3, #15
 816 002e 5AB2     		sxtb	r2, r3
 817 0030 97F90F30 		ldrsb	r3, [r7, #15]
 818 0034 1343     		orrs	r3, r3, r2
 819 0036 5BB2     		sxtb	r3, r3
 820 0038 FB73     		strb	r3, [r7, #15]
 137:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_AGCCTRL2, reg_val);
 821              		.loc 1 137 2
 822 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 823 003c 1A46     		mov	r2, r3
 824 003e 1C21     		movs	r1, #28
 825 0040 7868     		ldr	r0, [r7, #4]
 826 0042 FFF7FEFF 		bl	S2LP_WriteRegister
 827 0046 00E0     		b	.L32
 828              	.L35:
 131:S2LP_Driver/s2lp_rx.c **** 	}
 829              		.loc 1 131 3
 830 0048 00BF     		nop
 831              	.L32:
 138:S2LP_Driver/s2lp_rx.c **** }
 832              		.loc 1 138 1
 833 004a 1037     		adds	r7, r7, #16
 834              		.cfi_def_cfa_offset 8
 835 004c BD46     		mov	sp, r7
 836              		.cfi_def_cfa_register 13
 837              		@ sp needed
 838 004e 80BD     		pop	{r7, pc}
 839              		.cfi_endproc
 840              	.LFE76:
 842              		.section	.text.S2LP_RX_SetAGCHoldTimeRaw,"ax",%progbits
 843              		.align	1
 844              		.global	S2LP_RX_SetAGCHoldTimeRaw
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
 849              	S2LP_RX_SetAGCHoldTimeRaw:
ARM GAS  /tmp/ccVJDjsH.s 			page 18


 850              	.LFB77:
 139:S2LP_Driver/s2lp_rx.c **** 
 140:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetAGCHoldTimeRaw(S2LP_Handle* handle, uint8_t time) {
 851              		.loc 1 140 67
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 16
 854              		@ frame_needed = 1, uses_anonymous_args = 0
 855 0000 80B5     		push	{r7, lr}
 856              		.cfi_def_cfa_offset 8
 857              		.cfi_offset 7, -8
 858              		.cfi_offset 14, -4
 859 0002 84B0     		sub	sp, sp, #16
 860              		.cfi_def_cfa_offset 24
 861 0004 00AF     		add	r7, sp, #0
 862              		.cfi_def_cfa_register 7
 863 0006 7860     		str	r0, [r7, #4]
 864 0008 0B46     		mov	r3, r1
 865 000a FB70     		strb	r3, [r7, #3]
 141:S2LP_Driver/s2lp_rx.c **** 	if (time > 31) {
 866              		.loc 1 141 5
 867 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 868 000e 1F2B     		cmp	r3, #31
 869 0010 1AD8     		bhi	.L39
 142:S2LP_Driver/s2lp_rx.c **** 		return;
 143:S2LP_Driver/s2lp_rx.c **** 	}
 144:S2LP_Driver/s2lp_rx.c **** 
 145:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_AGCCTRL0);
 870              		.loc 1 145 20
 871 0012 1E21     		movs	r1, #30
 872 0014 7868     		ldr	r0, [r7, #4]
 873 0016 FFF7FEFF 		bl	S2LP_ReadRegister
 874 001a 0346     		mov	r3, r0
 875 001c FB73     		strb	r3, [r7, #15]
 146:S2LP_Driver/s2lp_rx.c **** 	CLEARBITS(reg_val, 0b11111, 0);
 876              		.loc 1 146 2
 877 001e FB7B     		ldrb	r3, [r7, #15]
 878 0020 23F01F03 		bic	r3, r3, #31
 879 0024 FB73     		strb	r3, [r7, #15]
 147:S2LP_Driver/s2lp_rx.c **** 	SETBITS(reg_val, time, 0b11111, 0);
 880              		.loc 1 147 2
 881 0026 97F90330 		ldrsb	r3, [r7, #3]
 882 002a 03F01F03 		and	r3, r3, #31
 883 002e 5AB2     		sxtb	r2, r3
 884 0030 97F90F30 		ldrsb	r3, [r7, #15]
 885 0034 1343     		orrs	r3, r3, r2
 886 0036 5BB2     		sxtb	r3, r3
 887 0038 FB73     		strb	r3, [r7, #15]
 148:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_AGCCTRL0, reg_val);
 888              		.loc 1 148 2
 889 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 890 003c 1A46     		mov	r2, r3
 891 003e 1E21     		movs	r1, #30
 892 0040 7868     		ldr	r0, [r7, #4]
 893 0042 FFF7FEFF 		bl	S2LP_WriteRegister
 894 0046 00E0     		b	.L36
 895              	.L39:
 142:S2LP_Driver/s2lp_rx.c **** 	}
ARM GAS  /tmp/ccVJDjsH.s 			page 19


 896              		.loc 1 142 3
 897 0048 00BF     		nop
 898              	.L36:
 149:S2LP_Driver/s2lp_rx.c **** }
 899              		.loc 1 149 1
 900 004a 1037     		adds	r7, r7, #16
 901              		.cfi_def_cfa_offset 8
 902 004c BD46     		mov	sp, r7
 903              		.cfi_def_cfa_register 13
 904              		@ sp needed
 905 004e 80BD     		pop	{r7, pc}
 906              		.cfi_endproc
 907              	.LFE77:
 909              		.section	.text.S2LP_RX_SetAGCState,"ax",%progbits
 910              		.align	1
 911              		.global	S2LP_RX_SetAGCState
 912              		.syntax unified
 913              		.thumb
 914              		.thumb_func
 916              	S2LP_RX_SetAGCState:
 917              	.LFB78:
 150:S2LP_Driver/s2lp_rx.c **** 
 151:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetAGCState(S2LP_Handle* handle, bool enabled) {
 918              		.loc 1 151 61
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 16
 921              		@ frame_needed = 1, uses_anonymous_args = 0
 922 0000 80B5     		push	{r7, lr}
 923              		.cfi_def_cfa_offset 8
 924              		.cfi_offset 7, -8
 925              		.cfi_offset 14, -4
 926 0002 84B0     		sub	sp, sp, #16
 927              		.cfi_def_cfa_offset 24
 928 0004 00AF     		add	r7, sp, #0
 929              		.cfi_def_cfa_register 7
 930 0006 7860     		str	r0, [r7, #4]
 931 0008 0B46     		mov	r3, r1
 932 000a FB70     		strb	r3, [r7, #3]
 152:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_AGCCTRL0);
 933              		.loc 1 152 20
 934 000c 1E21     		movs	r1, #30
 935 000e 7868     		ldr	r0, [r7, #4]
 936 0010 FFF7FEFF 		bl	S2LP_ReadRegister
 937 0014 0346     		mov	r3, r0
 938 0016 FB73     		strb	r3, [r7, #15]
 153:S2LP_Driver/s2lp_rx.c **** 	if (enabled) {
 939              		.loc 1 153 5
 940 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 941 001a 002B     		cmp	r3, #0
 942 001c 04D0     		beq	.L41
 154:S2LP_Driver/s2lp_rx.c **** 		SETBIT(reg_val, 7);
 943              		.loc 1 154 3
 944 001e FB7B     		ldrb	r3, [r7, #15]
 945 0020 63F07F03 		orn	r3, r3, #127
 946 0024 FB73     		strb	r3, [r7, #15]
 947 0026 03E0     		b	.L42
 948              	.L41:
ARM GAS  /tmp/ccVJDjsH.s 			page 20


 155:S2LP_Driver/s2lp_rx.c **** 	} else {
 156:S2LP_Driver/s2lp_rx.c **** 		CLEARBIT(reg_val, 7);
 949              		.loc 1 156 3
 950 0028 FB7B     		ldrb	r3, [r7, #15]
 951 002a 03F07F03 		and	r3, r3, #127
 952 002e FB73     		strb	r3, [r7, #15]
 953              	.L42:
 157:S2LP_Driver/s2lp_rx.c **** 	}
 158:S2LP_Driver/s2lp_rx.c **** 
 159:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_AGCCTRL0, reg_val);
 954              		.loc 1 159 2
 955 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 956 0032 1A46     		mov	r2, r3
 957 0034 1E21     		movs	r1, #30
 958 0036 7868     		ldr	r0, [r7, #4]
 959 0038 FFF7FEFF 		bl	S2LP_WriteRegister
 160:S2LP_Driver/s2lp_rx.c **** }
 960              		.loc 1 160 1
 961 003c 00BF     		nop
 962 003e 1037     		adds	r7, r7, #16
 963              		.cfi_def_cfa_offset 8
 964 0040 BD46     		mov	sp, r7
 965              		.cfi_def_cfa_register 13
 966              		@ sp needed
 967 0042 80BD     		pop	{r7, pc}
 968              		.cfi_endproc
 969              	.LFE78:
 971              		.section	.text.S2LP_RX_SetAGCFreezeOnSyncState,"ax",%progbits
 972              		.align	1
 973              		.global	S2LP_RX_SetAGCFreezeOnSyncState
 974              		.syntax unified
 975              		.thumb
 976              		.thumb_func
 978              	S2LP_RX_SetAGCFreezeOnSyncState:
 979              	.LFB79:
 161:S2LP_Driver/s2lp_rx.c **** 
 162:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetAGCFreezeOnSyncState(S2LP_Handle* handle, bool enabled) {
 980              		.loc 1 162 73
 981              		.cfi_startproc
 982              		@ args = 0, pretend = 0, frame = 16
 983              		@ frame_needed = 1, uses_anonymous_args = 0
 984 0000 80B5     		push	{r7, lr}
 985              		.cfi_def_cfa_offset 8
 986              		.cfi_offset 7, -8
 987              		.cfi_offset 14, -4
 988 0002 84B0     		sub	sp, sp, #16
 989              		.cfi_def_cfa_offset 24
 990 0004 00AF     		add	r7, sp, #0
 991              		.cfi_def_cfa_register 7
 992 0006 7860     		str	r0, [r7, #4]
 993 0008 0B46     		mov	r3, r1
 994 000a FB70     		strb	r3, [r7, #3]
 163:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_AGCCTRL2);
 995              		.loc 1 163 20
 996 000c 1C21     		movs	r1, #28
 997 000e 7868     		ldr	r0, [r7, #4]
 998 0010 FFF7FEFF 		bl	S2LP_ReadRegister
ARM GAS  /tmp/ccVJDjsH.s 			page 21


 999 0014 0346     		mov	r3, r0
 1000 0016 FB73     		strb	r3, [r7, #15]
 164:S2LP_Driver/s2lp_rx.c **** 	if (enabled) {
 1001              		.loc 1 164 5
 1002 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1003 001a 002B     		cmp	r3, #0
 1004 001c 04D0     		beq	.L44
 165:S2LP_Driver/s2lp_rx.c **** 		SETBIT(reg_val, 5);
 1005              		.loc 1 165 3
 1006 001e FB7B     		ldrb	r3, [r7, #15]
 1007 0020 43F02003 		orr	r3, r3, #32
 1008 0024 FB73     		strb	r3, [r7, #15]
 1009 0026 03E0     		b	.L45
 1010              	.L44:
 166:S2LP_Driver/s2lp_rx.c **** 	} else {
 167:S2LP_Driver/s2lp_rx.c **** 		CLEARBIT(reg_val, 5);
 1011              		.loc 1 167 3
 1012 0028 FB7B     		ldrb	r3, [r7, #15]
 1013 002a 23F02003 		bic	r3, r3, #32
 1014 002e FB73     		strb	r3, [r7, #15]
 1015              	.L45:
 168:S2LP_Driver/s2lp_rx.c **** 	}
 169:S2LP_Driver/s2lp_rx.c **** 
 170:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_AGCCTRL2, reg_val);
 1016              		.loc 1 170 2
 1017 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1018 0032 1A46     		mov	r2, r3
 1019 0034 1C21     		movs	r1, #28
 1020 0036 7868     		ldr	r0, [r7, #4]
 1021 0038 FFF7FEFF 		bl	S2LP_WriteRegister
 171:S2LP_Driver/s2lp_rx.c **** }
 1022              		.loc 1 171 1
 1023 003c 00BF     		nop
 1024 003e 1037     		adds	r7, r7, #16
 1025              		.cfi_def_cfa_offset 8
 1026 0040 BD46     		mov	sp, r7
 1027              		.cfi_def_cfa_register 13
 1028              		@ sp needed
 1029 0042 80BD     		pop	{r7, pc}
 1030              		.cfi_endproc
 1031              	.LFE79:
 1033              		.section	.text.S2LP_RX_SetChannelFilterValueRaw,"ax",%progbits
 1034              		.align	1
 1035              		.global	S2LP_RX_SetChannelFilterValueRaw
 1036              		.syntax unified
 1037              		.thumb
 1038              		.thumb_func
 1040              	S2LP_RX_SetChannelFilterValueRaw:
 1041              	.LFB80:
 172:S2LP_Driver/s2lp_rx.c **** 
 173:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetChannelFilterValueRaw(S2LP_Handle* handle, uint8_t mantissa, uint8_t exponent) {
 1042              		.loc 1 173 96
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 16
 1045              		@ frame_needed = 1, uses_anonymous_args = 0
 1046 0000 80B5     		push	{r7, lr}
 1047              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccVJDjsH.s 			page 22


 1048              		.cfi_offset 7, -8
 1049              		.cfi_offset 14, -4
 1050 0002 84B0     		sub	sp, sp, #16
 1051              		.cfi_def_cfa_offset 24
 1052 0004 00AF     		add	r7, sp, #0
 1053              		.cfi_def_cfa_register 7
 1054 0006 7860     		str	r0, [r7, #4]
 1055 0008 0B46     		mov	r3, r1
 1056 000a FB70     		strb	r3, [r7, #3]
 1057 000c 1346     		mov	r3, r2
 1058 000e BB70     		strb	r3, [r7, #2]
 174:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = 0;
 1059              		.loc 1 174 10
 1060 0010 0023     		movs	r3, #0
 1061 0012 FB73     		strb	r3, [r7, #15]
 175:S2LP_Driver/s2lp_rx.c **** 	SETBITS(reg_val, mantissa, 0xF, 4);
 1062              		.loc 1 175 2
 1063 0014 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1064 0016 1B01     		lsls	r3, r3, #4
 1065 0018 5AB2     		sxtb	r2, r3
 1066 001a 97F90F30 		ldrsb	r3, [r7, #15]
 1067 001e 1343     		orrs	r3, r3, r2
 1068 0020 5BB2     		sxtb	r3, r3
 1069 0022 FB73     		strb	r3, [r7, #15]
 176:S2LP_Driver/s2lp_rx.c **** 	SETBITS(reg_val, exponent, 0xF, 0);
 1070              		.loc 1 176 2
 1071 0024 97F90230 		ldrsb	r3, [r7, #2]
 1072 0028 03F00F03 		and	r3, r3, #15
 1073 002c 5AB2     		sxtb	r2, r3
 1074 002e 97F90F30 		ldrsb	r3, [r7, #15]
 1075 0032 1343     		orrs	r3, r3, r2
 1076 0034 5BB2     		sxtb	r3, r3
 1077 0036 FB73     		strb	r3, [r7, #15]
 177:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_CHFLT, reg_val);
 1078              		.loc 1 177 2
 1079 0038 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1080 003a 1A46     		mov	r2, r3
 1081 003c 1321     		movs	r1, #19
 1082 003e 7868     		ldr	r0, [r7, #4]
 1083 0040 FFF7FEFF 		bl	S2LP_WriteRegister
 178:S2LP_Driver/s2lp_rx.c **** }
 1084              		.loc 1 178 1
 1085 0044 00BF     		nop
 1086 0046 1037     		adds	r7, r7, #16
 1087              		.cfi_def_cfa_offset 8
 1088 0048 BD46     		mov	sp, r7
 1089              		.cfi_def_cfa_register 13
 1090              		@ sp needed
 1091 004a 80BD     		pop	{r7, pc}
 1092              		.cfi_endproc
 1093              	.LFE80:
 1095              		.section	.text.S2LP_RX_SetCarrierSenseMode,"ax",%progbits
 1096              		.align	1
 1097              		.global	S2LP_RX_SetCarrierSenseMode
 1098              		.syntax unified
 1099              		.thumb
 1100              		.thumb_func
ARM GAS  /tmp/ccVJDjsH.s 			page 23


 1102              	S2LP_RX_SetCarrierSenseMode:
 1103              	.LFB81:
 179:S2LP_Driver/s2lp_rx.c **** 
 180:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetCarrierSenseMode(S2LP_Handle* handle, S2LP_CS_Mode mode) {
 1104              		.loc 1 180 74
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 16
 1107              		@ frame_needed = 1, uses_anonymous_args = 0
 1108 0000 80B5     		push	{r7, lr}
 1109              		.cfi_def_cfa_offset 8
 1110              		.cfi_offset 7, -8
 1111              		.cfi_offset 14, -4
 1112 0002 84B0     		sub	sp, sp, #16
 1113              		.cfi_def_cfa_offset 24
 1114 0004 00AF     		add	r7, sp, #0
 1115              		.cfi_def_cfa_register 7
 1116 0006 7860     		str	r0, [r7, #4]
 1117 0008 0B46     		mov	r3, r1
 1118 000a FB70     		strb	r3, [r7, #3]
 181:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_RSSI_FLT);
 1119              		.loc 1 181 20
 1120 000c 1721     		movs	r1, #23
 1121 000e 7868     		ldr	r0, [r7, #4]
 1122 0010 FFF7FEFF 		bl	S2LP_ReadRegister
 1123 0014 0346     		mov	r3, r0
 1124 0016 FB73     		strb	r3, [r7, #15]
 182:S2LP_Driver/s2lp_rx.c **** 	CLEARBITS(reg_val, 0b11, 2);
 1125              		.loc 1 182 2
 1126 0018 FB7B     		ldrb	r3, [r7, #15]
 1127 001a 23F00C03 		bic	r3, r3, #12
 1128 001e FB73     		strb	r3, [r7, #15]
 183:S2LP_Driver/s2lp_rx.c **** 	SETBITS(reg_val, (uint8_t )mode, 0b11, 2);
 1129              		.loc 1 183 2
 1130 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1131 0022 9B00     		lsls	r3, r3, #2
 1132 0024 5BB2     		sxtb	r3, r3
 1133 0026 03F00C03 		and	r3, r3, #12
 1134 002a 5AB2     		sxtb	r2, r3
 1135 002c 97F90F30 		ldrsb	r3, [r7, #15]
 1136 0030 1343     		orrs	r3, r3, r2
 1137 0032 5BB2     		sxtb	r3, r3
 1138 0034 FB73     		strb	r3, [r7, #15]
 184:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_RSSI_FLT, reg_val);
 1139              		.loc 1 184 2
 1140 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1141 0038 1A46     		mov	r2, r3
 1142 003a 1721     		movs	r1, #23
 1143 003c 7868     		ldr	r0, [r7, #4]
 1144 003e FFF7FEFF 		bl	S2LP_WriteRegister
 185:S2LP_Driver/s2lp_rx.c **** }
 1145              		.loc 1 185 1
 1146 0042 00BF     		nop
 1147 0044 1037     		adds	r7, r7, #16
 1148              		.cfi_def_cfa_offset 8
 1149 0046 BD46     		mov	sp, r7
 1150              		.cfi_def_cfa_register 13
 1151              		@ sp needed
ARM GAS  /tmp/ccVJDjsH.s 			page 24


 1152 0048 80BD     		pop	{r7, pc}
 1153              		.cfi_endproc
 1154              	.LFE81:
 1156              		.section	.text.S2LP_RX_SetTimerStopConfig,"ax",%progbits
 1157              		.align	1
 1158              		.global	S2LP_RX_SetTimerStopConfig
 1159              		.syntax unified
 1160              		.thumb
 1161              		.thumb_func
 1163              	S2LP_RX_SetTimerStopConfig:
 1164              	.LFB82:
 186:S2LP_Driver/s2lp_rx.c **** 
 187:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetTimerStopConfig(S2LP_Handle* handle, bool rx_timeout_and_or,
 188:S2LP_Driver/s2lp_rx.c **** bool cs_timeout, bool sqi_timeout, bool pqi_timeout) {
 1165              		.loc 1 188 54
 1166              		.cfi_startproc
 1167              		@ args = 4, pretend = 0, frame = 16
 1168              		@ frame_needed = 1, uses_anonymous_args = 0
 1169 0000 80B5     		push	{r7, lr}
 1170              		.cfi_def_cfa_offset 8
 1171              		.cfi_offset 7, -8
 1172              		.cfi_offset 14, -4
 1173 0002 84B0     		sub	sp, sp, #16
 1174              		.cfi_def_cfa_offset 24
 1175 0004 00AF     		add	r7, sp, #0
 1176              		.cfi_def_cfa_register 7
 1177 0006 7860     		str	r0, [r7, #4]
 1178 0008 0846     		mov	r0, r1
 1179 000a 1146     		mov	r1, r2
 1180 000c 1A46     		mov	r2, r3
 1181 000e 0346     		mov	r3, r0
 1182 0010 FB70     		strb	r3, [r7, #3]
 1183 0012 0B46     		mov	r3, r1
 1184 0014 BB70     		strb	r3, [r7, #2]
 1185 0016 1346     		mov	r3, r2
 1186 0018 7B70     		strb	r3, [r7, #1]
 189:S2LP_Driver/s2lp_rx.c **** 	uint8_t proto_reg_val = S2LP_ReadRegister(handle, S2LP_REG_PROTOCOL2);
 1187              		.loc 1 189 26
 1188 001a 3921     		movs	r1, #57
 1189 001c 7868     		ldr	r0, [r7, #4]
 1190 001e FFF7FEFF 		bl	S2LP_ReadRegister
 1191 0022 0346     		mov	r3, r0
 1192 0024 FB73     		strb	r3, [r7, #15]
 190:S2LP_Driver/s2lp_rx.c **** 	uint8_t rxt_reg_val = S2LP_ReadRegister(handle, S2LP_REG_PCKT_FLT_OPTIONS);
 1193              		.loc 1 190 24
 1194 0026 4021     		movs	r1, #64
 1195 0028 7868     		ldr	r0, [r7, #4]
 1196 002a FFF7FEFF 		bl	S2LP_ReadRegister
 1197 002e 0346     		mov	r3, r0
 1198 0030 BB73     		strb	r3, [r7, #14]
 191:S2LP_Driver/s2lp_rx.c **** 
 192:S2LP_Driver/s2lp_rx.c **** 	if (rx_timeout_and_or) {
 1199              		.loc 1 192 5
 1200 0032 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1201 0034 002B     		cmp	r3, #0
 1202 0036 04D0     		beq	.L49
 193:S2LP_Driver/s2lp_rx.c **** 		SETBIT(rxt_reg_val, 6);
ARM GAS  /tmp/ccVJDjsH.s 			page 25


 1203              		.loc 1 193 3
 1204 0038 BB7B     		ldrb	r3, [r7, #14]
 1205 003a 43F04003 		orr	r3, r3, #64
 1206 003e BB73     		strb	r3, [r7, #14]
 1207 0040 03E0     		b	.L50
 1208              	.L49:
 194:S2LP_Driver/s2lp_rx.c **** 	} else {
 195:S2LP_Driver/s2lp_rx.c **** 		CLEARBIT(rxt_reg_val, 6);
 1209              		.loc 1 195 3
 1210 0042 BB7B     		ldrb	r3, [r7, #14]
 1211 0044 23F04003 		bic	r3, r3, #64
 1212 0048 BB73     		strb	r3, [r7, #14]
 1213              	.L50:
 196:S2LP_Driver/s2lp_rx.c **** 	}
 197:S2LP_Driver/s2lp_rx.c **** 
 198:S2LP_Driver/s2lp_rx.c **** 	if (cs_timeout) {
 1214              		.loc 1 198 5
 1215 004a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1216 004c 002B     		cmp	r3, #0
 1217 004e 04D0     		beq	.L51
 199:S2LP_Driver/s2lp_rx.c **** 		SETBIT(proto_reg_val, 7);
 1218              		.loc 1 199 3
 1219 0050 FB7B     		ldrb	r3, [r7, #15]
 1220 0052 63F07F03 		orn	r3, r3, #127
 1221 0056 FB73     		strb	r3, [r7, #15]
 1222 0058 03E0     		b	.L52
 1223              	.L51:
 200:S2LP_Driver/s2lp_rx.c **** 	} else {
 201:S2LP_Driver/s2lp_rx.c **** 		CLEARBIT(proto_reg_val, 7);
 1224              		.loc 1 201 3
 1225 005a FB7B     		ldrb	r3, [r7, #15]
 1226 005c 03F07F03 		and	r3, r3, #127
 1227 0060 FB73     		strb	r3, [r7, #15]
 1228              	.L52:
 202:S2LP_Driver/s2lp_rx.c **** 	}
 203:S2LP_Driver/s2lp_rx.c **** 
 204:S2LP_Driver/s2lp_rx.c **** 	if (sqi_timeout) {
 1229              		.loc 1 204 5
 1230 0062 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1231 0064 002B     		cmp	r3, #0
 1232 0066 04D0     		beq	.L53
 205:S2LP_Driver/s2lp_rx.c **** 		SETBIT(proto_reg_val, 6);
 1233              		.loc 1 205 3
 1234 0068 FB7B     		ldrb	r3, [r7, #15]
 1235 006a 43F04003 		orr	r3, r3, #64
 1236 006e FB73     		strb	r3, [r7, #15]
 1237 0070 03E0     		b	.L54
 1238              	.L53:
 206:S2LP_Driver/s2lp_rx.c **** 	} else {
 207:S2LP_Driver/s2lp_rx.c **** 		CLEARBIT(proto_reg_val, 6);
 1239              		.loc 1 207 3
 1240 0072 FB7B     		ldrb	r3, [r7, #15]
 1241 0074 23F04003 		bic	r3, r3, #64
 1242 0078 FB73     		strb	r3, [r7, #15]
 1243              	.L54:
 208:S2LP_Driver/s2lp_rx.c **** 	}
 209:S2LP_Driver/s2lp_rx.c **** 
ARM GAS  /tmp/ccVJDjsH.s 			page 26


 210:S2LP_Driver/s2lp_rx.c **** 	if (pqi_timeout) {
 1244              		.loc 1 210 5
 1245 007a 3B7E     		ldrb	r3, [r7, #24]	@ zero_extendqisi2
 1246 007c 002B     		cmp	r3, #0
 1247 007e 04D0     		beq	.L55
 211:S2LP_Driver/s2lp_rx.c **** 		SETBIT(proto_reg_val, 5);
 1248              		.loc 1 211 3
 1249 0080 FB7B     		ldrb	r3, [r7, #15]
 1250 0082 43F02003 		orr	r3, r3, #32
 1251 0086 FB73     		strb	r3, [r7, #15]
 1252 0088 03E0     		b	.L56
 1253              	.L55:
 212:S2LP_Driver/s2lp_rx.c **** 	} else {
 213:S2LP_Driver/s2lp_rx.c **** 		CLEARBIT(proto_reg_val, 5);
 1254              		.loc 1 213 3
 1255 008a FB7B     		ldrb	r3, [r7, #15]
 1256 008c 23F02003 		bic	r3, r3, #32
 1257 0090 FB73     		strb	r3, [r7, #15]
 1258              	.L56:
 214:S2LP_Driver/s2lp_rx.c **** 	}
 215:S2LP_Driver/s2lp_rx.c **** 
 216:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_PROTOCOL2, proto_reg_val);
 1259              		.loc 1 216 2
 1260 0092 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1261 0094 1A46     		mov	r2, r3
 1262 0096 3921     		movs	r1, #57
 1263 0098 7868     		ldr	r0, [r7, #4]
 1264 009a FFF7FEFF 		bl	S2LP_WriteRegister
 217:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_PCKT_FLT_OPTIONS, rxt_reg_val);
 1265              		.loc 1 217 2
 1266 009e BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1267 00a0 1A46     		mov	r2, r3
 1268 00a2 4021     		movs	r1, #64
 1269 00a4 7868     		ldr	r0, [r7, #4]
 1270 00a6 FFF7FEFF 		bl	S2LP_WriteRegister
 218:S2LP_Driver/s2lp_rx.c **** }
 1271              		.loc 1 218 1
 1272 00aa 00BF     		nop
 1273 00ac 1037     		adds	r7, r7, #16
 1274              		.cfi_def_cfa_offset 8
 1275 00ae BD46     		mov	sp, r7
 1276              		.cfi_def_cfa_register 13
 1277              		@ sp needed
 1278 00b0 80BD     		pop	{r7, pc}
 1279              		.cfi_endproc
 1280              	.LFE82:
 1282              		.section	.text.S2LP_RX_SetCSBlankingState,"ax",%progbits
 1283              		.align	1
 1284              		.global	S2LP_RX_SetCSBlankingState
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
 1289              	S2LP_RX_SetCSBlankingState:
 1290              	.LFB83:
 219:S2LP_Driver/s2lp_rx.c **** 
 220:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetCSBlankingState(S2LP_Handle* handle, bool enabled) {
 1291              		.loc 1 220 68
ARM GAS  /tmp/ccVJDjsH.s 			page 27


 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 16
 1294              		@ frame_needed = 1, uses_anonymous_args = 0
 1295 0000 80B5     		push	{r7, lr}
 1296              		.cfi_def_cfa_offset 8
 1297              		.cfi_offset 7, -8
 1298              		.cfi_offset 14, -4
 1299 0002 84B0     		sub	sp, sp, #16
 1300              		.cfi_def_cfa_offset 24
 1301 0004 00AF     		add	r7, sp, #0
 1302              		.cfi_def_cfa_register 7
 1303 0006 7860     		str	r0, [r7, #4]
 1304 0008 0B46     		mov	r3, r1
 1305 000a FB70     		strb	r3, [r7, #3]
 221:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_ANT_SELECT_CONF);
 1306              		.loc 1 221 20
 1307 000c 1F21     		movs	r1, #31
 1308 000e 7868     		ldr	r0, [r7, #4]
 1309 0010 FFF7FEFF 		bl	S2LP_ReadRegister
 1310 0014 0346     		mov	r3, r0
 1311 0016 FB73     		strb	r3, [r7, #15]
 222:S2LP_Driver/s2lp_rx.c **** 
 223:S2LP_Driver/s2lp_rx.c **** 	if (enabled) {
 1312              		.loc 1 223 5
 1313 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1314 001a 002B     		cmp	r3, #0
 1315 001c 04D0     		beq	.L58
 224:S2LP_Driver/s2lp_rx.c **** 		SETBIT(reg_val, 4);
 1316              		.loc 1 224 3
 1317 001e FB7B     		ldrb	r3, [r7, #15]
 1318 0020 43F01003 		orr	r3, r3, #16
 1319 0024 FB73     		strb	r3, [r7, #15]
 1320 0026 03E0     		b	.L59
 1321              	.L58:
 225:S2LP_Driver/s2lp_rx.c **** 	} else {
 226:S2LP_Driver/s2lp_rx.c **** 		CLEARBIT(reg_val, 4);
 1322              		.loc 1 226 3
 1323 0028 FB7B     		ldrb	r3, [r7, #15]
 1324 002a 23F01003 		bic	r3, r3, #16
 1325 002e FB73     		strb	r3, [r7, #15]
 1326              	.L59:
 227:S2LP_Driver/s2lp_rx.c **** 	}
 228:S2LP_Driver/s2lp_rx.c **** 
 229:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_ANT_SELECT_CONF, reg_val);
 1327              		.loc 1 229 2
 1328 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1329 0032 1A46     		mov	r2, r3
 1330 0034 1F21     		movs	r1, #31
 1331 0036 7868     		ldr	r0, [r7, #4]
 1332 0038 FFF7FEFF 		bl	S2LP_WriteRegister
 230:S2LP_Driver/s2lp_rx.c **** }
 1333              		.loc 1 230 1
 1334 003c 00BF     		nop
 1335 003e 1037     		adds	r7, r7, #16
 1336              		.cfi_def_cfa_offset 8
 1337 0040 BD46     		mov	sp, r7
 1338              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccVJDjsH.s 			page 28


 1339              		@ sp needed
 1340 0042 80BD     		pop	{r7, pc}
 1341              		.cfi_endproc
 1342              	.LFE83:
 1344              		.section	.text.S2LP_RX_SetDataSource,"ax",%progbits
 1345              		.align	1
 1346              		.global	S2LP_RX_SetDataSource
 1347              		.syntax unified
 1348              		.thumb
 1349              		.thumb_func
 1351              	S2LP_RX_SetDataSource:
 1352              	.LFB84:
 231:S2LP_Driver/s2lp_rx.c **** 
 232:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetDataSource(S2LP_Handle* handle, S2LP_RX_Source source) {
 1353              		.loc 1 232 72
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 16
 1356              		@ frame_needed = 1, uses_anonymous_args = 0
 1357 0000 80B5     		push	{r7, lr}
 1358              		.cfi_def_cfa_offset 8
 1359              		.cfi_offset 7, -8
 1360              		.cfi_offset 14, -4
 1361 0002 84B0     		sub	sp, sp, #16
 1362              		.cfi_def_cfa_offset 24
 1363 0004 00AF     		add	r7, sp, #0
 1364              		.cfi_def_cfa_register 7
 1365 0006 7860     		str	r0, [r7, #4]
 1366 0008 0B46     		mov	r3, r1
 1367 000a FB70     		strb	r3, [r7, #3]
 233:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_PCKTCTRL3);
 1368              		.loc 1 233 20
 1369 000c 2E21     		movs	r1, #46
 1370 000e 7868     		ldr	r0, [r7, #4]
 1371 0010 FFF7FEFF 		bl	S2LP_ReadRegister
 1372 0014 0346     		mov	r3, r0
 1373 0016 FB73     		strb	r3, [r7, #15]
 234:S2LP_Driver/s2lp_rx.c **** 
 235:S2LP_Driver/s2lp_rx.c **** 	CLEARBITS(reg_val, 0b11, 4);
 1374              		.loc 1 235 2
 1375 0018 FB7B     		ldrb	r3, [r7, #15]
 1376 001a 23F03003 		bic	r3, r3, #48
 1377 001e FB73     		strb	r3, [r7, #15]
 236:S2LP_Driver/s2lp_rx.c **** 	SETBITS(reg_val, (uint8_t )source, 0b11, 4);
 1378              		.loc 1 236 2
 1379 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1380 0022 1B01     		lsls	r3, r3, #4
 1381 0024 5BB2     		sxtb	r3, r3
 1382 0026 03F03003 		and	r3, r3, #48
 1383 002a 5AB2     		sxtb	r2, r3
 1384 002c 97F90F30 		ldrsb	r3, [r7, #15]
 1385 0030 1343     		orrs	r3, r3, r2
 1386 0032 5BB2     		sxtb	r3, r3
 1387 0034 FB73     		strb	r3, [r7, #15]
 237:S2LP_Driver/s2lp_rx.c **** 
 238:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_PCKTCTRL3, reg_val);
 1388              		.loc 1 238 2
 1389 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  /tmp/ccVJDjsH.s 			page 29


 1390 0038 1A46     		mov	r2, r3
 1391 003a 2E21     		movs	r1, #46
 1392 003c 7868     		ldr	r0, [r7, #4]
 1393 003e FFF7FEFF 		bl	S2LP_WriteRegister
 239:S2LP_Driver/s2lp_rx.c **** }
 1394              		.loc 1 239 1
 1395 0042 00BF     		nop
 1396 0044 1037     		adds	r7, r7, #16
 1397              		.cfi_def_cfa_offset 8
 1398 0046 BD46     		mov	sp, r7
 1399              		.cfi_def_cfa_register 13
 1400              		@ sp needed
 1401 0048 80BD     		pop	{r7, pc}
 1402              		.cfi_endproc
 1403              	.LFE84:
 1405              		.section	.text.S2LP_RX_SetFIFOAlmostFullThreshold,"ax",%progbits
 1406              		.align	1
 1407              		.global	S2LP_RX_SetFIFOAlmostFullThreshold
 1408              		.syntax unified
 1409              		.thumb
 1410              		.thumb_func
 1412              	S2LP_RX_SetFIFOAlmostFullThreshold:
 1413              	.LFB85:
 240:S2LP_Driver/s2lp_rx.c **** 
 241:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetFIFOAlmostFullThreshold(S2LP_Handle* handle, uint8_t threshold) {
 1414              		.loc 1 241 81
 1415              		.cfi_startproc
 1416              		@ args = 0, pretend = 0, frame = 16
 1417              		@ frame_needed = 1, uses_anonymous_args = 0
 1418 0000 80B5     		push	{r7, lr}
 1419              		.cfi_def_cfa_offset 8
 1420              		.cfi_offset 7, -8
 1421              		.cfi_offset 14, -4
 1422 0002 84B0     		sub	sp, sp, #16
 1423              		.cfi_def_cfa_offset 24
 1424 0004 00AF     		add	r7, sp, #0
 1425              		.cfi_def_cfa_register 7
 1426 0006 7860     		str	r0, [r7, #4]
 1427 0008 0B46     		mov	r3, r1
 1428 000a FB70     		strb	r3, [r7, #3]
 242:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_FIFO_CONFIG3);
 1429              		.loc 1 242 20
 1430 000c 3C21     		movs	r1, #60
 1431 000e 7868     		ldr	r0, [r7, #4]
 1432 0010 FFF7FEFF 		bl	S2LP_ReadRegister
 1433 0014 0346     		mov	r3, r0
 1434 0016 FB73     		strb	r3, [r7, #15]
 243:S2LP_Driver/s2lp_rx.c **** 
 244:S2LP_Driver/s2lp_rx.c **** 	CLEARBITS(reg_val, 0b1111111, 0);
 1435              		.loc 1 244 2
 1436 0018 FB7B     		ldrb	r3, [r7, #15]
 1437 001a 23F07F03 		bic	r3, r3, #127
 1438 001e FB73     		strb	r3, [r7, #15]
 245:S2LP_Driver/s2lp_rx.c **** 	SETBITS(reg_val, threshold, 0b1111111, 0);
 1439              		.loc 1 245 2
 1440 0020 97F90330 		ldrsb	r3, [r7, #3]
 1441 0024 03F07F03 		and	r3, r3, #127
ARM GAS  /tmp/ccVJDjsH.s 			page 30


 1442 0028 5AB2     		sxtb	r2, r3
 1443 002a 97F90F30 		ldrsb	r3, [r7, #15]
 1444 002e 1343     		orrs	r3, r3, r2
 1445 0030 5BB2     		sxtb	r3, r3
 1446 0032 FB73     		strb	r3, [r7, #15]
 246:S2LP_Driver/s2lp_rx.c **** 
 247:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_FIFO_CONFIG3, reg_val);
 1447              		.loc 1 247 2
 1448 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1449 0036 1A46     		mov	r2, r3
 1450 0038 3C21     		movs	r1, #60
 1451 003a 7868     		ldr	r0, [r7, #4]
 1452 003c FFF7FEFF 		bl	S2LP_WriteRegister
 248:S2LP_Driver/s2lp_rx.c **** }
 1453              		.loc 1 248 1
 1454 0040 00BF     		nop
 1455 0042 1037     		adds	r7, r7, #16
 1456              		.cfi_def_cfa_offset 8
 1457 0044 BD46     		mov	sp, r7
 1458              		.cfi_def_cfa_register 13
 1459              		@ sp needed
 1460 0046 80BD     		pop	{r7, pc}
 1461              		.cfi_endproc
 1462              	.LFE85:
 1464              		.section	.text.S2LP_RX_SetFIFOAlmostEmptyThreshold,"ax",%progbits
 1465              		.align	1
 1466              		.global	S2LP_RX_SetFIFOAlmostEmptyThreshold
 1467              		.syntax unified
 1468              		.thumb
 1469              		.thumb_func
 1471              	S2LP_RX_SetFIFOAlmostEmptyThreshold:
 1472              	.LFB86:
 249:S2LP_Driver/s2lp_rx.c **** 
 250:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_SetFIFOAlmostEmptyThreshold(S2LP_Handle* handle, uint8_t threshold) {
 1473              		.loc 1 250 82
 1474              		.cfi_startproc
 1475              		@ args = 0, pretend = 0, frame = 16
 1476              		@ frame_needed = 1, uses_anonymous_args = 0
 1477 0000 80B5     		push	{r7, lr}
 1478              		.cfi_def_cfa_offset 8
 1479              		.cfi_offset 7, -8
 1480              		.cfi_offset 14, -4
 1481 0002 84B0     		sub	sp, sp, #16
 1482              		.cfi_def_cfa_offset 24
 1483 0004 00AF     		add	r7, sp, #0
 1484              		.cfi_def_cfa_register 7
 1485 0006 7860     		str	r0, [r7, #4]
 1486 0008 0B46     		mov	r3, r1
 1487 000a FB70     		strb	r3, [r7, #3]
 251:S2LP_Driver/s2lp_rx.c **** 	uint8_t reg_val = S2LP_ReadRegister(handle, S2LP_REG_FIFO_CONFIG2);
 1488              		.loc 1 251 20
 1489 000c 3D21     		movs	r1, #61
 1490 000e 7868     		ldr	r0, [r7, #4]
 1491 0010 FFF7FEFF 		bl	S2LP_ReadRegister
 1492 0014 0346     		mov	r3, r0
 1493 0016 FB73     		strb	r3, [r7, #15]
 252:S2LP_Driver/s2lp_rx.c **** 
ARM GAS  /tmp/ccVJDjsH.s 			page 31


 253:S2LP_Driver/s2lp_rx.c **** 	CLEARBITS(reg_val, 0b1111111, 0);
 1494              		.loc 1 253 2
 1495 0018 FB7B     		ldrb	r3, [r7, #15]
 1496 001a 23F07F03 		bic	r3, r3, #127
 1497 001e FB73     		strb	r3, [r7, #15]
 254:S2LP_Driver/s2lp_rx.c **** 	SETBITS(reg_val, threshold, 0b1111111, 0);
 1498              		.loc 1 254 2
 1499 0020 97F90330 		ldrsb	r3, [r7, #3]
 1500 0024 03F07F03 		and	r3, r3, #127
 1501 0028 5AB2     		sxtb	r2, r3
 1502 002a 97F90F30 		ldrsb	r3, [r7, #15]
 1503 002e 1343     		orrs	r3, r3, r2
 1504 0030 5BB2     		sxtb	r3, r3
 1505 0032 FB73     		strb	r3, [r7, #15]
 255:S2LP_Driver/s2lp_rx.c **** 
 256:S2LP_Driver/s2lp_rx.c **** 	S2LP_WriteRegister(handle, S2LP_REG_FIFO_CONFIG2, reg_val);
 1506              		.loc 1 256 2
 1507 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1508 0036 1A46     		mov	r2, r3
 1509 0038 3D21     		movs	r1, #61
 1510 003a 7868     		ldr	r0, [r7, #4]
 1511 003c FFF7FEFF 		bl	S2LP_WriteRegister
 257:S2LP_Driver/s2lp_rx.c **** }
 1512              		.loc 1 257 1
 1513 0040 00BF     		nop
 1514 0042 1037     		adds	r7, r7, #16
 1515              		.cfi_def_cfa_offset 8
 1516 0044 BD46     		mov	sp, r7
 1517              		.cfi_def_cfa_register 13
 1518              		@ sp needed
 1519 0046 80BD     		pop	{r7, pc}
 1520              		.cfi_endproc
 1521              	.LFE86:
 1523              		.global	__aeabi_ui2d
 1524              		.global	__aeabi_ddiv
 1525              		.global	__aeabi_ul2d
 1526              		.global	__aeabi_dmul
 1527              		.section	.text.S2LP_RX_CalculateAGCMeasureTime,"ax",%progbits
 1528              		.align	1
 1529              		.global	S2LP_RX_CalculateAGCMeasureTime
 1530              		.syntax unified
 1531              		.thumb
 1532              		.thumb_func
 1534              	S2LP_RX_CalculateAGCMeasureTime:
 1535              	.LFB87:
 258:S2LP_Driver/s2lp_rx.c **** 
 259:S2LP_Driver/s2lp_rx.c **** double S2LP_RX_CalculateAGCMeasureTime(S2LP_Handle* handle, uint8_t time) {
 1536              		.loc 1 259 75
 1537              		.cfi_startproc
 1538              		@ args = 0, pretend = 0, frame = 32
 1539              		@ frame_needed = 1, uses_anonymous_args = 0
 1540 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1541              		.cfi_def_cfa_offset 20
 1542              		.cfi_offset 4, -20
 1543              		.cfi_offset 5, -16
 1544              		.cfi_offset 6, -12
 1545              		.cfi_offset 7, -8
ARM GAS  /tmp/ccVJDjsH.s 			page 32


 1546              		.cfi_offset 14, -4
 1547 0002 89B0     		sub	sp, sp, #36
 1548              		.cfi_def_cfa_offset 56
 1549 0004 00AF     		add	r7, sp, #0
 1550              		.cfi_def_cfa_register 7
 1551 0006 7860     		str	r0, [r7, #4]
 1552 0008 0B46     		mov	r3, r1
 1553 000a FB70     		strb	r3, [r7, #3]
 260:S2LP_Driver/s2lp_rx.c **** 	double const fdig = S2LP_GetDigitalClockFrequency(handle);
 1554              		.loc 1 260 22
 1555 000c 7868     		ldr	r0, [r7, #4]
 1556 000e FFF7FEFF 		bl	S2LP_GetDigitalClockFrequency
 1557 0012 0346     		mov	r3, r0
 1558              		.loc 1 260 15
 1559 0014 1846     		mov	r0, r3
 1560 0016 FFF7FEFF 		bl	__aeabi_ui2d
 1561 001a 0246     		mov	r2, r0
 1562 001c 0B46     		mov	r3, r1
 1563 001e C7E90623 		strd	r2, [r7, #24]
 261:S2LP_Driver/s2lp_rx.c **** 	double const fdig_divider = 12.0 / fdig;
 1564              		.loc 1 261 15
 1565 0022 D7E90623 		ldrd	r2, [r7, #24]
 1566 0026 4FF00000 		mov	r0, #0
 1567 002a 1749     		ldr	r1, .L65
 1568 002c FFF7FEFF 		bl	__aeabi_ddiv
 1569 0030 0246     		mov	r2, r0
 1570 0032 0B46     		mov	r3, r1
 1571 0034 C7E90423 		strd	r2, [r7, #16]
 262:S2LP_Driver/s2lp_rx.c **** 	double const meas_time_pow = (double) (1ull << time);
 1572              		.loc 1 262 46
 1573 0038 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1574 003a 4FF00102 		mov	r2, #1
 1575 003e 4FF00003 		mov	r3, #0
 1576 0042 A1F12006 		sub	r6, r1, #32
 1577 0046 C1F12000 		rsb	r0, r1, #32
 1578 004a 03FA01F5 		lsl	r5, r3, r1
 1579 004e 02FA06F6 		lsl	r6, r2, r6
 1580 0052 3543     		orrs	r5, r5, r6
 1581 0054 22FA00F0 		lsr	r0, r2, r0
 1582 0058 0543     		orrs	r5, r5, r0
 1583 005a 02FA01F4 		lsl	r4, r2, r1
 1584              		.loc 1 262 15
 1585 005e 2046     		mov	r0, r4
 1586 0060 2946     		mov	r1, r5
 1587 0062 FFF7FEFF 		bl	__aeabi_ul2d
 1588 0066 0246     		mov	r2, r0
 1589 0068 0B46     		mov	r3, r1
 1590 006a C7E90223 		strd	r2, [r7, #8]
 263:S2LP_Driver/s2lp_rx.c **** 	return fdig_divider * meas_time_pow;
 1591              		.loc 1 263 22
 1592 006e D7E90223 		ldrd	r2, [r7, #8]
 1593 0072 D7E90401 		ldrd	r0, [r7, #16]
 1594 0076 FFF7FEFF 		bl	__aeabi_dmul
 1595 007a 0246     		mov	r2, r0
 1596 007c 0B46     		mov	r3, r1
 264:S2LP_Driver/s2lp_rx.c **** }
 1597              		.loc 1 264 1
ARM GAS  /tmp/ccVJDjsH.s 			page 33


 1598 007e 1046     		mov	r0, r2
 1599 0080 1946     		mov	r1, r3
 1600 0082 2437     		adds	r7, r7, #36
 1601              		.cfi_def_cfa_offset 20
 1602 0084 BD46     		mov	sp, r7
 1603              		.cfi_def_cfa_register 13
 1604              		@ sp needed
 1605 0086 F0BD     		pop	{r4, r5, r6, r7, pc}
 1606              	.L66:
 1607              		.align	2
 1608              	.L65:
 1609 0088 00002840 		.word	1076363264
 1610              		.cfi_endproc
 1611              	.LFE87:
 1613              		.section	.text.S2LP_RX_CalculateAGCHoldTime,"ax",%progbits
 1614              		.align	1
 1615              		.global	S2LP_RX_CalculateAGCHoldTime
 1616              		.syntax unified
 1617              		.thumb
 1618              		.thumb_func
 1620              	S2LP_RX_CalculateAGCHoldTime:
 1621              	.LFB88:
 265:S2LP_Driver/s2lp_rx.c **** 
 266:S2LP_Driver/s2lp_rx.c **** double S2LP_RX_CalculateAGCHoldTime(S2LP_Handle* handle, uint8_t time) {
 1622              		.loc 1 266 72
 1623              		.cfi_startproc
 1624              		@ args = 0, pretend = 0, frame = 24
 1625              		@ frame_needed = 1, uses_anonymous_args = 0
 1626 0000 80B5     		push	{r7, lr}
 1627              		.cfi_def_cfa_offset 8
 1628              		.cfi_offset 7, -8
 1629              		.cfi_offset 14, -4
 1630 0002 86B0     		sub	sp, sp, #24
 1631              		.cfi_def_cfa_offset 32
 1632 0004 00AF     		add	r7, sp, #0
 1633              		.cfi_def_cfa_register 7
 1634 0006 7860     		str	r0, [r7, #4]
 1635 0008 0B46     		mov	r3, r1
 1636 000a FB70     		strb	r3, [r7, #3]
 267:S2LP_Driver/s2lp_rx.c **** 	double const fdig = S2LP_GetDigitalClockFrequency(handle);
 1637              		.loc 1 267 22
 1638 000c 7868     		ldr	r0, [r7, #4]
 1639 000e FFF7FEFF 		bl	S2LP_GetDigitalClockFrequency
 1640 0012 0346     		mov	r3, r0
 1641              		.loc 1 267 15
 1642 0014 1846     		mov	r0, r3
 1643 0016 FFF7FEFF 		bl	__aeabi_ui2d
 1644 001a 0246     		mov	r2, r0
 1645 001c 0B46     		mov	r3, r1
 1646 001e C7E90423 		strd	r2, [r7, #16]
 268:S2LP_Driver/s2lp_rx.c **** 	double const fdig_divider = 12.0 / fdig;
 1647              		.loc 1 268 15
 1648 0022 D7E90423 		ldrd	r2, [r7, #16]
 1649 0026 4FF00000 		mov	r0, #0
 1650 002a 0B49     		ldr	r1, .L69
 1651 002c FFF7FEFF 		bl	__aeabi_ddiv
 1652 0030 0246     		mov	r2, r0
ARM GAS  /tmp/ccVJDjsH.s 			page 34


 1653 0032 0B46     		mov	r3, r1
 1654 0034 C7E90223 		strd	r2, [r7, #8]
 269:S2LP_Driver/s2lp_rx.c **** 	return fdig_divider * ((double) time);
 1655              		.loc 1 269 25
 1656 0038 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1657 003a 1846     		mov	r0, r3
 1658 003c FFF7FEFF 		bl	__aeabi_ui2d
 1659              		.loc 1 269 22
 1660 0040 D7E90223 		ldrd	r2, [r7, #8]
 1661 0044 FFF7FEFF 		bl	__aeabi_dmul
 1662 0048 0246     		mov	r2, r0
 1663 004a 0B46     		mov	r3, r1
 270:S2LP_Driver/s2lp_rx.c **** }
 1664              		.loc 1 270 1
 1665 004c 1046     		mov	r0, r2
 1666 004e 1946     		mov	r1, r3
 1667 0050 1837     		adds	r7, r7, #24
 1668              		.cfi_def_cfa_offset 8
 1669 0052 BD46     		mov	sp, r7
 1670              		.cfi_def_cfa_register 13
 1671              		@ sp needed
 1672 0054 80BD     		pop	{r7, pc}
 1673              	.L70:
 1674 0056 00BF     		.align	2
 1675              	.L69:
 1676 0058 00002840 		.word	1076363264
 1677              		.cfi_endproc
 1678              	.LFE88:
 1680              		.section	.text.S2LP_RX_CalculateChannelFilterBandwidth,"ax",%progbits
 1681              		.align	1
 1682              		.global	S2LP_RX_CalculateChannelFilterBandwidth
 1683              		.syntax unified
 1684              		.thumb
 1685              		.thumb_func
 1687              	S2LP_RX_CalculateChannelFilterBandwidth:
 1688              	.LFB89:
 271:S2LP_Driver/s2lp_rx.c **** 
 272:S2LP_Driver/s2lp_rx.c **** double S2LP_RX_CalculateChannelFilterBandwidth(S2LP_Handle* handle, uint8_t mantissa, uint8_t expon
 1689              		.loc 1 272 105
 1690              		.cfi_startproc
 1691              		@ args = 0, pretend = 0, frame = 16
 1692              		@ frame_needed = 1, uses_anonymous_args = 0
 1693 0000 B0B5     		push	{r4, r5, r7, lr}
 1694              		.cfi_def_cfa_offset 16
 1695              		.cfi_offset 4, -16
 1696              		.cfi_offset 5, -12
 1697              		.cfi_offset 7, -8
 1698              		.cfi_offset 14, -4
 1699 0002 84B0     		sub	sp, sp, #16
 1700              		.cfi_def_cfa_offset 32
 1701 0004 00AF     		add	r7, sp, #0
 1702              		.cfi_def_cfa_register 7
 1703 0006 7860     		str	r0, [r7, #4]
 1704 0008 0B46     		mov	r3, r1
 1705 000a FB70     		strb	r3, [r7, #3]
 1706 000c 1346     		mov	r3, r2
 1707 000e BB70     		strb	r3, [r7, #2]
ARM GAS  /tmp/ccVJDjsH.s 			page 35


 273:S2LP_Driver/s2lp_rx.c **** 	double const fdig = S2LP_GetDigitalClockFrequency(handle);
 1708              		.loc 1 273 22
 1709 0010 7868     		ldr	r0, [r7, #4]
 1710 0012 FFF7FEFF 		bl	S2LP_GetDigitalClockFrequency
 1711 0016 0346     		mov	r3, r0
 1712              		.loc 1 273 15
 1713 0018 1846     		mov	r0, r3
 1714 001a FFF7FEFF 		bl	__aeabi_ui2d
 1715 001e 0246     		mov	r2, r0
 1716 0020 0B46     		mov	r3, r1
 1717 0022 C7E90223 		strd	r2, [r7, #8]
 274:S2LP_Driver/s2lp_rx.c **** 	return S2LP_CHANNEL_FILTER_WORDS[mantissa][exponent] * (fdig / 26000000.0);
 1718              		.loc 1 274 44
 1719 0026 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1720 0028 B978     		ldrb	r1, [r7, #2]	@ zero_extendqisi2
 1721 002a 1148     		ldr	r0, .L73+8
 1722 002c 1346     		mov	r3, r2
 1723 002e 9B00     		lsls	r3, r3, #2
 1724 0030 1344     		add	r3, r3, r2
 1725 0032 5B00     		lsls	r3, r3, #1
 1726 0034 0B44     		add	r3, r3, r1
 1727 0036 DB00     		lsls	r3, r3, #3
 1728 0038 0344     		add	r3, r3, r0
 1729 003a D3E90045 		ldrd	r4, [r3]
 1730              		.loc 1 274 63
 1731 003e 0AA3     		adr	r3, .L73
 1732 0040 D3E90023 		ldrd	r2, [r3]
 1733 0044 D7E90201 		ldrd	r0, [r7, #8]
 1734 0048 FFF7FEFF 		bl	__aeabi_ddiv
 1735 004c 0246     		mov	r2, r0
 1736 004e 0B46     		mov	r3, r1
 1737              		.loc 1 274 55
 1738 0050 2046     		mov	r0, r4
 1739 0052 2946     		mov	r1, r5
 1740 0054 FFF7FEFF 		bl	__aeabi_dmul
 1741 0058 0246     		mov	r2, r0
 1742 005a 0B46     		mov	r3, r1
 275:S2LP_Driver/s2lp_rx.c **** }
 1743              		.loc 1 275 1
 1744 005c 1046     		mov	r0, r2
 1745 005e 1946     		mov	r1, r3
 1746 0060 1037     		adds	r7, r7, #16
 1747              		.cfi_def_cfa_offset 16
 1748 0062 BD46     		mov	sp, r7
 1749              		.cfi_def_cfa_register 13
 1750              		@ sp needed
 1751 0064 B0BD     		pop	{r4, r5, r7, pc}
 1752              	.L74:
 1753 0066 00BF     		.align	3
 1754              	.L73:
 1755 0068 00000000 		.word	0
 1756 006c A8CB7841 		.word	1098435496
 1757 0070 00000000 		.word	S2LP_CHANNEL_FILTER_WORDS
 1758              		.cfi_endproc
 1759              	.LFE89:
 1761              		.section	.text.S2LP_RX_GetRSSIThreshold,"ax",%progbits
 1762              		.align	1
ARM GAS  /tmp/ccVJDjsH.s 			page 36


 1763              		.global	S2LP_RX_GetRSSIThreshold
 1764              		.syntax unified
 1765              		.thumb
 1766              		.thumb_func
 1768              	S2LP_RX_GetRSSIThreshold:
 1769              	.LFB90:
 276:S2LP_Driver/s2lp_rx.c **** 
 277:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetRSSIThreshold(S2LP_Handle* handle) {
 1770              		.loc 1 277 55
 1771              		.cfi_startproc
 1772              		@ args = 0, pretend = 0, frame = 8
 1773              		@ frame_needed = 1, uses_anonymous_args = 0
 1774 0000 80B5     		push	{r7, lr}
 1775              		.cfi_def_cfa_offset 8
 1776              		.cfi_offset 7, -8
 1777              		.cfi_offset 14, -4
 1778 0002 82B0     		sub	sp, sp, #8
 1779              		.cfi_def_cfa_offset 16
 1780 0004 00AF     		add	r7, sp, #0
 1781              		.cfi_def_cfa_register 7
 1782 0006 7860     		str	r0, [r7, #4]
 278:S2LP_Driver/s2lp_rx.c **** 	return S2LP_ReadRegister(handle, S2LP_REG_RSSI_TH);
 1783              		.loc 1 278 9
 1784 0008 1821     		movs	r1, #24
 1785 000a 7868     		ldr	r0, [r7, #4]
 1786 000c FFF7FEFF 		bl	S2LP_ReadRegister
 1787 0010 0346     		mov	r3, r0
 279:S2LP_Driver/s2lp_rx.c **** }
 1788              		.loc 1 279 1
 1789 0012 1846     		mov	r0, r3
 1790 0014 0837     		adds	r7, r7, #8
 1791              		.cfi_def_cfa_offset 8
 1792 0016 BD46     		mov	sp, r7
 1793              		.cfi_def_cfa_register 13
 1794              		@ sp needed
 1795 0018 80BD     		pop	{r7, pc}
 1796              		.cfi_endproc
 1797              	.LFE90:
 1799              		.section	.text.S2LP_RX_GetAFCFastLoopGain,"ax",%progbits
 1800              		.align	1
 1801              		.global	S2LP_RX_GetAFCFastLoopGain
 1802              		.syntax unified
 1803              		.thumb
 1804              		.thumb_func
 1806              	S2LP_RX_GetAFCFastLoopGain:
 1807              	.LFB91:
 280:S2LP_Driver/s2lp_rx.c **** 
 281:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetAFCFastLoopGain(S2LP_Handle* handle) {
 1808              		.loc 1 281 57
 1809              		.cfi_startproc
 1810              		@ args = 0, pretend = 0, frame = 16
 1811              		@ frame_needed = 1, uses_anonymous_args = 0
 1812 0000 80B5     		push	{r7, lr}
 1813              		.cfi_def_cfa_offset 8
 1814              		.cfi_offset 7, -8
 1815              		.cfi_offset 14, -4
 1816 0002 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccVJDjsH.s 			page 37


 1817              		.cfi_def_cfa_offset 24
 1818 0004 00AF     		add	r7, sp, #0
 1819              		.cfi_def_cfa_register 7
 1820 0006 7860     		str	r0, [r7, #4]
 282:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_AFC0);
 1821              		.loc 1 282 26
 1822 0008 1621     		movs	r1, #22
 1823 000a 7868     		ldr	r0, [r7, #4]
 1824 000c FFF7FEFF 		bl	S2LP_ReadRegister
 1825 0010 0346     		mov	r3, r0
 1826 0012 FB73     		strb	r3, [r7, #15]
 283:S2LP_Driver/s2lp_rx.c **** 	return GETBITS(reg_val, 0xF, 4);
 1827              		.loc 1 283 9
 1828 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1829 0016 1B09     		lsrs	r3, r3, #4
 1830 0018 DBB2     		uxtb	r3, r3
 284:S2LP_Driver/s2lp_rx.c **** }
 1831              		.loc 1 284 1
 1832 001a 1846     		mov	r0, r3
 1833 001c 1037     		adds	r7, r7, #16
 1834              		.cfi_def_cfa_offset 8
 1835 001e BD46     		mov	sp, r7
 1836              		.cfi_def_cfa_register 13
 1837              		@ sp needed
 1838 0020 80BD     		pop	{r7, pc}
 1839              		.cfi_endproc
 1840              	.LFE91:
 1842              		.section	.text.S2LP_RX_GetAFCSlowLoopGain,"ax",%progbits
 1843              		.align	1
 1844              		.global	S2LP_RX_GetAFCSlowLoopGain
 1845              		.syntax unified
 1846              		.thumb
 1847              		.thumb_func
 1849              	S2LP_RX_GetAFCSlowLoopGain:
 1850              	.LFB92:
 285:S2LP_Driver/s2lp_rx.c **** 
 286:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetAFCSlowLoopGain(S2LP_Handle* handle) {
 1851              		.loc 1 286 57
 1852              		.cfi_startproc
 1853              		@ args = 0, pretend = 0, frame = 16
 1854              		@ frame_needed = 1, uses_anonymous_args = 0
 1855 0000 80B5     		push	{r7, lr}
 1856              		.cfi_def_cfa_offset 8
 1857              		.cfi_offset 7, -8
 1858              		.cfi_offset 14, -4
 1859 0002 84B0     		sub	sp, sp, #16
 1860              		.cfi_def_cfa_offset 24
 1861 0004 00AF     		add	r7, sp, #0
 1862              		.cfi_def_cfa_register 7
 1863 0006 7860     		str	r0, [r7, #4]
 287:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_AFC0);
 1864              		.loc 1 287 26
 1865 0008 1621     		movs	r1, #22
 1866 000a 7868     		ldr	r0, [r7, #4]
 1867 000c FFF7FEFF 		bl	S2LP_ReadRegister
 1868 0010 0346     		mov	r3, r0
 1869 0012 FB73     		strb	r3, [r7, #15]
ARM GAS  /tmp/ccVJDjsH.s 			page 38


 288:S2LP_Driver/s2lp_rx.c **** 	return GETBITS(reg_val, 0xF, 0);
 1870              		.loc 1 288 9
 1871 0014 FB7B     		ldrb	r3, [r7, #15]
 1872 0016 03F00F03 		and	r3, r3, #15
 1873 001a DBB2     		uxtb	r3, r3
 289:S2LP_Driver/s2lp_rx.c **** }
 1874              		.loc 1 289 1
 1875 001c 1846     		mov	r0, r3
 1876 001e 1037     		adds	r7, r7, #16
 1877              		.cfi_def_cfa_offset 8
 1878 0020 BD46     		mov	sp, r7
 1879              		.cfi_def_cfa_register 13
 1880              		@ sp needed
 1881 0022 80BD     		pop	{r7, pc}
 1882              		.cfi_endproc
 1883              	.LFE92:
 1885              		.section	.text.S2LP_RX_GetAFCFastPeriod,"ax",%progbits
 1886              		.align	1
 1887              		.global	S2LP_RX_GetAFCFastPeriod
 1888              		.syntax unified
 1889              		.thumb
 1890              		.thumb_func
 1892              	S2LP_RX_GetAFCFastPeriod:
 1893              	.LFB93:
 290:S2LP_Driver/s2lp_rx.c **** 
 291:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetAFCFastPeriod(S2LP_Handle* handle) {
 1894              		.loc 1 291 55
 1895              		.cfi_startproc
 1896              		@ args = 0, pretend = 0, frame = 8
 1897              		@ frame_needed = 1, uses_anonymous_args = 0
 1898 0000 80B5     		push	{r7, lr}
 1899              		.cfi_def_cfa_offset 8
 1900              		.cfi_offset 7, -8
 1901              		.cfi_offset 14, -4
 1902 0002 82B0     		sub	sp, sp, #8
 1903              		.cfi_def_cfa_offset 16
 1904 0004 00AF     		add	r7, sp, #0
 1905              		.cfi_def_cfa_register 7
 1906 0006 7860     		str	r0, [r7, #4]
 292:S2LP_Driver/s2lp_rx.c **** 	return S2LP_ReadRegister(handle, S2LP_REG_AFC1);
 1907              		.loc 1 292 9
 1908 0008 1521     		movs	r1, #21
 1909 000a 7868     		ldr	r0, [r7, #4]
 1910 000c FFF7FEFF 		bl	S2LP_ReadRegister
 1911 0010 0346     		mov	r3, r0
 293:S2LP_Driver/s2lp_rx.c **** }
 1912              		.loc 1 293 1
 1913 0012 1846     		mov	r0, r3
 1914 0014 0837     		adds	r7, r7, #8
 1915              		.cfi_def_cfa_offset 8
 1916 0016 BD46     		mov	sp, r7
 1917              		.cfi_def_cfa_register 13
 1918              		@ sp needed
 1919 0018 80BD     		pop	{r7, pc}
 1920              		.cfi_endproc
 1921              	.LFE93:
 1923              		.section	.text.S2LP_RX_GetAFCMode,"ax",%progbits
ARM GAS  /tmp/ccVJDjsH.s 			page 39


 1924              		.align	1
 1925              		.global	S2LP_RX_GetAFCMode
 1926              		.syntax unified
 1927              		.thumb
 1928              		.thumb_func
 1930              	S2LP_RX_GetAFCMode:
 1931              	.LFB94:
 294:S2LP_Driver/s2lp_rx.c **** 
 295:S2LP_Driver/s2lp_rx.c **** S2LP_AFC_Mode S2LP_RX_GetAFCMode(S2LP_Handle* handle) {
 1932              		.loc 1 295 55
 1933              		.cfi_startproc
 1934              		@ args = 0, pretend = 0, frame = 16
 1935              		@ frame_needed = 1, uses_anonymous_args = 0
 1936 0000 80B5     		push	{r7, lr}
 1937              		.cfi_def_cfa_offset 8
 1938              		.cfi_offset 7, -8
 1939              		.cfi_offset 14, -4
 1940 0002 84B0     		sub	sp, sp, #16
 1941              		.cfi_def_cfa_offset 24
 1942 0004 00AF     		add	r7, sp, #0
 1943              		.cfi_def_cfa_register 7
 1944 0006 7860     		str	r0, [r7, #4]
 296:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_AFC2);
 1945              		.loc 1 296 26
 1946 0008 1421     		movs	r1, #20
 1947 000a 7868     		ldr	r0, [r7, #4]
 1948 000c FFF7FEFF 		bl	S2LP_ReadRegister
 1949 0010 0346     		mov	r3, r0
 1950 0012 FB73     		strb	r3, [r7, #15]
 297:S2LP_Driver/s2lp_rx.c **** 	return (S2LP_AFC_Mode) GETBIT(reg_val, 5);
 1951              		.loc 1 297 25
 1952 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1953 0016 5B09     		lsrs	r3, r3, #5
 1954 0018 03F00103 		and	r3, r3, #1
 1955              		.loc 1 297 9
 1956 001c DBB2     		uxtb	r3, r3
 298:S2LP_Driver/s2lp_rx.c **** }
 1957              		.loc 1 298 1
 1958 001e 1846     		mov	r0, r3
 1959 0020 1037     		adds	r7, r7, #16
 1960              		.cfi_def_cfa_offset 8
 1961 0022 BD46     		mov	sp, r7
 1962              		.cfi_def_cfa_register 13
 1963              		@ sp needed
 1964 0024 80BD     		pop	{r7, pc}
 1965              		.cfi_endproc
 1966              	.LFE94:
 1968              		.section	.text.S2LP_RX_GetAFCState,"ax",%progbits
 1969              		.align	1
 1970              		.global	S2LP_RX_GetAFCState
 1971              		.syntax unified
 1972              		.thumb
 1973              		.thumb_func
 1975              	S2LP_RX_GetAFCState:
 1976              	.LFB95:
 299:S2LP_Driver/s2lp_rx.c **** 
 300:S2LP_Driver/s2lp_rx.c **** bool S2LP_RX_GetAFCState(S2LP_Handle* handle) {
ARM GAS  /tmp/ccVJDjsH.s 			page 40


 1977              		.loc 1 300 47
 1978              		.cfi_startproc
 1979              		@ args = 0, pretend = 0, frame = 16
 1980              		@ frame_needed = 1, uses_anonymous_args = 0
 1981 0000 80B5     		push	{r7, lr}
 1982              		.cfi_def_cfa_offset 8
 1983              		.cfi_offset 7, -8
 1984              		.cfi_offset 14, -4
 1985 0002 84B0     		sub	sp, sp, #16
 1986              		.cfi_def_cfa_offset 24
 1987 0004 00AF     		add	r7, sp, #0
 1988              		.cfi_def_cfa_register 7
 1989 0006 7860     		str	r0, [r7, #4]
 301:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_AFC2);
 1990              		.loc 1 301 26
 1991 0008 1421     		movs	r1, #20
 1992 000a 7868     		ldr	r0, [r7, #4]
 1993 000c FFF7FEFF 		bl	S2LP_ReadRegister
 1994 0010 0346     		mov	r3, r0
 1995 0012 FB73     		strb	r3, [r7, #15]
 302:S2LP_Driver/s2lp_rx.c **** 	return (bool) GETBIT(reg_val, 6);
 1996              		.loc 1 302 9
 1997 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1998 0016 03F04003 		and	r3, r3, #64
 1999 001a 002B     		cmp	r3, #0
 2000 001c 14BF     		ite	ne
 2001 001e 0123     		movne	r3, #1
 2002 0020 0023     		moveq	r3, #0
 2003 0022 DBB2     		uxtb	r3, r3
 303:S2LP_Driver/s2lp_rx.c **** }
 2004              		.loc 1 303 1
 2005 0024 1846     		mov	r0, r3
 2006 0026 1037     		adds	r7, r7, #16
 2007              		.cfi_def_cfa_offset 8
 2008 0028 BD46     		mov	sp, r7
 2009              		.cfi_def_cfa_register 13
 2010              		@ sp needed
 2011 002a 80BD     		pop	{r7, pc}
 2012              		.cfi_endproc
 2013              	.LFE95:
 2015              		.section	.text.S2LP_RX_GetAFCFreezeOnSyncState,"ax",%progbits
 2016              		.align	1
 2017              		.global	S2LP_RX_GetAFCFreezeOnSyncState
 2018              		.syntax unified
 2019              		.thumb
 2020              		.thumb_func
 2022              	S2LP_RX_GetAFCFreezeOnSyncState:
 2023              	.LFB96:
 304:S2LP_Driver/s2lp_rx.c **** 
 305:S2LP_Driver/s2lp_rx.c **** bool S2LP_RX_GetAFCFreezeOnSyncState(S2LP_Handle* handle) {
 2024              		.loc 1 305 59
 2025              		.cfi_startproc
 2026              		@ args = 0, pretend = 0, frame = 16
 2027              		@ frame_needed = 1, uses_anonymous_args = 0
 2028 0000 80B5     		push	{r7, lr}
 2029              		.cfi_def_cfa_offset 8
 2030              		.cfi_offset 7, -8
ARM GAS  /tmp/ccVJDjsH.s 			page 41


 2031              		.cfi_offset 14, -4
 2032 0002 84B0     		sub	sp, sp, #16
 2033              		.cfi_def_cfa_offset 24
 2034 0004 00AF     		add	r7, sp, #0
 2035              		.cfi_def_cfa_register 7
 2036 0006 7860     		str	r0, [r7, #4]
 306:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_AFC2);
 2037              		.loc 1 306 26
 2038 0008 1421     		movs	r1, #20
 2039 000a 7868     		ldr	r0, [r7, #4]
 2040 000c FFF7FEFF 		bl	S2LP_ReadRegister
 2041 0010 0346     		mov	r3, r0
 2042 0012 FB73     		strb	r3, [r7, #15]
 307:S2LP_Driver/s2lp_rx.c **** 	return (bool) GETBIT(reg_val, 7);
 2043              		.loc 1 307 9
 2044 0014 97F90F30 		ldrsb	r3, [r7, #15]
 2045 0018 DBB2     		uxtb	r3, r3
 2046 001a DB09     		lsrs	r3, r3, #7
 2047 001c DBB2     		uxtb	r3, r3
 308:S2LP_Driver/s2lp_rx.c **** }
 2048              		.loc 1 308 1
 2049 001e 1846     		mov	r0, r3
 2050 0020 1037     		adds	r7, r7, #16
 2051              		.cfi_def_cfa_offset 8
 2052 0022 BD46     		mov	sp, r7
 2053              		.cfi_def_cfa_register 13
 2054              		@ sp needed
 2055 0024 80BD     		pop	{r7, pc}
 2056              		.cfi_endproc
 2057              	.LFE96:
 2059              		.section	.text.S2LP_RX_GetAGCHighThreshold,"ax",%progbits
 2060              		.align	1
 2061              		.global	S2LP_RX_GetAGCHighThreshold
 2062              		.syntax unified
 2063              		.thumb
 2064              		.thumb_func
 2066              	S2LP_RX_GetAGCHighThreshold:
 2067              	.LFB97:
 309:S2LP_Driver/s2lp_rx.c **** 
 310:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetAGCHighThreshold(S2LP_Handle* handle) {
 2068              		.loc 1 310 58
 2069              		.cfi_startproc
 2070              		@ args = 0, pretend = 0, frame = 16
 2071              		@ frame_needed = 1, uses_anonymous_args = 0
 2072 0000 80B5     		push	{r7, lr}
 2073              		.cfi_def_cfa_offset 8
 2074              		.cfi_offset 7, -8
 2075              		.cfi_offset 14, -4
 2076 0002 84B0     		sub	sp, sp, #16
 2077              		.cfi_def_cfa_offset 24
 2078 0004 00AF     		add	r7, sp, #0
 2079              		.cfi_def_cfa_register 7
 2080 0006 7860     		str	r0, [r7, #4]
 311:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_AGCCTRL1);
 2081              		.loc 1 311 26
 2082 0008 1D21     		movs	r1, #29
 2083 000a 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/ccVJDjsH.s 			page 42


 2084 000c FFF7FEFF 		bl	S2LP_ReadRegister
 2085 0010 0346     		mov	r3, r0
 2086 0012 FB73     		strb	r3, [r7, #15]
 312:S2LP_Driver/s2lp_rx.c **** 	return (uint8_t) GETBITS(reg_val, 0xF, 4);
 2087              		.loc 1 312 9
 2088 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2089 0016 1B09     		lsrs	r3, r3, #4
 2090 0018 DBB2     		uxtb	r3, r3
 313:S2LP_Driver/s2lp_rx.c **** }
 2091              		.loc 1 313 1
 2092 001a 1846     		mov	r0, r3
 2093 001c 1037     		adds	r7, r7, #16
 2094              		.cfi_def_cfa_offset 8
 2095 001e BD46     		mov	sp, r7
 2096              		.cfi_def_cfa_register 13
 2097              		@ sp needed
 2098 0020 80BD     		pop	{r7, pc}
 2099              		.cfi_endproc
 2100              	.LFE97:
 2102              		.section	.text.S2LP_RX_GetAGCLowThreshold,"ax",%progbits
 2103              		.align	1
 2104              		.global	S2LP_RX_GetAGCLowThreshold
 2105              		.syntax unified
 2106              		.thumb
 2107              		.thumb_func
 2109              	S2LP_RX_GetAGCLowThreshold:
 2110              	.LFB98:
 314:S2LP_Driver/s2lp_rx.c **** 
 315:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetAGCLowThreshold(S2LP_Handle* handle, S2LP_AGC_Low_Threshold threshold) {
 2111              		.loc 1 315 91
 2112              		.cfi_startproc
 2113              		@ args = 0, pretend = 0, frame = 16
 2114              		@ frame_needed = 1, uses_anonymous_args = 0
 2115 0000 80B5     		push	{r7, lr}
 2116              		.cfi_def_cfa_offset 8
 2117              		.cfi_offset 7, -8
 2118              		.cfi_offset 14, -4
 2119 0002 84B0     		sub	sp, sp, #16
 2120              		.cfi_def_cfa_offset 24
 2121 0004 00AF     		add	r7, sp, #0
 2122              		.cfi_def_cfa_register 7
 2123 0006 7860     		str	r0, [r7, #4]
 2124 0008 0B46     		mov	r3, r1
 2125 000a FB70     		strb	r3, [r7, #3]
 316:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_AGCCTRL4);
 2126              		.loc 1 316 26
 2127 000c 1A21     		movs	r1, #26
 2128 000e 7868     		ldr	r0, [r7, #4]
 2129 0010 FFF7FEFF 		bl	S2LP_ReadRegister
 2130 0014 0346     		mov	r3, r0
 2131 0016 FB73     		strb	r3, [r7, #15]
 317:S2LP_Driver/s2lp_rx.c **** 
 318:S2LP_Driver/s2lp_rx.c **** 	switch (threshold) {
 2132              		.loc 1 318 2
 2133 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2134 001a 002B     		cmp	r3, #0
 2135 001c 02D0     		beq	.L92
ARM GAS  /tmp/ccVJDjsH.s 			page 43


 2136 001e 012B     		cmp	r3, #1
 2137 0020 04D0     		beq	.L93
 2138 0022 08E0     		b	.L96
 2139              	.L92:
 319:S2LP_Driver/s2lp_rx.c **** 		case S2LP_AGC_LOW_THRESHOLD_0:
 320:S2LP_Driver/s2lp_rx.c **** 			return (uint8_t) GETBITS(reg_val, 0xF, 4);
 2140              		.loc 1 320 11
 2141 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2142 0026 1B09     		lsrs	r3, r3, #4
 2143 0028 DBB2     		uxtb	r3, r3
 2144 002a 05E0     		b	.L95
 2145              	.L93:
 321:S2LP_Driver/s2lp_rx.c **** 		case S2LP_AGC_LOW_THRESHOLD_1:
 322:S2LP_Driver/s2lp_rx.c **** 			return (uint8_t) GETBITS(reg_val, 0xF, 0);
 2146              		.loc 1 322 11
 2147 002c FB7B     		ldrb	r3, [r7, #15]
 2148 002e 03F00F03 		and	r3, r3, #15
 2149 0032 DBB2     		uxtb	r3, r3
 2150 0034 00E0     		b	.L95
 2151              	.L96:
 323:S2LP_Driver/s2lp_rx.c **** 	}
 324:S2LP_Driver/s2lp_rx.c **** 
 325:S2LP_Driver/s2lp_rx.c **** 	return 0;
 2152              		.loc 1 325 9
 2153 0036 0023     		movs	r3, #0
 2154              	.L95:
 326:S2LP_Driver/s2lp_rx.c **** }
 2155              		.loc 1 326 1
 2156 0038 1846     		mov	r0, r3
 2157 003a 1037     		adds	r7, r7, #16
 2158              		.cfi_def_cfa_offset 8
 2159 003c BD46     		mov	sp, r7
 2160              		.cfi_def_cfa_register 13
 2161              		@ sp needed
 2162 003e 80BD     		pop	{r7, pc}
 2163              		.cfi_endproc
 2164              	.LFE98:
 2166              		.section	.text.S2LP_RX_GetAGCMeasureTimeRaw,"ax",%progbits
 2167              		.align	1
 2168              		.global	S2LP_RX_GetAGCMeasureTimeRaw
 2169              		.syntax unified
 2170              		.thumb
 2171              		.thumb_func
 2173              	S2LP_RX_GetAGCMeasureTimeRaw:
 2174              	.LFB99:
 327:S2LP_Driver/s2lp_rx.c **** 
 328:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetAGCMeasureTimeRaw(S2LP_Handle* handle) {
 2175              		.loc 1 328 59
 2176              		.cfi_startproc
 2177              		@ args = 0, pretend = 0, frame = 16
 2178              		@ frame_needed = 1, uses_anonymous_args = 0
 2179 0000 80B5     		push	{r7, lr}
 2180              		.cfi_def_cfa_offset 8
 2181              		.cfi_offset 7, -8
 2182              		.cfi_offset 14, -4
 2183 0002 84B0     		sub	sp, sp, #16
 2184              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccVJDjsH.s 			page 44


 2185 0004 00AF     		add	r7, sp, #0
 2186              		.cfi_def_cfa_register 7
 2187 0006 7860     		str	r0, [r7, #4]
 329:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_AGCCTRL2);
 2188              		.loc 1 329 26
 2189 0008 1C21     		movs	r1, #28
 2190 000a 7868     		ldr	r0, [r7, #4]
 2191 000c FFF7FEFF 		bl	S2LP_ReadRegister
 2192 0010 0346     		mov	r3, r0
 2193 0012 FB73     		strb	r3, [r7, #15]
 330:S2LP_Driver/s2lp_rx.c **** 	return (uint8_t) GETBITS(reg_val, 0xF, 0);
 2194              		.loc 1 330 9
 2195 0014 FB7B     		ldrb	r3, [r7, #15]
 2196 0016 03F00F03 		and	r3, r3, #15
 2197 001a DBB2     		uxtb	r3, r3
 331:S2LP_Driver/s2lp_rx.c **** }
 2198              		.loc 1 331 1
 2199 001c 1846     		mov	r0, r3
 2200 001e 1037     		adds	r7, r7, #16
 2201              		.cfi_def_cfa_offset 8
 2202 0020 BD46     		mov	sp, r7
 2203              		.cfi_def_cfa_register 13
 2204              		@ sp needed
 2205 0022 80BD     		pop	{r7, pc}
 2206              		.cfi_endproc
 2207              	.LFE99:
 2209              		.section	.text.S2LP_RX_GetAGCHoldTimeRaw,"ax",%progbits
 2210              		.align	1
 2211              		.global	S2LP_RX_GetAGCHoldTimeRaw
 2212              		.syntax unified
 2213              		.thumb
 2214              		.thumb_func
 2216              	S2LP_RX_GetAGCHoldTimeRaw:
 2217              	.LFB100:
 332:S2LP_Driver/s2lp_rx.c **** 
 333:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetAGCHoldTimeRaw(S2LP_Handle* handle) {
 2218              		.loc 1 333 56
 2219              		.cfi_startproc
 2220              		@ args = 0, pretend = 0, frame = 16
 2221              		@ frame_needed = 1, uses_anonymous_args = 0
 2222 0000 80B5     		push	{r7, lr}
 2223              		.cfi_def_cfa_offset 8
 2224              		.cfi_offset 7, -8
 2225              		.cfi_offset 14, -4
 2226 0002 84B0     		sub	sp, sp, #16
 2227              		.cfi_def_cfa_offset 24
 2228 0004 00AF     		add	r7, sp, #0
 2229              		.cfi_def_cfa_register 7
 2230 0006 7860     		str	r0, [r7, #4]
 334:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_AGCCTRL0);
 2231              		.loc 1 334 26
 2232 0008 1E21     		movs	r1, #30
 2233 000a 7868     		ldr	r0, [r7, #4]
 2234 000c FFF7FEFF 		bl	S2LP_ReadRegister
 2235 0010 0346     		mov	r3, r0
 2236 0012 FB73     		strb	r3, [r7, #15]
 335:S2LP_Driver/s2lp_rx.c **** 	return (uint8_t) GETBITS(reg_val, 0b11111, 0);
ARM GAS  /tmp/ccVJDjsH.s 			page 45


 2237              		.loc 1 335 9
 2238 0014 FB7B     		ldrb	r3, [r7, #15]
 2239 0016 03F01F03 		and	r3, r3, #31
 2240 001a DBB2     		uxtb	r3, r3
 336:S2LP_Driver/s2lp_rx.c **** }
 2241              		.loc 1 336 1
 2242 001c 1846     		mov	r0, r3
 2243 001e 1037     		adds	r7, r7, #16
 2244              		.cfi_def_cfa_offset 8
 2245 0020 BD46     		mov	sp, r7
 2246              		.cfi_def_cfa_register 13
 2247              		@ sp needed
 2248 0022 80BD     		pop	{r7, pc}
 2249              		.cfi_endproc
 2250              	.LFE100:
 2252              		.section	.text.S2LP_RX_GetAGCState,"ax",%progbits
 2253              		.align	1
 2254              		.global	S2LP_RX_GetAGCState
 2255              		.syntax unified
 2256              		.thumb
 2257              		.thumb_func
 2259              	S2LP_RX_GetAGCState:
 2260              	.LFB101:
 337:S2LP_Driver/s2lp_rx.c **** 
 338:S2LP_Driver/s2lp_rx.c **** bool S2LP_RX_GetAGCState(S2LP_Handle* handle) {
 2261              		.loc 1 338 47
 2262              		.cfi_startproc
 2263              		@ args = 0, pretend = 0, frame = 16
 2264              		@ frame_needed = 1, uses_anonymous_args = 0
 2265 0000 80B5     		push	{r7, lr}
 2266              		.cfi_def_cfa_offset 8
 2267              		.cfi_offset 7, -8
 2268              		.cfi_offset 14, -4
 2269 0002 84B0     		sub	sp, sp, #16
 2270              		.cfi_def_cfa_offset 24
 2271 0004 00AF     		add	r7, sp, #0
 2272              		.cfi_def_cfa_register 7
 2273 0006 7860     		str	r0, [r7, #4]
 339:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_AGCCTRL0);
 2274              		.loc 1 339 26
 2275 0008 1E21     		movs	r1, #30
 2276 000a 7868     		ldr	r0, [r7, #4]
 2277 000c FFF7FEFF 		bl	S2LP_ReadRegister
 2278 0010 0346     		mov	r3, r0
 2279 0012 FB73     		strb	r3, [r7, #15]
 340:S2LP_Driver/s2lp_rx.c **** 	return (bool) GETBIT(reg_val, 7);
 2280              		.loc 1 340 9
 2281 0014 97F90F30 		ldrsb	r3, [r7, #15]
 2282 0018 DBB2     		uxtb	r3, r3
 2283 001a DB09     		lsrs	r3, r3, #7
 2284 001c DBB2     		uxtb	r3, r3
 341:S2LP_Driver/s2lp_rx.c **** }
 2285              		.loc 1 341 1
 2286 001e 1846     		mov	r0, r3
 2287 0020 1037     		adds	r7, r7, #16
 2288              		.cfi_def_cfa_offset 8
 2289 0022 BD46     		mov	sp, r7
ARM GAS  /tmp/ccVJDjsH.s 			page 46


 2290              		.cfi_def_cfa_register 13
 2291              		@ sp needed
 2292 0024 80BD     		pop	{r7, pc}
 2293              		.cfi_endproc
 2294              	.LFE101:
 2296              		.section	.text.S2LP_RX_GetAGCFreezeOnSyncState,"ax",%progbits
 2297              		.align	1
 2298              		.global	S2LP_RX_GetAGCFreezeOnSyncState
 2299              		.syntax unified
 2300              		.thumb
 2301              		.thumb_func
 2303              	S2LP_RX_GetAGCFreezeOnSyncState:
 2304              	.LFB102:
 342:S2LP_Driver/s2lp_rx.c **** 
 343:S2LP_Driver/s2lp_rx.c **** bool S2LP_RX_GetAGCFreezeOnSyncState(S2LP_Handle* handle) {
 2305              		.loc 1 343 59
 2306              		.cfi_startproc
 2307              		@ args = 0, pretend = 0, frame = 16
 2308              		@ frame_needed = 1, uses_anonymous_args = 0
 2309 0000 80B5     		push	{r7, lr}
 2310              		.cfi_def_cfa_offset 8
 2311              		.cfi_offset 7, -8
 2312              		.cfi_offset 14, -4
 2313 0002 84B0     		sub	sp, sp, #16
 2314              		.cfi_def_cfa_offset 24
 2315 0004 00AF     		add	r7, sp, #0
 2316              		.cfi_def_cfa_register 7
 2317 0006 7860     		str	r0, [r7, #4]
 344:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_AGCCTRL2);
 2318              		.loc 1 344 26
 2319 0008 1C21     		movs	r1, #28
 2320 000a 7868     		ldr	r0, [r7, #4]
 2321 000c FFF7FEFF 		bl	S2LP_ReadRegister
 2322 0010 0346     		mov	r3, r0
 2323 0012 FB73     		strb	r3, [r7, #15]
 345:S2LP_Driver/s2lp_rx.c **** 	return (bool) GETBIT(reg_val, 5);
 2324              		.loc 1 345 9
 2325 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2326 0016 03F02003 		and	r3, r3, #32
 2327 001a 002B     		cmp	r3, #0
 2328 001c 14BF     		ite	ne
 2329 001e 0123     		movne	r3, #1
 2330 0020 0023     		moveq	r3, #0
 2331 0022 DBB2     		uxtb	r3, r3
 346:S2LP_Driver/s2lp_rx.c **** }
 2332              		.loc 1 346 1
 2333 0024 1846     		mov	r0, r3
 2334 0026 1037     		adds	r7, r7, #16
 2335              		.cfi_def_cfa_offset 8
 2336 0028 BD46     		mov	sp, r7
 2337              		.cfi_def_cfa_register 13
 2338              		@ sp needed
 2339 002a 80BD     		pop	{r7, pc}
 2340              		.cfi_endproc
 2341              	.LFE102:
 2343              		.section	.text.S2LP_RX_GetChannelFilterMantissa,"ax",%progbits
 2344              		.align	1
ARM GAS  /tmp/ccVJDjsH.s 			page 47


 2345              		.global	S2LP_RX_GetChannelFilterMantissa
 2346              		.syntax unified
 2347              		.thumb
 2348              		.thumb_func
 2350              	S2LP_RX_GetChannelFilterMantissa:
 2351              	.LFB103:
 347:S2LP_Driver/s2lp_rx.c **** 
 348:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetChannelFilterMantissa(S2LP_Handle* handle) {
 2352              		.loc 1 348 63
 2353              		.cfi_startproc
 2354              		@ args = 0, pretend = 0, frame = 16
 2355              		@ frame_needed = 1, uses_anonymous_args = 0
 2356 0000 80B5     		push	{r7, lr}
 2357              		.cfi_def_cfa_offset 8
 2358              		.cfi_offset 7, -8
 2359              		.cfi_offset 14, -4
 2360 0002 84B0     		sub	sp, sp, #16
 2361              		.cfi_def_cfa_offset 24
 2362 0004 00AF     		add	r7, sp, #0
 2363              		.cfi_def_cfa_register 7
 2364 0006 7860     		str	r0, [r7, #4]
 349:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_CHFLT);
 2365              		.loc 1 349 26
 2366 0008 1321     		movs	r1, #19
 2367 000a 7868     		ldr	r0, [r7, #4]
 2368 000c FFF7FEFF 		bl	S2LP_ReadRegister
 2369 0010 0346     		mov	r3, r0
 2370 0012 FB73     		strb	r3, [r7, #15]
 350:S2LP_Driver/s2lp_rx.c **** 	return (uint8_t) GETBITS(reg_val, 0xF, 4);
 2371              		.loc 1 350 9
 2372 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2373 0016 1B09     		lsrs	r3, r3, #4
 2374 0018 DBB2     		uxtb	r3, r3
 351:S2LP_Driver/s2lp_rx.c **** }
 2375              		.loc 1 351 1
 2376 001a 1846     		mov	r0, r3
 2377 001c 1037     		adds	r7, r7, #16
 2378              		.cfi_def_cfa_offset 8
 2379 001e BD46     		mov	sp, r7
 2380              		.cfi_def_cfa_register 13
 2381              		@ sp needed
 2382 0020 80BD     		pop	{r7, pc}
 2383              		.cfi_endproc
 2384              	.LFE103:
 2386              		.section	.text.S2LP_RX_GetChannelFilterExponent,"ax",%progbits
 2387              		.align	1
 2388              		.global	S2LP_RX_GetChannelFilterExponent
 2389              		.syntax unified
 2390              		.thumb
 2391              		.thumb_func
 2393              	S2LP_RX_GetChannelFilterExponent:
 2394              	.LFB104:
 352:S2LP_Driver/s2lp_rx.c **** 
 353:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetChannelFilterExponent(S2LP_Handle* handle) {
 2395              		.loc 1 353 63
 2396              		.cfi_startproc
 2397              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccVJDjsH.s 			page 48


 2398              		@ frame_needed = 1, uses_anonymous_args = 0
 2399 0000 80B5     		push	{r7, lr}
 2400              		.cfi_def_cfa_offset 8
 2401              		.cfi_offset 7, -8
 2402              		.cfi_offset 14, -4
 2403 0002 84B0     		sub	sp, sp, #16
 2404              		.cfi_def_cfa_offset 24
 2405 0004 00AF     		add	r7, sp, #0
 2406              		.cfi_def_cfa_register 7
 2407 0006 7860     		str	r0, [r7, #4]
 354:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_CHFLT);
 2408              		.loc 1 354 26
 2409 0008 1321     		movs	r1, #19
 2410 000a 7868     		ldr	r0, [r7, #4]
 2411 000c FFF7FEFF 		bl	S2LP_ReadRegister
 2412 0010 0346     		mov	r3, r0
 2413 0012 FB73     		strb	r3, [r7, #15]
 355:S2LP_Driver/s2lp_rx.c **** 	return (uint8_t) GETBITS(reg_val, 0xF, 0);
 2414              		.loc 1 355 9
 2415 0014 FB7B     		ldrb	r3, [r7, #15]
 2416 0016 03F00F03 		and	r3, r3, #15
 2417 001a DBB2     		uxtb	r3, r3
 356:S2LP_Driver/s2lp_rx.c **** }
 2418              		.loc 1 356 1
 2419 001c 1846     		mov	r0, r3
 2420 001e 1037     		adds	r7, r7, #16
 2421              		.cfi_def_cfa_offset 8
 2422 0020 BD46     		mov	sp, r7
 2423              		.cfi_def_cfa_register 13
 2424              		@ sp needed
 2425 0022 80BD     		pop	{r7, pc}
 2426              		.cfi_endproc
 2427              	.LFE104:
 2429              		.section	.text.S2LP_RX_GetChannelFilterValueRaw,"ax",%progbits
 2430              		.align	1
 2431              		.global	S2LP_RX_GetChannelFilterValueRaw
 2432              		.syntax unified
 2433              		.thumb
 2434              		.thumb_func
 2436              	S2LP_RX_GetChannelFilterValueRaw:
 2437              	.LFB105:
 357:S2LP_Driver/s2lp_rx.c **** 
 358:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_GetChannelFilterValueRaw(S2LP_Handle* handle, uint8_t* mantissa, uint8_t* exponent) {
 2438              		.loc 1 358 98
 2439              		.cfi_startproc
 2440              		@ args = 0, pretend = 0, frame = 24
 2441              		@ frame_needed = 1, uses_anonymous_args = 0
 2442 0000 80B5     		push	{r7, lr}
 2443              		.cfi_def_cfa_offset 8
 2444              		.cfi_offset 7, -8
 2445              		.cfi_offset 14, -4
 2446 0002 86B0     		sub	sp, sp, #24
 2447              		.cfi_def_cfa_offset 32
 2448 0004 00AF     		add	r7, sp, #0
 2449              		.cfi_def_cfa_register 7
 2450 0006 F860     		str	r0, [r7, #12]
 2451 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccVJDjsH.s 			page 49


 2452 000a 7A60     		str	r2, [r7, #4]
 359:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_CHFLT);
 2453              		.loc 1 359 26
 2454 000c 1321     		movs	r1, #19
 2455 000e F868     		ldr	r0, [r7, #12]
 2456 0010 FFF7FEFF 		bl	S2LP_ReadRegister
 2457 0014 0346     		mov	r3, r0
 2458 0016 FB75     		strb	r3, [r7, #23]
 360:S2LP_Driver/s2lp_rx.c **** 	*mantissa = GETBITS(reg_val, 0xF, 4);
 2459              		.loc 1 360 14
 2460 0018 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2461 001a 1B09     		lsrs	r3, r3, #4
 2462 001c DAB2     		uxtb	r2, r3
 2463              		.loc 1 360 12
 2464 001e BB68     		ldr	r3, [r7, #8]
 2465 0020 1A70     		strb	r2, [r3]
 361:S2LP_Driver/s2lp_rx.c **** 	*exponent = GETBITS(reg_val, 0xF, 0);
 2466              		.loc 1 361 14
 2467 0022 FB7D     		ldrb	r3, [r7, #23]
 2468 0024 03F00F03 		and	r3, r3, #15
 2469 0028 DAB2     		uxtb	r2, r3
 2470              		.loc 1 361 12
 2471 002a 7B68     		ldr	r3, [r7, #4]
 2472 002c 1A70     		strb	r2, [r3]
 362:S2LP_Driver/s2lp_rx.c **** }
 2473              		.loc 1 362 1
 2474 002e 00BF     		nop
 2475 0030 1837     		adds	r7, r7, #24
 2476              		.cfi_def_cfa_offset 8
 2477 0032 BD46     		mov	sp, r7
 2478              		.cfi_def_cfa_register 13
 2479              		@ sp needed
 2480 0034 80BD     		pop	{r7, pc}
 2481              		.cfi_endproc
 2482              	.LFE105:
 2484              		.section	.text.S2LP_RX_GetChannelFilterValue,"ax",%progbits
 2485              		.align	1
 2486              		.global	S2LP_RX_GetChannelFilterValue
 2487              		.syntax unified
 2488              		.thumb
 2489              		.thumb_func
 2491              	S2LP_RX_GetChannelFilterValue:
 2492              	.LFB106:
 363:S2LP_Driver/s2lp_rx.c **** 
 364:S2LP_Driver/s2lp_rx.c **** double S2LP_RX_GetChannelFilterValue(S2LP_Handle* handle) {
 2493              		.loc 1 364 59
 2494              		.cfi_startproc
 2495              		@ args = 0, pretend = 0, frame = 16
 2496              		@ frame_needed = 1, uses_anonymous_args = 0
 2497 0000 80B5     		push	{r7, lr}
 2498              		.cfi_def_cfa_offset 8
 2499              		.cfi_offset 7, -8
 2500              		.cfi_offset 14, -4
 2501 0002 84B0     		sub	sp, sp, #16
 2502              		.cfi_def_cfa_offset 24
 2503 0004 00AF     		add	r7, sp, #0
 2504              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccVJDjsH.s 			page 50


 2505 0006 7860     		str	r0, [r7, #4]
 365:S2LP_Driver/s2lp_rx.c **** 	uint8_t mantissa = 0;
 2506              		.loc 1 365 10
 2507 0008 0023     		movs	r3, #0
 2508 000a FB73     		strb	r3, [r7, #15]
 366:S2LP_Driver/s2lp_rx.c **** 	uint8_t exponent = 0;
 2509              		.loc 1 366 10
 2510 000c 0023     		movs	r3, #0
 2511 000e BB73     		strb	r3, [r7, #14]
 367:S2LP_Driver/s2lp_rx.c **** 	S2LP_RX_GetChannelFilterValueRaw(handle, &mantissa, &exponent);
 2512              		.loc 1 367 2
 2513 0010 07F10E02 		add	r2, r7, #14
 2514 0014 07F10F03 		add	r3, r7, #15
 2515 0018 1946     		mov	r1, r3
 2516 001a 7868     		ldr	r0, [r7, #4]
 2517 001c FFF7FEFF 		bl	S2LP_RX_GetChannelFilterValueRaw
 368:S2LP_Driver/s2lp_rx.c **** 	return S2LP_RX_CalculateChannelFilterBandwidth(handle, mantissa, exponent);
 2518              		.loc 1 368 9
 2519 0020 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2520 0022 BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 2521 0024 1946     		mov	r1, r3
 2522 0026 7868     		ldr	r0, [r7, #4]
 2523 0028 FFF7FEFF 		bl	S2LP_RX_CalculateChannelFilterBandwidth
 2524 002c 0246     		mov	r2, r0
 2525 002e 0B46     		mov	r3, r1
 369:S2LP_Driver/s2lp_rx.c **** }
 2526              		.loc 1 369 1
 2527 0030 1046     		mov	r0, r2
 2528 0032 1946     		mov	r1, r3
 2529 0034 1037     		adds	r7, r7, #16
 2530              		.cfi_def_cfa_offset 8
 2531 0036 BD46     		mov	sp, r7
 2532              		.cfi_def_cfa_register 13
 2533              		@ sp needed
 2534 0038 80BD     		pop	{r7, pc}
 2535              		.cfi_endproc
 2536              	.LFE106:
 2538              		.section	.text.S2LP_RX_GetCarrierSenseMode,"ax",%progbits
 2539              		.align	1
 2540              		.global	S2LP_RX_GetCarrierSenseMode
 2541              		.syntax unified
 2542              		.thumb
 2543              		.thumb_func
 2545              	S2LP_RX_GetCarrierSenseMode:
 2546              	.LFB107:
 370:S2LP_Driver/s2lp_rx.c **** 
 371:S2LP_Driver/s2lp_rx.c **** S2LP_CS_Mode S2LP_RX_GetCarrierSenseMode(S2LP_Handle* handle) {
 2547              		.loc 1 371 63
 2548              		.cfi_startproc
 2549              		@ args = 0, pretend = 0, frame = 16
 2550              		@ frame_needed = 1, uses_anonymous_args = 0
 2551 0000 80B5     		push	{r7, lr}
 2552              		.cfi_def_cfa_offset 8
 2553              		.cfi_offset 7, -8
 2554              		.cfi_offset 14, -4
 2555 0002 84B0     		sub	sp, sp, #16
 2556              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccVJDjsH.s 			page 51


 2557 0004 00AF     		add	r7, sp, #0
 2558              		.cfi_def_cfa_register 7
 2559 0006 7860     		str	r0, [r7, #4]
 372:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_RSSI_FLT);
 2560              		.loc 1 372 26
 2561 0008 1721     		movs	r1, #23
 2562 000a 7868     		ldr	r0, [r7, #4]
 2563 000c FFF7FEFF 		bl	S2LP_ReadRegister
 2564 0010 0346     		mov	r3, r0
 2565 0012 FB73     		strb	r3, [r7, #15]
 373:S2LP_Driver/s2lp_rx.c **** 	return (S2LP_CS_Mode) GETBITS(reg_val, 0b11, 2);
 2566              		.loc 1 373 24
 2567 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2568 0016 9B10     		asrs	r3, r3, #2
 2569 0018 03F00303 		and	r3, r3, #3
 2570              		.loc 1 373 9
 2571 001c DBB2     		uxtb	r3, r3
 374:S2LP_Driver/s2lp_rx.c **** }
 2572              		.loc 1 374 1
 2573 001e 1846     		mov	r0, r3
 2574 0020 1037     		adds	r7, r7, #16
 2575              		.cfi_def_cfa_offset 8
 2576 0022 BD46     		mov	sp, r7
 2577              		.cfi_def_cfa_register 13
 2578              		@ sp needed
 2579 0024 80BD     		pop	{r7, pc}
 2580              		.cfi_endproc
 2581              	.LFE107:
 2583              		.section	.text.S2LP_RX_GetTimerStopConfig,"ax",%progbits
 2584              		.align	1
 2585              		.global	S2LP_RX_GetTimerStopConfig
 2586              		.syntax unified
 2587              		.thumb
 2588              		.thumb_func
 2590              	S2LP_RX_GetTimerStopConfig:
 2591              	.LFB108:
 375:S2LP_Driver/s2lp_rx.c **** 
 376:S2LP_Driver/s2lp_rx.c **** void S2LP_RX_GetTimerStopConfig(S2LP_Handle* handle, bool* rx_timeout_and_or,
 377:S2LP_Driver/s2lp_rx.c **** bool* cs_timeout, bool* sqi_timeout, bool* pqi_timeout) {
 2592              		.loc 1 377 57
 2593              		.cfi_startproc
 2594              		@ args = 4, pretend = 0, frame = 24
 2595              		@ frame_needed = 1, uses_anonymous_args = 0
 2596 0000 80B5     		push	{r7, lr}
 2597              		.cfi_def_cfa_offset 8
 2598              		.cfi_offset 7, -8
 2599              		.cfi_offset 14, -4
 2600 0002 86B0     		sub	sp, sp, #24
 2601              		.cfi_def_cfa_offset 32
 2602 0004 00AF     		add	r7, sp, #0
 2603              		.cfi_def_cfa_register 7
 2604 0006 F860     		str	r0, [r7, #12]
 2605 0008 B960     		str	r1, [r7, #8]
 2606 000a 7A60     		str	r2, [r7, #4]
 2607 000c 3B60     		str	r3, [r7]
 378:S2LP_Driver/s2lp_rx.c **** 	uint8_t const proto_reg_val = S2LP_ReadRegister(handle, S2LP_REG_PROTOCOL2);
 2608              		.loc 1 378 32
ARM GAS  /tmp/ccVJDjsH.s 			page 52


 2609 000e 3921     		movs	r1, #57
 2610 0010 F868     		ldr	r0, [r7, #12]
 2611 0012 FFF7FEFF 		bl	S2LP_ReadRegister
 2612 0016 0346     		mov	r3, r0
 2613 0018 FB75     		strb	r3, [r7, #23]
 379:S2LP_Driver/s2lp_rx.c **** 	uint8_t const rxt_reg_val = S2LP_ReadRegister(handle, S2LP_REG_PCKT_FLT_OPTIONS);
 2614              		.loc 1 379 30
 2615 001a 4021     		movs	r1, #64
 2616 001c F868     		ldr	r0, [r7, #12]
 2617 001e FFF7FEFF 		bl	S2LP_ReadRegister
 2618 0022 0346     		mov	r3, r0
 2619 0024 BB75     		strb	r3, [r7, #22]
 380:S2LP_Driver/s2lp_rx.c **** 
 381:S2LP_Driver/s2lp_rx.c **** 	*rx_timeout_and_or = GETBIT(rxt_reg_val, 6);
 2620              		.loc 1 381 23
 2621 0026 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 2622 0028 9B09     		lsrs	r3, r3, #6
 2623 002a 03F00103 		and	r3, r3, #1
 2624 002e 002B     		cmp	r3, #0
 2625 0030 14BF     		ite	ne
 2626 0032 0123     		movne	r3, #1
 2627 0034 0023     		moveq	r3, #0
 2628 0036 DAB2     		uxtb	r2, r3
 2629              		.loc 1 381 21
 2630 0038 BB68     		ldr	r3, [r7, #8]
 2631 003a 1A70     		strb	r2, [r3]
 382:S2LP_Driver/s2lp_rx.c **** 	*cs_timeout = GETBIT(proto_reg_val, 7);
 2632              		.loc 1 382 16
 2633 003c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2634 003e DB09     		lsrs	r3, r3, #7
 2635 0040 DBB2     		uxtb	r3, r3
 2636 0042 002B     		cmp	r3, #0
 2637 0044 14BF     		ite	ne
 2638 0046 0123     		movne	r3, #1
 2639 0048 0023     		moveq	r3, #0
 2640 004a DAB2     		uxtb	r2, r3
 2641              		.loc 1 382 14
 2642 004c 7B68     		ldr	r3, [r7, #4]
 2643 004e 1A70     		strb	r2, [r3]
 383:S2LP_Driver/s2lp_rx.c **** 	*sqi_timeout = GETBIT(proto_reg_val, 6);
 2644              		.loc 1 383 17
 2645 0050 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2646 0052 9B09     		lsrs	r3, r3, #6
 2647 0054 03F00103 		and	r3, r3, #1
 2648 0058 002B     		cmp	r3, #0
 2649 005a 14BF     		ite	ne
 2650 005c 0123     		movne	r3, #1
 2651 005e 0023     		moveq	r3, #0
 2652 0060 DAB2     		uxtb	r2, r3
 2653              		.loc 1 383 15
 2654 0062 3B68     		ldr	r3, [r7]
 2655 0064 1A70     		strb	r2, [r3]
 384:S2LP_Driver/s2lp_rx.c **** 	*pqi_timeout = GETBIT(proto_reg_val, 5);
 2656              		.loc 1 384 17
 2657 0066 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2658 0068 5B09     		lsrs	r3, r3, #5
 2659 006a 03F00103 		and	r3, r3, #1
ARM GAS  /tmp/ccVJDjsH.s 			page 53


 2660 006e 002B     		cmp	r3, #0
 2661 0070 14BF     		ite	ne
 2662 0072 0123     		movne	r3, #1
 2663 0074 0023     		moveq	r3, #0
 2664 0076 DAB2     		uxtb	r2, r3
 2665              		.loc 1 384 15
 2666 0078 3B6A     		ldr	r3, [r7, #32]
 2667 007a 1A70     		strb	r2, [r3]
 385:S2LP_Driver/s2lp_rx.c **** }
 2668              		.loc 1 385 1
 2669 007c 00BF     		nop
 2670 007e 1837     		adds	r7, r7, #24
 2671              		.cfi_def_cfa_offset 8
 2672 0080 BD46     		mov	sp, r7
 2673              		.cfi_def_cfa_register 13
 2674              		@ sp needed
 2675 0082 80BD     		pop	{r7, pc}
 2676              		.cfi_endproc
 2677              	.LFE108:
 2679              		.section	.text.S2LP_RX_GetDataSource,"ax",%progbits
 2680              		.align	1
 2681              		.global	S2LP_RX_GetDataSource
 2682              		.syntax unified
 2683              		.thumb
 2684              		.thumb_func
 2686              	S2LP_RX_GetDataSource:
 2687              	.LFB109:
 386:S2LP_Driver/s2lp_rx.c **** 
 387:S2LP_Driver/s2lp_rx.c **** S2LP_RX_Source S2LP_RX_GetDataSource(S2LP_Handle* handle) {
 2688              		.loc 1 387 59
 2689              		.cfi_startproc
 2690              		@ args = 0, pretend = 0, frame = 16
 2691              		@ frame_needed = 1, uses_anonymous_args = 0
 2692 0000 80B5     		push	{r7, lr}
 2693              		.cfi_def_cfa_offset 8
 2694              		.cfi_offset 7, -8
 2695              		.cfi_offset 14, -4
 2696 0002 84B0     		sub	sp, sp, #16
 2697              		.cfi_def_cfa_offset 24
 2698 0004 00AF     		add	r7, sp, #0
 2699              		.cfi_def_cfa_register 7
 2700 0006 7860     		str	r0, [r7, #4]
 388:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_PCKTCTRL3);
 2701              		.loc 1 388 26
 2702 0008 2E21     		movs	r1, #46
 2703 000a 7868     		ldr	r0, [r7, #4]
 2704 000c FFF7FEFF 		bl	S2LP_ReadRegister
 2705 0010 0346     		mov	r3, r0
 2706 0012 FB73     		strb	r3, [r7, #15]
 389:S2LP_Driver/s2lp_rx.c **** 	return (S2LP_RX_Source) GETBITS(reg_val, 0b11, 4);
 2707              		.loc 1 389 26
 2708 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2709 0016 1B11     		asrs	r3, r3, #4
 2710 0018 03F00303 		and	r3, r3, #3
 2711              		.loc 1 389 9
 2712 001c DBB2     		uxtb	r3, r3
 390:S2LP_Driver/s2lp_rx.c **** }
ARM GAS  /tmp/ccVJDjsH.s 			page 54


 2713              		.loc 1 390 1
 2714 001e 1846     		mov	r0, r3
 2715 0020 1037     		adds	r7, r7, #16
 2716              		.cfi_def_cfa_offset 8
 2717 0022 BD46     		mov	sp, r7
 2718              		.cfi_def_cfa_register 13
 2719              		@ sp needed
 2720 0024 80BD     		pop	{r7, pc}
 2721              		.cfi_endproc
 2722              	.LFE109:
 2724              		.section	.text.S2LP_RX_GetCurrentRSSI,"ax",%progbits
 2725              		.align	1
 2726              		.global	S2LP_RX_GetCurrentRSSI
 2727              		.syntax unified
 2728              		.thumb
 2729              		.thumb_func
 2731              	S2LP_RX_GetCurrentRSSI:
 2732              	.LFB110:
 391:S2LP_Driver/s2lp_rx.c **** 
 392:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetCurrentRSSI(S2LP_Handle* handle) {
 2733              		.loc 1 392 53
 2734              		.cfi_startproc
 2735              		@ args = 0, pretend = 0, frame = 8
 2736              		@ frame_needed = 1, uses_anonymous_args = 0
 2737 0000 80B5     		push	{r7, lr}
 2738              		.cfi_def_cfa_offset 8
 2739              		.cfi_offset 7, -8
 2740              		.cfi_offset 14, -4
 2741 0002 82B0     		sub	sp, sp, #8
 2742              		.cfi_def_cfa_offset 16
 2743 0004 00AF     		add	r7, sp, #0
 2744              		.cfi_def_cfa_register 7
 2745 0006 7860     		str	r0, [r7, #4]
 393:S2LP_Driver/s2lp_rx.c **** 	return S2LP_ReadRegister(handle, S2LP_REG_RSSI_LEVEL_RUN);
 2746              		.loc 1 393 9
 2747 0008 EF21     		movs	r1, #239
 2748 000a 7868     		ldr	r0, [r7, #4]
 2749 000c FFF7FEFF 		bl	S2LP_ReadRegister
 2750 0010 0346     		mov	r3, r0
 394:S2LP_Driver/s2lp_rx.c **** }
 2751              		.loc 1 394 1
 2752 0012 1846     		mov	r0, r3
 2753 0014 0837     		adds	r7, r7, #8
 2754              		.cfi_def_cfa_offset 8
 2755 0016 BD46     		mov	sp, r7
 2756              		.cfi_def_cfa_register 13
 2757              		@ sp needed
 2758 0018 80BD     		pop	{r7, pc}
 2759              		.cfi_endproc
 2760              	.LFE110:
 2762              		.section	.text.S2LP_RX_GetCapturedRSSI,"ax",%progbits
 2763              		.align	1
 2764              		.global	S2LP_RX_GetCapturedRSSI
 2765              		.syntax unified
 2766              		.thumb
 2767              		.thumb_func
 2769              	S2LP_RX_GetCapturedRSSI:
ARM GAS  /tmp/ccVJDjsH.s 			page 55


 2770              	.LFB111:
 395:S2LP_Driver/s2lp_rx.c **** 
 396:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetCapturedRSSI(S2LP_Handle* handle) {
 2771              		.loc 1 396 54
 2772              		.cfi_startproc
 2773              		@ args = 0, pretend = 0, frame = 8
 2774              		@ frame_needed = 1, uses_anonymous_args = 0
 2775 0000 80B5     		push	{r7, lr}
 2776              		.cfi_def_cfa_offset 8
 2777              		.cfi_offset 7, -8
 2778              		.cfi_offset 14, -4
 2779 0002 82B0     		sub	sp, sp, #8
 2780              		.cfi_def_cfa_offset 16
 2781 0004 00AF     		add	r7, sp, #0
 2782              		.cfi_def_cfa_register 7
 2783 0006 7860     		str	r0, [r7, #4]
 397:S2LP_Driver/s2lp_rx.c **** 	return S2LP_ReadRegister(handle, S2LP_REG_RSSI_LEVEL);
 2784              		.loc 1 397 9
 2785 0008 A221     		movs	r1, #162
 2786 000a 7868     		ldr	r0, [r7, #4]
 2787 000c FFF7FEFF 		bl	S2LP_ReadRegister
 2788 0010 0346     		mov	r3, r0
 398:S2LP_Driver/s2lp_rx.c **** }
 2789              		.loc 1 398 1
 2790 0012 1846     		mov	r0, r3
 2791 0014 0837     		adds	r7, r7, #8
 2792              		.cfi_def_cfa_offset 8
 2793 0016 BD46     		mov	sp, r7
 2794              		.cfi_def_cfa_register 13
 2795              		@ sp needed
 2796 0018 80BD     		pop	{r7, pc}
 2797              		.cfi_endproc
 2798              	.LFE111:
 2800              		.section	.text.S2LP_RX_GetCSBlankingState,"ax",%progbits
 2801              		.align	1
 2802              		.global	S2LP_RX_GetCSBlankingState
 2803              		.syntax unified
 2804              		.thumb
 2805              		.thumb_func
 2807              	S2LP_RX_GetCSBlankingState:
 2808              	.LFB112:
 399:S2LP_Driver/s2lp_rx.c **** 
 400:S2LP_Driver/s2lp_rx.c **** bool S2LP_RX_GetCSBlankingState(S2LP_Handle* handle) {
 2809              		.loc 1 400 54
 2810              		.cfi_startproc
 2811              		@ args = 0, pretend = 0, frame = 16
 2812              		@ frame_needed = 1, uses_anonymous_args = 0
 2813 0000 80B5     		push	{r7, lr}
 2814              		.cfi_def_cfa_offset 8
 2815              		.cfi_offset 7, -8
 2816              		.cfi_offset 14, -4
 2817 0002 84B0     		sub	sp, sp, #16
 2818              		.cfi_def_cfa_offset 24
 2819 0004 00AF     		add	r7, sp, #0
 2820              		.cfi_def_cfa_register 7
 2821 0006 7860     		str	r0, [r7, #4]
 401:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_ANT_SELECT_CONF);
ARM GAS  /tmp/ccVJDjsH.s 			page 56


 2822              		.loc 1 401 26
 2823 0008 1F21     		movs	r1, #31
 2824 000a 7868     		ldr	r0, [r7, #4]
 2825 000c FFF7FEFF 		bl	S2LP_ReadRegister
 2826 0010 0346     		mov	r3, r0
 2827 0012 FB73     		strb	r3, [r7, #15]
 402:S2LP_Driver/s2lp_rx.c **** 	return (bool) GETBIT(reg_val, 4);
 2828              		.loc 1 402 9
 2829 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2830 0016 03F01003 		and	r3, r3, #16
 2831 001a 002B     		cmp	r3, #0
 2832 001c 14BF     		ite	ne
 2833 001e 0123     		movne	r3, #1
 2834 0020 0023     		moveq	r3, #0
 2835 0022 DBB2     		uxtb	r3, r3
 403:S2LP_Driver/s2lp_rx.c **** }
 2836              		.loc 1 403 1
 2837 0024 1846     		mov	r0, r3
 2838 0026 1037     		adds	r7, r7, #16
 2839              		.cfi_def_cfa_offset 8
 2840 0028 BD46     		mov	sp, r7
 2841              		.cfi_def_cfa_register 13
 2842              		@ sp needed
 2843 002a 80BD     		pop	{r7, pc}
 2844              		.cfi_endproc
 2845              	.LFE112:
 2847              		.section	.text.S2LP_RX_GetCarrierSenseIndicator,"ax",%progbits
 2848              		.align	1
 2849              		.global	S2LP_RX_GetCarrierSenseIndicator
 2850              		.syntax unified
 2851              		.thumb
 2852              		.thumb_func
 2854              	S2LP_RX_GetCarrierSenseIndicator:
 2855              	.LFB113:
 404:S2LP_Driver/s2lp_rx.c **** 
 405:S2LP_Driver/s2lp_rx.c **** bool S2LP_RX_GetCarrierSenseIndicator(S2LP_Handle* handle) {
 2856              		.loc 1 405 60
 2857              		.cfi_startproc
 2858              		@ args = 0, pretend = 0, frame = 16
 2859              		@ frame_needed = 1, uses_anonymous_args = 0
 2860 0000 80B5     		push	{r7, lr}
 2861              		.cfi_def_cfa_offset 8
 2862              		.cfi_offset 7, -8
 2863              		.cfi_offset 14, -4
 2864 0002 84B0     		sub	sp, sp, #16
 2865              		.cfi_def_cfa_offset 24
 2866 0004 00AF     		add	r7, sp, #0
 2867              		.cfi_def_cfa_register 7
 2868 0006 7860     		str	r0, [r7, #4]
 406:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_LINK_QUALIF1);
 2869              		.loc 1 406 26
 2870 0008 A021     		movs	r1, #160
 2871 000a 7868     		ldr	r0, [r7, #4]
 2872 000c FFF7FEFF 		bl	S2LP_ReadRegister
 2873 0010 0346     		mov	r3, r0
 2874 0012 FB73     		strb	r3, [r7, #15]
 407:S2LP_Driver/s2lp_rx.c **** 	return (bool) GETBIT(reg_val, 7);
ARM GAS  /tmp/ccVJDjsH.s 			page 57


 2875              		.loc 1 407 9
 2876 0014 97F90F30 		ldrsb	r3, [r7, #15]
 2877 0018 DBB2     		uxtb	r3, r3
 2878 001a DB09     		lsrs	r3, r3, #7
 2879 001c DBB2     		uxtb	r3, r3
 408:S2LP_Driver/s2lp_rx.c **** }
 2880              		.loc 1 408 1
 2881 001e 1846     		mov	r0, r3
 2882 0020 1037     		adds	r7, r7, #16
 2883              		.cfi_def_cfa_offset 8
 2884 0022 BD46     		mov	sp, r7
 2885              		.cfi_def_cfa_register 13
 2886              		@ sp needed
 2887 0024 80BD     		pop	{r7, pc}
 2888              		.cfi_endproc
 2889              	.LFE113:
 2891              		.section	.text.S2LP_RX_GetLastPacketSQI,"ax",%progbits
 2892              		.align	1
 2893              		.global	S2LP_RX_GetLastPacketSQI
 2894              		.syntax unified
 2895              		.thumb
 2896              		.thumb_func
 2898              	S2LP_RX_GetLastPacketSQI:
 2899              	.LFB114:
 409:S2LP_Driver/s2lp_rx.c **** 
 410:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetLastPacketSQI(S2LP_Handle* handle,
 411:S2LP_Driver/s2lp_rx.c **** bool* is_for_secondary_sync) {
 2900              		.loc 1 411 30
 2901              		.cfi_startproc
 2902              		@ args = 0, pretend = 0, frame = 16
 2903              		@ frame_needed = 1, uses_anonymous_args = 0
 2904 0000 80B5     		push	{r7, lr}
 2905              		.cfi_def_cfa_offset 8
 2906              		.cfi_offset 7, -8
 2907              		.cfi_offset 14, -4
 2908 0002 84B0     		sub	sp, sp, #16
 2909              		.cfi_def_cfa_offset 24
 2910 0004 00AF     		add	r7, sp, #0
 2911              		.cfi_def_cfa_register 7
 2912 0006 7860     		str	r0, [r7, #4]
 2913 0008 3960     		str	r1, [r7]
 412:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_LINK_QUALIF1);
 2914              		.loc 1 412 26
 2915 000a A021     		movs	r1, #160
 2916 000c 7868     		ldr	r0, [r7, #4]
 2917 000e FFF7FEFF 		bl	S2LP_ReadRegister
 2918 0012 0346     		mov	r3, r0
 2919 0014 FB73     		strb	r3, [r7, #15]
 413:S2LP_Driver/s2lp_rx.c **** 
 414:S2LP_Driver/s2lp_rx.c **** 	if (is_for_secondary_sync != NULL) {
 2920              		.loc 1 414 5
 2921 0016 3B68     		ldr	r3, [r7]
 2922 0018 002B     		cmp	r3, #0
 2923 001a 0AD0     		beq	.L126
 415:S2LP_Driver/s2lp_rx.c **** 		*is_for_secondary_sync = GETBIT(reg_val, 6);
 2924              		.loc 1 415 28
 2925 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  /tmp/ccVJDjsH.s 			page 58


 2926 001e 9B09     		lsrs	r3, r3, #6
 2927 0020 03F00103 		and	r3, r3, #1
 2928 0024 002B     		cmp	r3, #0
 2929 0026 14BF     		ite	ne
 2930 0028 0123     		movne	r3, #1
 2931 002a 0023     		moveq	r3, #0
 2932 002c DAB2     		uxtb	r2, r3
 2933              		.loc 1 415 26
 2934 002e 3B68     		ldr	r3, [r7]
 2935 0030 1A70     		strb	r2, [r3]
 2936              	.L126:
 416:S2LP_Driver/s2lp_rx.c **** 	}
 417:S2LP_Driver/s2lp_rx.c **** 
 418:S2LP_Driver/s2lp_rx.c **** 	return (uint8_t) GETBITS(reg_val, 0b11111, 0);
 2937              		.loc 1 418 9
 2938 0032 FB7B     		ldrb	r3, [r7, #15]
 2939 0034 03F01F03 		and	r3, r3, #31
 2940 0038 DBB2     		uxtb	r3, r3
 419:S2LP_Driver/s2lp_rx.c **** }
 2941              		.loc 1 419 1
 2942 003a 1846     		mov	r0, r3
 2943 003c 1037     		adds	r7, r7, #16
 2944              		.cfi_def_cfa_offset 8
 2945 003e BD46     		mov	sp, r7
 2946              		.cfi_def_cfa_register 13
 2947              		@ sp needed
 2948 0040 80BD     		pop	{r7, pc}
 2949              		.cfi_endproc
 2950              	.LFE114:
 2952              		.section	.text.S2LP_RX_GetLastPacketPQI,"ax",%progbits
 2953              		.align	1
 2954              		.global	S2LP_RX_GetLastPacketPQI
 2955              		.syntax unified
 2956              		.thumb
 2957              		.thumb_func
 2959              	S2LP_RX_GetLastPacketPQI:
 2960              	.LFB115:
 420:S2LP_Driver/s2lp_rx.c **** 
 421:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetLastPacketPQI(S2LP_Handle* handle) {
 2961              		.loc 1 421 55
 2962              		.cfi_startproc
 2963              		@ args = 0, pretend = 0, frame = 8
 2964              		@ frame_needed = 1, uses_anonymous_args = 0
 2965 0000 80B5     		push	{r7, lr}
 2966              		.cfi_def_cfa_offset 8
 2967              		.cfi_offset 7, -8
 2968              		.cfi_offset 14, -4
 2969 0002 82B0     		sub	sp, sp, #8
 2970              		.cfi_def_cfa_offset 16
 2971 0004 00AF     		add	r7, sp, #0
 2972              		.cfi_def_cfa_register 7
 2973 0006 7860     		str	r0, [r7, #4]
 422:S2LP_Driver/s2lp_rx.c **** 	return S2LP_ReadRegister(handle, S2LP_REG_LINK_QUALIF2);
 2974              		.loc 1 422 9
 2975 0008 9F21     		movs	r1, #159
 2976 000a 7868     		ldr	r0, [r7, #4]
 2977 000c FFF7FEFF 		bl	S2LP_ReadRegister
ARM GAS  /tmp/ccVJDjsH.s 			page 59


 2978 0010 0346     		mov	r3, r0
 423:S2LP_Driver/s2lp_rx.c **** }
 2979              		.loc 1 423 1
 2980 0012 1846     		mov	r0, r3
 2981 0014 0837     		adds	r7, r7, #8
 2982              		.cfi_def_cfa_offset 8
 2983 0016 BD46     		mov	sp, r7
 2984              		.cfi_def_cfa_register 13
 2985              		@ sp needed
 2986 0018 80BD     		pop	{r7, pc}
 2987              		.cfi_endproc
 2988              	.LFE115:
 2990              		.section	.text.S2LP_RX_GetPQIThreshold,"ax",%progbits
 2991              		.align	1
 2992              		.global	S2LP_RX_GetPQIThreshold
 2993              		.syntax unified
 2994              		.thumb
 2995              		.thumb_func
 2997              	S2LP_RX_GetPQIThreshold:
 2998              	.LFB116:
 424:S2LP_Driver/s2lp_rx.c **** 
 425:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetPQIThreshold(S2LP_Handle* handle) {
 2999              		.loc 1 425 54
 3000              		.cfi_startproc
 3001              		@ args = 0, pretend = 0, frame = 16
 3002              		@ frame_needed = 1, uses_anonymous_args = 0
 3003 0000 80B5     		push	{r7, lr}
 3004              		.cfi_def_cfa_offset 8
 3005              		.cfi_offset 7, -8
 3006              		.cfi_offset 14, -4
 3007 0002 84B0     		sub	sp, sp, #16
 3008              		.cfi_def_cfa_offset 24
 3009 0004 00AF     		add	r7, sp, #0
 3010              		.cfi_def_cfa_register 7
 3011 0006 7860     		str	r0, [r7, #4]
 426:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_QI);
 3012              		.loc 1 426 26
 3013 0008 3721     		movs	r1, #55
 3014 000a 7868     		ldr	r0, [r7, #4]
 3015 000c FFF7FEFF 		bl	S2LP_ReadRegister
 3016 0010 0346     		mov	r3, r0
 3017 0012 FB73     		strb	r3, [r7, #15]
 427:S2LP_Driver/s2lp_rx.c **** 	return (uint8_t) GETBITS(reg_val, 0b1111, 1);
 3018              		.loc 1 427 19
 3019 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3020 0016 5B10     		asrs	r3, r3, #1
 3021              		.loc 1 427 9
 3022 0018 DBB2     		uxtb	r3, r3
 3023 001a 03F00F03 		and	r3, r3, #15
 3024 001e DBB2     		uxtb	r3, r3
 428:S2LP_Driver/s2lp_rx.c **** }
 3025              		.loc 1 428 1
 3026 0020 1846     		mov	r0, r3
 3027 0022 1037     		adds	r7, r7, #16
 3028              		.cfi_def_cfa_offset 8
 3029 0024 BD46     		mov	sp, r7
 3030              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccVJDjsH.s 			page 60


 3031              		@ sp needed
 3032 0026 80BD     		pop	{r7, pc}
 3033              		.cfi_endproc
 3034              	.LFE116:
 3036              		.section	.text.S2LP_RX_GetSQICheckStatus,"ax",%progbits
 3037              		.align	1
 3038              		.global	S2LP_RX_GetSQICheckStatus
 3039              		.syntax unified
 3040              		.thumb
 3041              		.thumb_func
 3043              	S2LP_RX_GetSQICheckStatus:
 3044              	.LFB117:
 429:S2LP_Driver/s2lp_rx.c **** 
 430:S2LP_Driver/s2lp_rx.c **** bool S2LP_RX_GetSQICheckStatus(S2LP_Handle* handle) {
 3045              		.loc 1 430 53
 3046              		.cfi_startproc
 3047              		@ args = 0, pretend = 0, frame = 16
 3048              		@ frame_needed = 1, uses_anonymous_args = 0
 3049 0000 80B5     		push	{r7, lr}
 3050              		.cfi_def_cfa_offset 8
 3051              		.cfi_offset 7, -8
 3052              		.cfi_offset 14, -4
 3053 0002 84B0     		sub	sp, sp, #16
 3054              		.cfi_def_cfa_offset 24
 3055 0004 00AF     		add	r7, sp, #0
 3056              		.cfi_def_cfa_register 7
 3057 0006 7860     		str	r0, [r7, #4]
 431:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_QI);
 3058              		.loc 1 431 26
 3059 0008 3721     		movs	r1, #55
 3060 000a 7868     		ldr	r0, [r7, #4]
 3061 000c FFF7FEFF 		bl	S2LP_ReadRegister
 3062 0010 0346     		mov	r3, r0
 3063 0012 FB73     		strb	r3, [r7, #15]
 432:S2LP_Driver/s2lp_rx.c **** 	return (bool) GETBIT(reg_val, 0);
 3064              		.loc 1 432 16
 3065 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3066 0016 03F00103 		and	r3, r3, #1
 3067              		.loc 1 432 9
 3068 001a 002B     		cmp	r3, #0
 3069 001c 14BF     		ite	ne
 3070 001e 0123     		movne	r3, #1
 3071 0020 0023     		moveq	r3, #0
 3072 0022 DBB2     		uxtb	r3, r3
 433:S2LP_Driver/s2lp_rx.c **** }
 3073              		.loc 1 433 1
 3074 0024 1846     		mov	r0, r3
 3075 0026 1037     		adds	r7, r7, #16
 3076              		.cfi_def_cfa_offset 8
 3077 0028 BD46     		mov	sp, r7
 3078              		.cfi_def_cfa_register 13
 3079              		@ sp needed
 3080 002a 80BD     		pop	{r7, pc}
 3081              		.cfi_endproc
 3082              	.LFE117:
 3084              		.section	.text.S2LP_RX_GetSQIThreshold,"ax",%progbits
 3085              		.align	1
ARM GAS  /tmp/ccVJDjsH.s 			page 61


 3086              		.global	S2LP_RX_GetSQIThreshold
 3087              		.syntax unified
 3088              		.thumb
 3089              		.thumb_func
 3091              	S2LP_RX_GetSQIThreshold:
 3092              	.LFB118:
 434:S2LP_Driver/s2lp_rx.c **** 
 435:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetSQIThreshold(S2LP_Handle* handle) {
 3093              		.loc 1 435 54
 3094              		.cfi_startproc
 3095              		@ args = 0, pretend = 0, frame = 16
 3096              		@ frame_needed = 1, uses_anonymous_args = 0
 3097 0000 80B5     		push	{r7, lr}
 3098              		.cfi_def_cfa_offset 8
 3099              		.cfi_offset 7, -8
 3100              		.cfi_offset 14, -4
 3101 0002 84B0     		sub	sp, sp, #16
 3102              		.cfi_def_cfa_offset 24
 3103 0004 00AF     		add	r7, sp, #0
 3104              		.cfi_def_cfa_register 7
 3105 0006 7860     		str	r0, [r7, #4]
 436:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_QI);
 3106              		.loc 1 436 26
 3107 0008 3721     		movs	r1, #55
 3108 000a 7868     		ldr	r0, [r7, #4]
 3109 000c FFF7FEFF 		bl	S2LP_ReadRegister
 3110 0010 0346     		mov	r3, r0
 3111 0012 FB73     		strb	r3, [r7, #15]
 437:S2LP_Driver/s2lp_rx.c **** 	return (uint8_t) GETBITS(reg_val, 0b111, 5);
 3112              		.loc 1 437 9
 3113 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3114 0016 5B09     		lsrs	r3, r3, #5
 3115 0018 DBB2     		uxtb	r3, r3
 438:S2LP_Driver/s2lp_rx.c **** }
 3116              		.loc 1 438 1
 3117 001a 1846     		mov	r0, r3
 3118 001c 1037     		adds	r7, r7, #16
 3119              		.cfi_def_cfa_offset 8
 3120 001e BD46     		mov	sp, r7
 3121              		.cfi_def_cfa_register 13
 3122              		@ sp needed
 3123 0020 80BD     		pop	{r7, pc}
 3124              		.cfi_endproc
 3125              	.LFE118:
 3127              		.section	.text.S2LP_RX_GetFIFOAlmostFullThreshold,"ax",%progbits
 3128              		.align	1
 3129              		.global	S2LP_RX_GetFIFOAlmostFullThreshold
 3130              		.syntax unified
 3131              		.thumb
 3132              		.thumb_func
 3134              	S2LP_RX_GetFIFOAlmostFullThreshold:
 3135              	.LFB119:
 439:S2LP_Driver/s2lp_rx.c **** 
 440:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetFIFOAlmostFullThreshold(S2LP_Handle* handle) {
 3136              		.loc 1 440 65
 3137              		.cfi_startproc
 3138              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccVJDjsH.s 			page 62


 3139              		@ frame_needed = 1, uses_anonymous_args = 0
 3140 0000 80B5     		push	{r7, lr}
 3141              		.cfi_def_cfa_offset 8
 3142              		.cfi_offset 7, -8
 3143              		.cfi_offset 14, -4
 3144 0002 84B0     		sub	sp, sp, #16
 3145              		.cfi_def_cfa_offset 24
 3146 0004 00AF     		add	r7, sp, #0
 3147              		.cfi_def_cfa_register 7
 3148 0006 7860     		str	r0, [r7, #4]
 441:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_FIFO_CONFIG3);
 3149              		.loc 1 441 26
 3150 0008 3C21     		movs	r1, #60
 3151 000a 7868     		ldr	r0, [r7, #4]
 3152 000c FFF7FEFF 		bl	S2LP_ReadRegister
 3153 0010 0346     		mov	r3, r0
 3154 0012 FB73     		strb	r3, [r7, #15]
 442:S2LP_Driver/s2lp_rx.c **** 	return (uint8_t) GETBITS(reg_val, 0b1111111, 0);
 3155              		.loc 1 442 9
 3156 0014 FB7B     		ldrb	r3, [r7, #15]
 3157 0016 03F07F03 		and	r3, r3, #127
 3158 001a DBB2     		uxtb	r3, r3
 443:S2LP_Driver/s2lp_rx.c **** }
 3159              		.loc 1 443 1
 3160 001c 1846     		mov	r0, r3
 3161 001e 1037     		adds	r7, r7, #16
 3162              		.cfi_def_cfa_offset 8
 3163 0020 BD46     		mov	sp, r7
 3164              		.cfi_def_cfa_register 13
 3165              		@ sp needed
 3166 0022 80BD     		pop	{r7, pc}
 3167              		.cfi_endproc
 3168              	.LFE119:
 3170              		.section	.text.S2LP_RX_GetFIFOAlmostEmptyThreshold,"ax",%progbits
 3171              		.align	1
 3172              		.global	S2LP_RX_GetFIFOAlmostEmptyThreshold
 3173              		.syntax unified
 3174              		.thumb
 3175              		.thumb_func
 3177              	S2LP_RX_GetFIFOAlmostEmptyThreshold:
 3178              	.LFB120:
 444:S2LP_Driver/s2lp_rx.c **** 
 445:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetFIFOAlmostEmptyThreshold(S2LP_Handle* handle) {
 3179              		.loc 1 445 66
 3180              		.cfi_startproc
 3181              		@ args = 0, pretend = 0, frame = 16
 3182              		@ frame_needed = 1, uses_anonymous_args = 0
 3183 0000 80B5     		push	{r7, lr}
 3184              		.cfi_def_cfa_offset 8
 3185              		.cfi_offset 7, -8
 3186              		.cfi_offset 14, -4
 3187 0002 84B0     		sub	sp, sp, #16
 3188              		.cfi_def_cfa_offset 24
 3189 0004 00AF     		add	r7, sp, #0
 3190              		.cfi_def_cfa_register 7
 3191 0006 7860     		str	r0, [r7, #4]
 446:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_FIFO_CONFIG2);
ARM GAS  /tmp/ccVJDjsH.s 			page 63


 3192              		.loc 1 446 26
 3193 0008 3D21     		movs	r1, #61
 3194 000a 7868     		ldr	r0, [r7, #4]
 3195 000c FFF7FEFF 		bl	S2LP_ReadRegister
 3196 0010 0346     		mov	r3, r0
 3197 0012 FB73     		strb	r3, [r7, #15]
 447:S2LP_Driver/s2lp_rx.c **** 	return (uint8_t) GETBITS(reg_val, 0b1111111, 0);
 3198              		.loc 1 447 9
 3199 0014 FB7B     		ldrb	r3, [r7, #15]
 3200 0016 03F07F03 		and	r3, r3, #127
 3201 001a DBB2     		uxtb	r3, r3
 448:S2LP_Driver/s2lp_rx.c **** }
 3202              		.loc 1 448 1
 3203 001c 1846     		mov	r0, r3
 3204 001e 1037     		adds	r7, r7, #16
 3205              		.cfi_def_cfa_offset 8
 3206 0020 BD46     		mov	sp, r7
 3207              		.cfi_def_cfa_register 13
 3208              		@ sp needed
 3209 0022 80BD     		pop	{r7, pc}
 3210              		.cfi_endproc
 3211              	.LFE120:
 3213              		.section	.text.S2LP_RX_GetFIFOCount,"ax",%progbits
 3214              		.align	1
 3215              		.global	S2LP_RX_GetFIFOCount
 3216              		.syntax unified
 3217              		.thumb
 3218              		.thumb_func
 3220              	S2LP_RX_GetFIFOCount:
 3221              	.LFB121:
 449:S2LP_Driver/s2lp_rx.c **** 
 450:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetFIFOCount(S2LP_Handle* handle) {
 3222              		.loc 1 450 51
 3223              		.cfi_startproc
 3224              		@ args = 0, pretend = 0, frame = 8
 3225              		@ frame_needed = 1, uses_anonymous_args = 0
 3226 0000 80B5     		push	{r7, lr}
 3227              		.cfi_def_cfa_offset 8
 3228              		.cfi_offset 7, -8
 3229              		.cfi_offset 14, -4
 3230 0002 82B0     		sub	sp, sp, #8
 3231              		.cfi_def_cfa_offset 16
 3232 0004 00AF     		add	r7, sp, #0
 3233              		.cfi_def_cfa_register 7
 3234 0006 7860     		str	r0, [r7, #4]
 451:S2LP_Driver/s2lp_rx.c **** 	return S2LP_ReadRegister(handle, S2LP_REG_RX_FIFO_STATUS);
 3235              		.loc 1 451 9
 3236 0008 9021     		movs	r1, #144
 3237 000a 7868     		ldr	r0, [r7, #4]
 3238 000c FFF7FEFF 		bl	S2LP_ReadRegister
 3239 0010 0346     		mov	r3, r0
 452:S2LP_Driver/s2lp_rx.c **** }
 3240              		.loc 1 452 1
 3241 0012 1846     		mov	r0, r3
 3242 0014 0837     		adds	r7, r7, #8
 3243              		.cfi_def_cfa_offset 8
 3244 0016 BD46     		mov	sp, r7
ARM GAS  /tmp/ccVJDjsH.s 			page 64


 3245              		.cfi_def_cfa_register 13
 3246              		@ sp needed
 3247 0018 80BD     		pop	{r7, pc}
 3248              		.cfi_endproc
 3249              	.LFE121:
 3251              		.section	.text.S2LP_RX_GetLastPacketNACK,"ax",%progbits
 3252              		.align	1
 3253              		.global	S2LP_RX_GetLastPacketNACK
 3254              		.syntax unified
 3255              		.thumb
 3256              		.thumb_func
 3258              	S2LP_RX_GetLastPacketNACK:
 3259              	.LFB122:
 453:S2LP_Driver/s2lp_rx.c **** 
 454:S2LP_Driver/s2lp_rx.c **** bool S2LP_RX_GetLastPacketNACK(S2LP_Handle* handle) {
 3260              		.loc 1 454 53
 3261              		.cfi_startproc
 3262              		@ args = 0, pretend = 0, frame = 16
 3263              		@ frame_needed = 1, uses_anonymous_args = 0
 3264 0000 80B5     		push	{r7, lr}
 3265              		.cfi_def_cfa_offset 8
 3266              		.cfi_offset 7, -8
 3267              		.cfi_offset 14, -4
 3268 0002 84B0     		sub	sp, sp, #16
 3269              		.cfi_def_cfa_offset 24
 3270 0004 00AF     		add	r7, sp, #0
 3271              		.cfi_def_cfa_register 7
 3272 0006 7860     		str	r0, [r7, #4]
 455:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_RX_PCKT_INFO);
 3273              		.loc 1 455 26
 3274 0008 9D21     		movs	r1, #157
 3275 000a 7868     		ldr	r0, [r7, #4]
 3276 000c FFF7FEFF 		bl	S2LP_ReadRegister
 3277 0010 0346     		mov	r3, r0
 3278 0012 FB73     		strb	r3, [r7, #15]
 456:S2LP_Driver/s2lp_rx.c **** 	return GETBIT(reg_val, 2);
 3279              		.loc 1 456 9
 3280 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3281 0016 9B08     		lsrs	r3, r3, #2
 3282 0018 03F00103 		and	r3, r3, #1
 3283 001c 002B     		cmp	r3, #0
 3284 001e 14BF     		ite	ne
 3285 0020 0123     		movne	r3, #1
 3286 0022 0023     		moveq	r3, #0
 3287 0024 DBB2     		uxtb	r3, r3
 457:S2LP_Driver/s2lp_rx.c **** }
 3288              		.loc 1 457 1
 3289 0026 1846     		mov	r0, r3
 3290 0028 1037     		adds	r7, r7, #16
 3291              		.cfi_def_cfa_offset 8
 3292 002a BD46     		mov	sp, r7
 3293              		.cfi_def_cfa_register 13
 3294              		@ sp needed
 3295 002c 80BD     		pop	{r7, pc}
 3296              		.cfi_endproc
 3297              	.LFE122:
 3299              		.section	.text.S2LP_RX_GetSequenceNumber,"ax",%progbits
ARM GAS  /tmp/ccVJDjsH.s 			page 65


 3300              		.align	1
 3301              		.global	S2LP_RX_GetSequenceNumber
 3302              		.syntax unified
 3303              		.thumb
 3304              		.thumb_func
 3306              	S2LP_RX_GetSequenceNumber:
 3307              	.LFB123:
 458:S2LP_Driver/s2lp_rx.c **** 
 459:S2LP_Driver/s2lp_rx.c **** uint8_t S2LP_RX_GetSequenceNumber(S2LP_Handle* handle) {
 3308              		.loc 1 459 56
 3309              		.cfi_startproc
 3310              		@ args = 0, pretend = 0, frame = 16
 3311              		@ frame_needed = 1, uses_anonymous_args = 0
 3312 0000 80B5     		push	{r7, lr}
 3313              		.cfi_def_cfa_offset 8
 3314              		.cfi_offset 7, -8
 3315              		.cfi_offset 14, -4
 3316 0002 84B0     		sub	sp, sp, #16
 3317              		.cfi_def_cfa_offset 24
 3318 0004 00AF     		add	r7, sp, #0
 3319              		.cfi_def_cfa_register 7
 3320 0006 7860     		str	r0, [r7, #4]
 460:S2LP_Driver/s2lp_rx.c **** 	uint8_t const reg_val = S2LP_ReadRegister(handle, S2LP_REG_RX_PCKT_INFO);
 3321              		.loc 1 460 26
 3322 0008 9D21     		movs	r1, #157
 3323 000a 7868     		ldr	r0, [r7, #4]
 3324 000c FFF7FEFF 		bl	S2LP_ReadRegister
 3325 0010 0346     		mov	r3, r0
 3326 0012 FB73     		strb	r3, [r7, #15]
 461:S2LP_Driver/s2lp_rx.c **** 	return (uint8_t) GETBITS(reg_val, 0b11, 0);
 3327              		.loc 1 461 9
 3328 0014 FB7B     		ldrb	r3, [r7, #15]
 3329 0016 03F00303 		and	r3, r3, #3
 3330 001a DBB2     		uxtb	r3, r3
 462:S2LP_Driver/s2lp_rx.c **** }
 3331              		.loc 1 462 1
 3332 001c 1846     		mov	r0, r3
 3333 001e 1037     		adds	r7, r7, #16
 3334              		.cfi_def_cfa_offset 8
 3335 0020 BD46     		mov	sp, r7
 3336              		.cfi_def_cfa_register 13
 3337              		@ sp needed
 3338 0022 80BD     		pop	{r7, pc}
 3339              		.cfi_endproc
 3340              	.LFE123:
 3342              		.text
 3343              	.Letext0:
 3344              		.file 2 "S2LP_Driver/s2lp_constants.h"
 3345              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3346              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3347              		.file 5 "../../../lib/libhalglue/bshal/bshal_spim.h"
 3348              		.file 6 "S2LP_Driver/s2lp_mcu_interface.h"
 3349              		.file 7 "S2LP_Driver/s2lp.h"
ARM GAS  /tmp/ccVJDjsH.s 			page 66


DEFINED SYMBOLS
                            *ABS*:0000000000000000 s2lp_rx.c
     /tmp/ccVJDjsH.s:23     .rodata.S2LP_CHANNEL_FILTER_WORDS:0000000000000000 S2LP_CHANNEL_FILTER_WORDS
     /tmp/ccVJDjsH.s:20     .rodata.S2LP_CHANNEL_FILTER_WORDS:0000000000000000 $d
     /tmp/ccVJDjsH.s:205    .text.S2LP_RX_SetRSSIThreshold:0000000000000000 $t
     /tmp/ccVJDjsH.s:211    .text.S2LP_RX_SetRSSIThreshold:0000000000000000 S2LP_RX_SetRSSIThreshold
     /tmp/ccVJDjsH.s:246    .text.S2LP_RX_SetAFCFastLoopGain:0000000000000000 $t
     /tmp/ccVJDjsH.s:252    .text.S2LP_RX_SetAFCFastLoopGain:0000000000000000 S2LP_RX_SetAFCFastLoopGain
     /tmp/ccVJDjsH.s:313    .text.S2LP_RX_SetAFCSlowLoopGain:0000000000000000 $t
     /tmp/ccVJDjsH.s:319    .text.S2LP_RX_SetAFCSlowLoopGain:0000000000000000 S2LP_RX_SetAFCSlowLoopGain
     /tmp/ccVJDjsH.s:380    .text.S2LP_RX_SetAFCFastPeriod:0000000000000000 $t
     /tmp/ccVJDjsH.s:386    .text.S2LP_RX_SetAFCFastPeriod:0000000000000000 S2LP_RX_SetAFCFastPeriod
     /tmp/ccVJDjsH.s:421    .text.S2LP_RX_SetAFCMode:0000000000000000 $t
     /tmp/ccVJDjsH.s:427    .text.S2LP_RX_SetAFCMode:0000000000000000 S2LP_RX_SetAFCMode
     /tmp/ccVJDjsH.s:490    .text.S2LP_RX_SetAFCState:0000000000000000 $t
     /tmp/ccVJDjsH.s:496    .text.S2LP_RX_SetAFCState:0000000000000000 S2LP_RX_SetAFCState
     /tmp/ccVJDjsH.s:552    .text.S2LP_RX_SetAFCFreezeOnSyncState:0000000000000000 $t
     /tmp/ccVJDjsH.s:558    .text.S2LP_RX_SetAFCFreezeOnSyncState:0000000000000000 S2LP_RX_SetAFCFreezeOnSyncState
     /tmp/ccVJDjsH.s:614    .text.S2LP_RX_SetAGCHighThreshold:0000000000000000 $t
     /tmp/ccVJDjsH.s:620    .text.S2LP_RX_SetAGCHighThreshold:0000000000000000 S2LP_RX_SetAGCHighThreshold
     /tmp/ccVJDjsH.s:681    .text.S2LP_RX_SetAGCLowThreshold:0000000000000000 $t
     /tmp/ccVJDjsH.s:687    .text.S2LP_RX_SetAGCLowThreshold:0000000000000000 S2LP_RX_SetAGCLowThreshold
     /tmp/ccVJDjsH.s:776    .text.S2LP_RX_SetAGCMeasureTimeRaw:0000000000000000 $t
     /tmp/ccVJDjsH.s:782    .text.S2LP_RX_SetAGCMeasureTimeRaw:0000000000000000 S2LP_RX_SetAGCMeasureTimeRaw
     /tmp/ccVJDjsH.s:843    .text.S2LP_RX_SetAGCHoldTimeRaw:0000000000000000 $t
     /tmp/ccVJDjsH.s:849    .text.S2LP_RX_SetAGCHoldTimeRaw:0000000000000000 S2LP_RX_SetAGCHoldTimeRaw
     /tmp/ccVJDjsH.s:910    .text.S2LP_RX_SetAGCState:0000000000000000 $t
     /tmp/ccVJDjsH.s:916    .text.S2LP_RX_SetAGCState:0000000000000000 S2LP_RX_SetAGCState
     /tmp/ccVJDjsH.s:972    .text.S2LP_RX_SetAGCFreezeOnSyncState:0000000000000000 $t
     /tmp/ccVJDjsH.s:978    .text.S2LP_RX_SetAGCFreezeOnSyncState:0000000000000000 S2LP_RX_SetAGCFreezeOnSyncState
     /tmp/ccVJDjsH.s:1034   .text.S2LP_RX_SetChannelFilterValueRaw:0000000000000000 $t
     /tmp/ccVJDjsH.s:1040   .text.S2LP_RX_SetChannelFilterValueRaw:0000000000000000 S2LP_RX_SetChannelFilterValueRaw
     /tmp/ccVJDjsH.s:1096   .text.S2LP_RX_SetCarrierSenseMode:0000000000000000 $t
     /tmp/ccVJDjsH.s:1102   .text.S2LP_RX_SetCarrierSenseMode:0000000000000000 S2LP_RX_SetCarrierSenseMode
     /tmp/ccVJDjsH.s:1157   .text.S2LP_RX_SetTimerStopConfig:0000000000000000 $t
     /tmp/ccVJDjsH.s:1163   .text.S2LP_RX_SetTimerStopConfig:0000000000000000 S2LP_RX_SetTimerStopConfig
     /tmp/ccVJDjsH.s:1283   .text.S2LP_RX_SetCSBlankingState:0000000000000000 $t
     /tmp/ccVJDjsH.s:1289   .text.S2LP_RX_SetCSBlankingState:0000000000000000 S2LP_RX_SetCSBlankingState
     /tmp/ccVJDjsH.s:1345   .text.S2LP_RX_SetDataSource:0000000000000000 $t
     /tmp/ccVJDjsH.s:1351   .text.S2LP_RX_SetDataSource:0000000000000000 S2LP_RX_SetDataSource
     /tmp/ccVJDjsH.s:1406   .text.S2LP_RX_SetFIFOAlmostFullThreshold:0000000000000000 $t
     /tmp/ccVJDjsH.s:1412   .text.S2LP_RX_SetFIFOAlmostFullThreshold:0000000000000000 S2LP_RX_SetFIFOAlmostFullThreshold
     /tmp/ccVJDjsH.s:1465   .text.S2LP_RX_SetFIFOAlmostEmptyThreshold:0000000000000000 $t
     /tmp/ccVJDjsH.s:1471   .text.S2LP_RX_SetFIFOAlmostEmptyThreshold:0000000000000000 S2LP_RX_SetFIFOAlmostEmptyThreshold
     /tmp/ccVJDjsH.s:1528   .text.S2LP_RX_CalculateAGCMeasureTime:0000000000000000 $t
     /tmp/ccVJDjsH.s:1534   .text.S2LP_RX_CalculateAGCMeasureTime:0000000000000000 S2LP_RX_CalculateAGCMeasureTime
     /tmp/ccVJDjsH.s:1609   .text.S2LP_RX_CalculateAGCMeasureTime:0000000000000088 $d
     /tmp/ccVJDjsH.s:1614   .text.S2LP_RX_CalculateAGCHoldTime:0000000000000000 $t
     /tmp/ccVJDjsH.s:1620   .text.S2LP_RX_CalculateAGCHoldTime:0000000000000000 S2LP_RX_CalculateAGCHoldTime
     /tmp/ccVJDjsH.s:1676   .text.S2LP_RX_CalculateAGCHoldTime:0000000000000058 $d
     /tmp/ccVJDjsH.s:1681   .text.S2LP_RX_CalculateChannelFilterBandwidth:0000000000000000 $t
     /tmp/ccVJDjsH.s:1687   .text.S2LP_RX_CalculateChannelFilterBandwidth:0000000000000000 S2LP_RX_CalculateChannelFilterBandwidth
     /tmp/ccVJDjsH.s:1755   .text.S2LP_RX_CalculateChannelFilterBandwidth:0000000000000068 $d
     /tmp/ccVJDjsH.s:1762   .text.S2LP_RX_GetRSSIThreshold:0000000000000000 $t
     /tmp/ccVJDjsH.s:1768   .text.S2LP_RX_GetRSSIThreshold:0000000000000000 S2LP_RX_GetRSSIThreshold
     /tmp/ccVJDjsH.s:1800   .text.S2LP_RX_GetAFCFastLoopGain:0000000000000000 $t
     /tmp/ccVJDjsH.s:1806   .text.S2LP_RX_GetAFCFastLoopGain:0000000000000000 S2LP_RX_GetAFCFastLoopGain
ARM GAS  /tmp/ccVJDjsH.s 			page 67


     /tmp/ccVJDjsH.s:1843   .text.S2LP_RX_GetAFCSlowLoopGain:0000000000000000 $t
     /tmp/ccVJDjsH.s:1849   .text.S2LP_RX_GetAFCSlowLoopGain:0000000000000000 S2LP_RX_GetAFCSlowLoopGain
     /tmp/ccVJDjsH.s:1886   .text.S2LP_RX_GetAFCFastPeriod:0000000000000000 $t
     /tmp/ccVJDjsH.s:1892   .text.S2LP_RX_GetAFCFastPeriod:0000000000000000 S2LP_RX_GetAFCFastPeriod
     /tmp/ccVJDjsH.s:1924   .text.S2LP_RX_GetAFCMode:0000000000000000 $t
     /tmp/ccVJDjsH.s:1930   .text.S2LP_RX_GetAFCMode:0000000000000000 S2LP_RX_GetAFCMode
     /tmp/ccVJDjsH.s:1969   .text.S2LP_RX_GetAFCState:0000000000000000 $t
     /tmp/ccVJDjsH.s:1975   .text.S2LP_RX_GetAFCState:0000000000000000 S2LP_RX_GetAFCState
     /tmp/ccVJDjsH.s:2016   .text.S2LP_RX_GetAFCFreezeOnSyncState:0000000000000000 $t
     /tmp/ccVJDjsH.s:2022   .text.S2LP_RX_GetAFCFreezeOnSyncState:0000000000000000 S2LP_RX_GetAFCFreezeOnSyncState
     /tmp/ccVJDjsH.s:2060   .text.S2LP_RX_GetAGCHighThreshold:0000000000000000 $t
     /tmp/ccVJDjsH.s:2066   .text.S2LP_RX_GetAGCHighThreshold:0000000000000000 S2LP_RX_GetAGCHighThreshold
     /tmp/ccVJDjsH.s:2103   .text.S2LP_RX_GetAGCLowThreshold:0000000000000000 $t
     /tmp/ccVJDjsH.s:2109   .text.S2LP_RX_GetAGCLowThreshold:0000000000000000 S2LP_RX_GetAGCLowThreshold
     /tmp/ccVJDjsH.s:2167   .text.S2LP_RX_GetAGCMeasureTimeRaw:0000000000000000 $t
     /tmp/ccVJDjsH.s:2173   .text.S2LP_RX_GetAGCMeasureTimeRaw:0000000000000000 S2LP_RX_GetAGCMeasureTimeRaw
     /tmp/ccVJDjsH.s:2210   .text.S2LP_RX_GetAGCHoldTimeRaw:0000000000000000 $t
     /tmp/ccVJDjsH.s:2216   .text.S2LP_RX_GetAGCHoldTimeRaw:0000000000000000 S2LP_RX_GetAGCHoldTimeRaw
     /tmp/ccVJDjsH.s:2253   .text.S2LP_RX_GetAGCState:0000000000000000 $t
     /tmp/ccVJDjsH.s:2259   .text.S2LP_RX_GetAGCState:0000000000000000 S2LP_RX_GetAGCState
     /tmp/ccVJDjsH.s:2297   .text.S2LP_RX_GetAGCFreezeOnSyncState:0000000000000000 $t
     /tmp/ccVJDjsH.s:2303   .text.S2LP_RX_GetAGCFreezeOnSyncState:0000000000000000 S2LP_RX_GetAGCFreezeOnSyncState
     /tmp/ccVJDjsH.s:2344   .text.S2LP_RX_GetChannelFilterMantissa:0000000000000000 $t
     /tmp/ccVJDjsH.s:2350   .text.S2LP_RX_GetChannelFilterMantissa:0000000000000000 S2LP_RX_GetChannelFilterMantissa
     /tmp/ccVJDjsH.s:2387   .text.S2LP_RX_GetChannelFilterExponent:0000000000000000 $t
     /tmp/ccVJDjsH.s:2393   .text.S2LP_RX_GetChannelFilterExponent:0000000000000000 S2LP_RX_GetChannelFilterExponent
     /tmp/ccVJDjsH.s:2430   .text.S2LP_RX_GetChannelFilterValueRaw:0000000000000000 $t
     /tmp/ccVJDjsH.s:2436   .text.S2LP_RX_GetChannelFilterValueRaw:0000000000000000 S2LP_RX_GetChannelFilterValueRaw
     /tmp/ccVJDjsH.s:2485   .text.S2LP_RX_GetChannelFilterValue:0000000000000000 $t
     /tmp/ccVJDjsH.s:2491   .text.S2LP_RX_GetChannelFilterValue:0000000000000000 S2LP_RX_GetChannelFilterValue
     /tmp/ccVJDjsH.s:2539   .text.S2LP_RX_GetCarrierSenseMode:0000000000000000 $t
     /tmp/ccVJDjsH.s:2545   .text.S2LP_RX_GetCarrierSenseMode:0000000000000000 S2LP_RX_GetCarrierSenseMode
     /tmp/ccVJDjsH.s:2584   .text.S2LP_RX_GetTimerStopConfig:0000000000000000 $t
     /tmp/ccVJDjsH.s:2590   .text.S2LP_RX_GetTimerStopConfig:0000000000000000 S2LP_RX_GetTimerStopConfig
     /tmp/ccVJDjsH.s:2680   .text.S2LP_RX_GetDataSource:0000000000000000 $t
     /tmp/ccVJDjsH.s:2686   .text.S2LP_RX_GetDataSource:0000000000000000 S2LP_RX_GetDataSource
     /tmp/ccVJDjsH.s:2725   .text.S2LP_RX_GetCurrentRSSI:0000000000000000 $t
     /tmp/ccVJDjsH.s:2731   .text.S2LP_RX_GetCurrentRSSI:0000000000000000 S2LP_RX_GetCurrentRSSI
     /tmp/ccVJDjsH.s:2763   .text.S2LP_RX_GetCapturedRSSI:0000000000000000 $t
     /tmp/ccVJDjsH.s:2769   .text.S2LP_RX_GetCapturedRSSI:0000000000000000 S2LP_RX_GetCapturedRSSI
     /tmp/ccVJDjsH.s:2801   .text.S2LP_RX_GetCSBlankingState:0000000000000000 $t
     /tmp/ccVJDjsH.s:2807   .text.S2LP_RX_GetCSBlankingState:0000000000000000 S2LP_RX_GetCSBlankingState
     /tmp/ccVJDjsH.s:2848   .text.S2LP_RX_GetCarrierSenseIndicator:0000000000000000 $t
     /tmp/ccVJDjsH.s:2854   .text.S2LP_RX_GetCarrierSenseIndicator:0000000000000000 S2LP_RX_GetCarrierSenseIndicator
     /tmp/ccVJDjsH.s:2892   .text.S2LP_RX_GetLastPacketSQI:0000000000000000 $t
     /tmp/ccVJDjsH.s:2898   .text.S2LP_RX_GetLastPacketSQI:0000000000000000 S2LP_RX_GetLastPacketSQI
     /tmp/ccVJDjsH.s:2953   .text.S2LP_RX_GetLastPacketPQI:0000000000000000 $t
     /tmp/ccVJDjsH.s:2959   .text.S2LP_RX_GetLastPacketPQI:0000000000000000 S2LP_RX_GetLastPacketPQI
     /tmp/ccVJDjsH.s:2991   .text.S2LP_RX_GetPQIThreshold:0000000000000000 $t
     /tmp/ccVJDjsH.s:2997   .text.S2LP_RX_GetPQIThreshold:0000000000000000 S2LP_RX_GetPQIThreshold
     /tmp/ccVJDjsH.s:3037   .text.S2LP_RX_GetSQICheckStatus:0000000000000000 $t
     /tmp/ccVJDjsH.s:3043   .text.S2LP_RX_GetSQICheckStatus:0000000000000000 S2LP_RX_GetSQICheckStatus
     /tmp/ccVJDjsH.s:3085   .text.S2LP_RX_GetSQIThreshold:0000000000000000 $t
     /tmp/ccVJDjsH.s:3091   .text.S2LP_RX_GetSQIThreshold:0000000000000000 S2LP_RX_GetSQIThreshold
     /tmp/ccVJDjsH.s:3128   .text.S2LP_RX_GetFIFOAlmostFullThreshold:0000000000000000 $t
     /tmp/ccVJDjsH.s:3134   .text.S2LP_RX_GetFIFOAlmostFullThreshold:0000000000000000 S2LP_RX_GetFIFOAlmostFullThreshold
     /tmp/ccVJDjsH.s:3171   .text.S2LP_RX_GetFIFOAlmostEmptyThreshold:0000000000000000 $t
ARM GAS  /tmp/ccVJDjsH.s 			page 68


     /tmp/ccVJDjsH.s:3177   .text.S2LP_RX_GetFIFOAlmostEmptyThreshold:0000000000000000 S2LP_RX_GetFIFOAlmostEmptyThreshold
     /tmp/ccVJDjsH.s:3214   .text.S2LP_RX_GetFIFOCount:0000000000000000 $t
     /tmp/ccVJDjsH.s:3220   .text.S2LP_RX_GetFIFOCount:0000000000000000 S2LP_RX_GetFIFOCount
     /tmp/ccVJDjsH.s:3252   .text.S2LP_RX_GetLastPacketNACK:0000000000000000 $t
     /tmp/ccVJDjsH.s:3258   .text.S2LP_RX_GetLastPacketNACK:0000000000000000 S2LP_RX_GetLastPacketNACK
     /tmp/ccVJDjsH.s:3300   .text.S2LP_RX_GetSequenceNumber:0000000000000000 $t
     /tmp/ccVJDjsH.s:3306   .text.S2LP_RX_GetSequenceNumber:0000000000000000 S2LP_RX_GetSequenceNumber
                           .group:0000000000000000 wm4.0.2a10468dd89b593cd64cc189d36e5bb7
                           .group:0000000000000000 wm4.s2lp_mcu_interface.h.9.9eeee19d530c6ae696c504e7de7f49cd
                           .group:0000000000000000 wm4.s2lp_constants.h.9.b7f616e3835971b5021c80c1c98c29b7
                           .group:0000000000000000 wm4.stdbool.h.29.4a1c88fe569adb8d03217dd16982ca34
                           .group:0000000000000000 wm4._newlib_version.h.4.529115dae5e4f67702b1de0b6e841f38
                           .group:0000000000000000 wm4.features.h.33.3e67abe6fb64142d4f6fa9496796153c
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.stddef.h.39.3e0425629195acf083c9561151306b4d
                           .group:0000000000000000 wm4.stm32f1xx.h.39.e8c98c5ce2cd95856eed179966374e12
                           .group:0000000000000000 wm4.stm32f103xb.h.38.ec967d5ad9d3269cb0788eebda048e38
                           .group:0000000000000000 wm4.cmsis_version.h.32.0f826810625204eca22a19868bdc7586
                           .group:0000000000000000 wm4.core_cm3.h.66.fc46cac19810db8f98d67da7ef88f42c
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.549e8fd988111c6b396c357ef98aeb59
                           .group:0000000000000000 wm4.core_cm3.h.127.aaed3d1df272b0aa79c526153017805c
                           .group:0000000000000000 wm4.stm32f103xb.h.573.10249aa7473ca93be896fed94046a725
                           .group:0000000000000000 wm4.stm32f1xx.h.162.96b09079a093c34dbd7f0b85cbd0ddee
                           .group:0000000000000000 wm4.stm32f1xx_hal_conf.h.24.fb218a6cd2ee35d840b3eac0f5fb4119
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.22.3d81dc02d9b9459e9eac6fdca7f8f18e
                           .group:0000000000000000 wm4.stm32f1xx_hal_def.h.56.d1c3014f99fce17329ff5ab2921c0923
                           .group:0000000000000000 wm4.stm32f1xx_hal_rcc.h.94.78ba4ec8cedd7ba94683a5fabb61b31e
                           .group:0000000000000000 wm4.stm32f1xx_hal_rcc_ex.h.21.8406672c8a3f21f71eb8441fb8ecb4bd
                           .group:0000000000000000 wm4.stm32f1xx_hal_rcc.h.1201.89d14cbb1b46fba2de70512ccfd8d5ce
                           .group:0000000000000000 wm4.stm32f1xx_hal_gpio.h.21.0099da253a68660e916195d3e8928be3
                           .group:0000000000000000 wm4.stm32f1xx_hal_gpio_ex.h.21.93f1f3ec7660fa76375def81b976f73c
                           .group:0000000000000000 wm4.stm32f1xx_hal_gpio.h.262.7df79220ec7519ba80c1763e6b4854a6
                           .group:0000000000000000 wm4.stm32f1xx_hal_exti.h.21.a7f1b393a0c9b2b56b72ccdbb8dee508
                           .group:0000000000000000 wm4.stm32f1xx_hal_dma.h.21.11e5a204ed6aa790b1cdae2e4192bc9d
                           .group:0000000000000000 wm4.stm32f1xx_hal_dma_ex.h.21.d438f745b4c04dc23f9f569190526864
                           .group:0000000000000000 wm4.stm32f1xx_hal_dma.h.408.14794a3f8621230c9ac7fca0cacf3e57
                           .group:0000000000000000 wm4.stm32f1xx_hal_can.h.21.d1dd4a884a3983bc975efc64fbbd5748
                           .group:0000000000000000 wm4.stm32f1xx_hal_cortex.h.21.6ab92041a8778f53d2d2d96b3825535a
                           .group:0000000000000000 wm4.stm32f1xx_hal_adc.h.21.8ae5a06b46334619d54b2469802d6db6
                           .group:0000000000000000 wm4.stm32f1xx_hal_adc_ex.h.21.f5c9ba15472af26c826d75096ae3e02a
                           .group:0000000000000000 wm4.stm32f1xx_hal_crc.h.21.b5b5d61856236c32a5704a7db1b8c77f
                           .group:0000000000000000 wm4.stm32f1xx_hal_flash.h.21.6df147ac02cc6dec8c4706cc1a34879c
                           .group:0000000000000000 wm4.stm32f1xx_hal_flash_ex.h.21.33e24ce7a8607e16d5a38297454fd963
                           .group:0000000000000000 wm4.stm32f1xx_hal_i2c.h.21.6a947c870feb456d84d10dd871ee01bd
                           .group:0000000000000000 wm4.stm32f1xx_hal_iwdg.h.21.14afe1e30714751a311b81d0791714c2
                           .group:0000000000000000 wm4.stm32f1xx_hal_pwr.h.21.ec3e2cfd4c26fffa32fc4ff0a8ac7390
                           .group:0000000000000000 wm4.stm32f1xx_hal_rtc.h.21.833c91cab3eef49edc59fd371d3c1ce0
                           .group:0000000000000000 wm4.stm32f1xx_hal_rtc_ex.h.21.b671683f6728965b6d8404d04009ed32
                           .group:0000000000000000 wm4.stm32f1xx_hal_spi.h.21.59f3c581a47a8dea5d070b46998af27e
                           .group:0000000000000000 wm4.stm32f1xx_hal_tim.h.21.76f9d96f76cba41ae3b6e27311c6f5ff
                           .group:0000000000000000 wm4.stm32f1xx_hal_uart.h.21.ffd6508e5e0a88f651472e5c80a9d587
                           .group:0000000000000000 wm4.stm32f1xx_hal_usart.h.21.0b32d58c93817e5f10bce7603c316c1e
                           .group:0000000000000000 wm4.stm32f1xx_hal_irda.h.21.b44168150ccb55c331f6e6afe3cf4b88
                           .group:0000000000000000 wm4.stm32f1xx_hal_smartcard.h.21.d256a98de9ec7b58600da5aa4b29abdb
ARM GAS  /tmp/ccVJDjsH.s 			page 69


                           .group:0000000000000000 wm4.stm32f1xx_hal_wwdg.h.21.ac611fc4089566604f02b81297147d50
                           .group:0000000000000000 wm4.stm32f1xx_ll_usb.h.21.4cb0f3c145693f977427d01b787de0c7
                           .group:0000000000000000 wm4.stm32f1xx_hal_pcd.h.160.b1d545af3cea9ada15575c2dedd78cdc
                           .group:0000000000000000 wm4.stm32f1xx_hal.h.87.60093b86a987865736d7cddecce3c235
                           .group:0000000000000000 wm4.ieeefp.h.77.25247dc27dbe3b23bfe98c2dc18f6ac5
                           .group:0000000000000000 wm4.newlib.h.8.e83e89ee5a2baa7686bbb3d2021a9409
                           .group:0000000000000000 wm4.config.h.224.18dfb280c62ae4ee788eb67b451eb1a6
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.stddef.h.158.bfed30416c9480cd13bc4a25427d538f
                           .group:0000000000000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:0000000000000000 wm4.stddef.h.158.5f30652bb2ea05b142c1bbee9108c999
                           .group:0000000000000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:0000000000000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:0000000000000000 wm4.cdefs.h.49.39045112216f6a021dbdffe3bf5accce
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:0000000000000000 wm4.bshal_i2cm.h.11.09ce5fde9ee09ba50563c37b9993575a
                           .group:0000000000000000 wm4.inttypes.h.14.b28deb26920e51e0da310220ef0f9003
                           .group:0000000000000000 wm4.inttypes.h.28.684aa7736e7ecc9a6ffc44acc61c7a90
                           .group:0000000000000000 wm4.bit_helpers.h.9.18ec339b3de5d33d832940f318efed57
                           .group:0000000000000000 wm4.s2lp_tx.h.16.c3dd382957aac675afead280ae18647a
                           .group:0000000000000000 wm4.s2lp.h.23.2b5ca43c97556c1103e2a8d1aaf1f08a

UNDEFINED SYMBOLS
S2LP_WriteRegister
S2LP_ReadRegister
__aeabi_ui2d
__aeabi_ddiv
__aeabi_ul2d
__aeabi_dmul
S2LP_GetDigitalClockFrequency
