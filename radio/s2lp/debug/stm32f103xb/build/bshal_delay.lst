ARM GAS  /tmp/cc56ZRVS.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"bshal_delay.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "../../../lib/libhalglue/common/bshal_delay.c"
  18              		.section	.text.delay_cycles_asm,"ax",%progbits
  19              		.align	1
  20              		.global	delay_cycles_asm
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	delay_cycles_asm:
  26              	.LFB67:
   1:../../../lib/libhalglue/common/bshal_delay.c **** /*
   2:../../../lib/libhalglue/common/bshal_delay.c ****  * Copyright (c) 2021
   3:../../../lib/libhalglue/common/bshal_delay.c ****  * 				Andr√© van Schoubroeck <andre@blaatschaap.be>
   4:../../../lib/libhalglue/common/bshal_delay.c ****  *
   5:../../../lib/libhalglue/common/bshal_delay.c ****  * Based upon nrfx_coredep.h from nrfx by Nordic:
   6:../../../lib/libhalglue/common/bshal_delay.c ****  *
   7:../../../lib/libhalglue/common/bshal_delay.c ****  * Copyright (c) 2018 - 2021, Nordic Semiconductor ASA
   8:../../../lib/libhalglue/common/bshal_delay.c ****  * All rights reserved.
   9:../../../lib/libhalglue/common/bshal_delay.c ****  *
  10:../../../lib/libhalglue/common/bshal_delay.c ****  *
  11:../../../lib/libhalglue/common/bshal_delay.c ****  * SPDX-License-Identifier: BSD-3-Clause
  12:../../../lib/libhalglue/common/bshal_delay.c ****  *
  13:../../../lib/libhalglue/common/bshal_delay.c ****  * Redistribution and use in source and binary forms, with or without
  14:../../../lib/libhalglue/common/bshal_delay.c ****  * modification, are permitted provided that the following conditions are met:
  15:../../../lib/libhalglue/common/bshal_delay.c ****  *
  16:../../../lib/libhalglue/common/bshal_delay.c ****  * 1. Redistributions of source code must retain the above copyright notice, this
  17:../../../lib/libhalglue/common/bshal_delay.c ****  *    list of conditions and the following disclaimer.
  18:../../../lib/libhalglue/common/bshal_delay.c ****  *
  19:../../../lib/libhalglue/common/bshal_delay.c ****  * 2. Redistributions in binary form must reproduce the above copyright
  20:../../../lib/libhalglue/common/bshal_delay.c ****  *    notice, this list of conditions and the following disclaimer in the
  21:../../../lib/libhalglue/common/bshal_delay.c ****  *    documentation and/or other materials provided with the distribution.
  22:../../../lib/libhalglue/common/bshal_delay.c ****  *
  23:../../../lib/libhalglue/common/bshal_delay.c ****  * 3. Neither the name of the copyright holder nor the names of its
  24:../../../lib/libhalglue/common/bshal_delay.c ****  *    contributors may be used to endorse or promote products derived from this
  25:../../../lib/libhalglue/common/bshal_delay.c ****  *    software without specific prior written permission.
  26:../../../lib/libhalglue/common/bshal_delay.c ****  *
  27:../../../lib/libhalglue/common/bshal_delay.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  28:../../../lib/libhalglue/common/bshal_delay.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  29:../../../lib/libhalglue/common/bshal_delay.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  30:../../../lib/libhalglue/common/bshal_delay.c ****  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  31:../../../lib/libhalglue/common/bshal_delay.c ****  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  32:../../../lib/libhalglue/common/bshal_delay.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
ARM GAS  /tmp/cc56ZRVS.s 			page 2


  33:../../../lib/libhalglue/common/bshal_delay.c ****  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  34:../../../lib/libhalglue/common/bshal_delay.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  35:../../../lib/libhalglue/common/bshal_delay.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  36:../../../lib/libhalglue/common/bshal_delay.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  37:../../../lib/libhalglue/common/bshal_delay.c ****  * POSSIBILITY OF SUCH DAMAGE.
  38:../../../lib/libhalglue/common/bshal_delay.c ****  */
  39:../../../lib/libhalglue/common/bshal_delay.c **** 
  40:../../../lib/libhalglue/common/bshal_delay.c **** #include "bshal_delay.h"
  41:../../../lib/libhalglue/common/bshal_delay.c **** #include "system.h"
  42:../../../lib/libhalglue/common/bshal_delay.c **** 
  43:../../../lib/libhalglue/common/bshal_delay.c **** #ifdef __arm__
  44:../../../lib/libhalglue/common/bshal_delay.c **** #include "arm_cpuid.h"
  45:../../../lib/libhalglue/common/bshal_delay.c **** #endif
  46:../../../lib/libhalglue/common/bshal_delay.c **** 
  47:../../../lib/libhalglue/common/bshal_delay.c **** // Should probably a ramfuncion
  48:../../../lib/libhalglue/common/bshal_delay.c **** void delay_cycles_asm(uint32_t time_cycles) {
  27              		.loc 1 48 45
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
  49:../../../lib/libhalglue/common/bshal_delay.c **** #if (defined __thumb2__)
  50:../../../lib/libhalglue/common/bshal_delay.c **** 	static uint32_t cycles_per_loop = 3;
  51:../../../lib/libhalglue/common/bshal_delay.c **** 	asm("loop:" );
  40              		.loc 1 51 2
  41              		.syntax unified
  42              	@ 51 "../../../lib/libhalglue/common/bshal_delay.c" 1
  43              		loop:
  44              	@ 0 "" 2
  52:../../../lib/libhalglue/common/bshal_delay.c **** 	asm("subs  r0, %0" :: "r" (cycles_per_loop) ); 	// 1 cycle
  45              		.loc 1 52 2
  46              		.thumb
  47              		.syntax unified
  48 0008 044B     		ldr	r3, .L2
  49 000a 1B68     		ldr	r3, [r3]
  50              		.syntax unified
  51              	@ 52 "../../../lib/libhalglue/common/bshal_delay.c" 1
  52 000c C01A     		subs  r0, r3
  53              	@ 0 "" 2
  53:../../../lib/libhalglue/common/bshal_delay.c **** 	asm("bhi loop"); 								// 2 cycles
  54              		.loc 1 53 2
  55              	@ 53 "../../../lib/libhalglue/common/bshal_delay.c" 1
  56 000e FBD8     		bhi loop
  57              	@ 0 "" 2
  54:../../../lib/libhalglue/common/bshal_delay.c **** #elif (defined __thumb__)
  55:../../../lib/libhalglue/common/bshal_delay.c **** 	// TODO VERIFY THIS 
  56:../../../lib/libhalglue/common/bshal_delay.c **** 	// THis sub in stead of subs would be wrong (not updating the flags? or?)
  57:../../../lib/libhalglue/common/bshal_delay.c **** 	// On an M3, using sub in stead of subs make loop only once rather then
  58:../../../lib/libhalglue/common/bshal_delay.c **** 	// counting down
ARM GAS  /tmp/cc56ZRVS.s 			page 3


  59:../../../lib/libhalglue/common/bshal_delay.c **** 	static uint32_t cycles_per_loop = 3;
  60:../../../lib/libhalglue/common/bshal_delay.c **** 	asm("loop:" );
  61:../../../lib/libhalglue/common/bshal_delay.c **** 	asm("sub  r0, %0" :: "l" (cycles_per_loop) );
  62:../../../lib/libhalglue/common/bshal_delay.c **** 	asm("bhi loop");
  63:../../../lib/libhalglue/common/bshal_delay.c **** #elif (defined __riscv)
  64:../../../lib/libhalglue/common/bshal_delay.c **** 	uint32_t cycles_per_loop = 3; // TODO
  65:../../../lib/libhalglue/common/bshal_delay.c **** 	asm("loop:");
  66:../../../lib/libhalglue/common/bshal_delay.c **** 	asm("sub  a0, a0, %0" :: "r" (cycles_per_loop) );
  67:../../../lib/libhalglue/common/bshal_delay.c **** 	asm("bgtz a0, loop");
  68:../../../lib/libhalglue/common/bshal_delay.c **** #else 				
  69:../../../lib/libhalglue/common/bshal_delay.c **** #error "CPU Architecture Not Supported"
  70:../../../lib/libhalglue/common/bshal_delay.c **** #endif
  71:../../../lib/libhalglue/common/bshal_delay.c **** }
  58              		.loc 1 71 1
  59              		.thumb
  60              		.syntax unified
  61 0010 00BF     		nop
  62 0012 0C37     		adds	r7, r7, #12
  63              		.cfi_def_cfa_offset 4
  64 0014 BD46     		mov	sp, r7
  65              		.cfi_def_cfa_register 13
  66              		@ sp needed
  67 0016 80BC     		pop	{r7}
  68              		.cfi_restore 7
  69              		.cfi_def_cfa_offset 0
  70 0018 7047     		bx	lr
  71              	.L3:
  72 001a 00BF     		.align	2
  73              	.L2:
  74 001c 00000000 		.word	cycles_per_loop.0
  75              		.cfi_endproc
  76              	.LFE67:
  78              		.global	bshal_delay_cycles
  79              		.section	.data.bshal_delay_cycles,"aw"
  80              		.align	2
  83              	bshal_delay_cycles:
  84 0000 00000000 		.word	delay_cycles_asm
  85              		.section	.text.delay_cycles_dwt,"ax",%progbits
  86              		.align	1
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  91              	delay_cycles_dwt:
  92              	.LFB68:
  72:../../../lib/libhalglue/common/bshal_delay.c **** 
  73:../../../lib/libhalglue/common/bshal_delay.c **** delay_fn bshal_delay_cycles = delay_cycles_asm;
  74:../../../lib/libhalglue/common/bshal_delay.c **** 
  75:../../../lib/libhalglue/common/bshal_delay.c **** 
  76:../../../lib/libhalglue/common/bshal_delay.c **** #if ( __ARM_ARCH >= 7 ) && ( __ARM_ARCH_PROFILE == 'M' )
  77:../../../lib/libhalglue/common/bshal_delay.c **** static void delay_cycles_dwt(uint32_t time_cycles) {
  93              		.loc 1 77 52
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 24
  96              		@ frame_needed = 1, uses_anonymous_args = 0
  97              		@ link register save eliminated.
  98 0000 80B4     		push	{r7}
  99              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc56ZRVS.s 			page 4


 100              		.cfi_offset 7, -4
 101 0002 87B0     		sub	sp, sp, #28
 102              		.cfi_def_cfa_offset 32
 103 0004 00AF     		add	r7, sp, #0
 104              		.cfi_def_cfa_register 7
 105 0006 7860     		str	r0, [r7, #4]
  78:../../../lib/libhalglue/common/bshal_delay.c **** 	// Based upon nrfx_coredep.h from nrfx by Nordic:
  79:../../../lib/libhalglue/common/bshal_delay.c **** 
  80:../../../lib/libhalglue/common/bshal_delay.c **** 	// Save the current state of the DEMCR register to be able to restore it before exiting
  81:../../../lib/libhalglue/common/bshal_delay.c **** 	// this function. Enable the trace and debug blocks (including DWT).
  82:../../../lib/libhalglue/common/bshal_delay.c **** 	uint32_t core_debug = CoreDebug->DEMCR;
 106              		.loc 1 82 33
 107 0008 124B     		ldr	r3, .L6
 108              		.loc 1 82 11
 109 000a DB68     		ldr	r3, [r3, #12]
 110 000c 7B61     		str	r3, [r7, #20]
  83:../../../lib/libhalglue/common/bshal_delay.c **** 	CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
 111              		.loc 1 83 11
 112 000e 114A     		ldr	r2, .L6
 113              		.loc 1 83 32
 114 0010 7B69     		ldr	r3, [r7, #20]
 115 0012 43F08073 		orr	r3, r3, #16777216
 116              		.loc 1 83 19
 117 0016 D360     		str	r3, [r2, #12]
  84:../../../lib/libhalglue/common/bshal_delay.c **** 
  85:../../../lib/libhalglue/common/bshal_delay.c **** 	// Save the current state of the CTRL register in the DWT block. Make sure
  86:../../../lib/libhalglue/common/bshal_delay.c **** 	// that the cycle counter is enabled.
  87:../../../lib/libhalglue/common/bshal_delay.c **** 	uint32_t dwt_ctrl = DWT->CTRL;
 118              		.loc 1 87 25
 119 0018 0F4B     		ldr	r3, .L6+4
 120              		.loc 1 87 11
 121 001a 1B68     		ldr	r3, [r3]
 122 001c 3B61     		str	r3, [r7, #16]
  88:../../../lib/libhalglue/common/bshal_delay.c **** 	DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
 123              		.loc 1 88 5
 124 001e 0E4A     		ldr	r2, .L6+4
 125              		.loc 1 88 23
 126 0020 3B69     		ldr	r3, [r7, #16]
 127 0022 43F00103 		orr	r3, r3, #1
 128              		.loc 1 88 12
 129 0026 1360     		str	r3, [r2]
  89:../../../lib/libhalglue/common/bshal_delay.c **** 
  90:../../../lib/libhalglue/common/bshal_delay.c **** 	// Store start value of the cycle counter.
  91:../../../lib/libhalglue/common/bshal_delay.c **** 	uint32_t cyccnt_initial = DWT->CYCCNT;
 130              		.loc 1 91 31
 131 0028 0B4B     		ldr	r3, .L6+4
 132              		.loc 1 91 11
 133 002a 5B68     		ldr	r3, [r3, #4]
 134 002c FB60     		str	r3, [r7, #12]
  92:../../../lib/libhalglue/common/bshal_delay.c **** 
  93:../../../lib/libhalglue/common/bshal_delay.c **** 	// Delay required time.
  94:../../../lib/libhalglue/common/bshal_delay.c **** 	while ((DWT->CYCCNT - cyccnt_initial) < time_cycles)
 135              		.loc 1 94 8
 136 002e 00BF     		nop
 137              	.L5:
 138              		.loc 1 94 13 discriminator 1
 139 0030 094B     		ldr	r3, .L6+4
ARM GAS  /tmp/cc56ZRVS.s 			page 5


 140 0032 5A68     		ldr	r2, [r3, #4]
 141              		.loc 1 94 22 discriminator 1
 142 0034 FB68     		ldr	r3, [r7, #12]
 143 0036 D31A     		subs	r3, r2, r3
 144              		.loc 1 94 40 discriminator 1
 145 0038 7A68     		ldr	r2, [r7, #4]
 146 003a 9A42     		cmp	r2, r3
 147 003c F8D8     		bhi	.L5
  95:../../../lib/libhalglue/common/bshal_delay.c **** 		;
  96:../../../lib/libhalglue/common/bshal_delay.c **** 
  97:../../../lib/libhalglue/common/bshal_delay.c **** 	// Restore preserved registers.
  98:../../../lib/libhalglue/common/bshal_delay.c **** 	DWT->CTRL = dwt_ctrl;
 148              		.loc 1 98 5
 149 003e 064A     		ldr	r2, .L6+4
 150              		.loc 1 98 12
 151 0040 3B69     		ldr	r3, [r7, #16]
 152 0042 1360     		str	r3, [r2]
  99:../../../lib/libhalglue/common/bshal_delay.c **** 	CoreDebug->DEMCR = core_debug;
 153              		.loc 1 99 11
 154 0044 034A     		ldr	r2, .L6
 155              		.loc 1 99 19
 156 0046 7B69     		ldr	r3, [r7, #20]
 157 0048 D360     		str	r3, [r2, #12]
 100:../../../lib/libhalglue/common/bshal_delay.c **** }
 158              		.loc 1 100 1
 159 004a 00BF     		nop
 160 004c 1C37     		adds	r7, r7, #28
 161              		.cfi_def_cfa_offset 4
 162 004e BD46     		mov	sp, r7
 163              		.cfi_def_cfa_register 13
 164              		@ sp needed
 165 0050 80BC     		pop	{r7}
 166              		.cfi_restore 7
 167              		.cfi_def_cfa_offset 0
 168 0052 7047     		bx	lr
 169              	.L7:
 170              		.align	2
 171              	.L6:
 172 0054 F0ED00E0 		.word	-536810000
 173 0058 001000E0 		.word	-536866816
 174              		.cfi_endproc
 175              	.LFE68:
 177              		.section	.text.bshal_delay_us,"ax",%progbits
 178              		.align	1
 179              		.global	bshal_delay_us
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 184              	bshal_delay_us:
 185              	.LFB69:
 101:../../../lib/libhalglue/common/bshal_delay.c **** #endif
 102:../../../lib/libhalglue/common/bshal_delay.c **** 
 103:../../../lib/libhalglue/common/bshal_delay.c **** 
 104:../../../lib/libhalglue/common/bshal_delay.c **** void bshal_delay_us(uint32_t delay_us) {
 186              		.loc 1 104 40
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cc56ZRVS.s 			page 6


 189              		@ frame_needed = 1, uses_anonymous_args = 0
 190 0000 80B5     		push	{r7, lr}
 191              		.cfi_def_cfa_offset 8
 192              		.cfi_offset 7, -8
 193              		.cfi_offset 14, -4
 194 0002 82B0     		sub	sp, sp, #8
 195              		.cfi_def_cfa_offset 16
 196 0004 00AF     		add	r7, sp, #0
 197              		.cfi_def_cfa_register 7
 198 0006 7860     		str	r0, [r7, #4]
 105:../../../lib/libhalglue/common/bshal_delay.c **** 	bshal_delay_cycles(delay_us * (SystemCoreClock / 1000000));
 199              		.loc 1 105 2
 200 0008 084B     		ldr	r3, .L9
 201 000a 1B68     		ldr	r3, [r3]
 202              		.loc 1 105 49
 203 000c 084A     		ldr	r2, .L9+4
 204 000e 1268     		ldr	r2, [r2]
 205 0010 0849     		ldr	r1, .L9+8
 206 0012 A1FB0212 		umull	r1, r2, r1, r2
 207 0016 920C     		lsrs	r2, r2, #18
 208              		.loc 1 105 2
 209 0018 7968     		ldr	r1, [r7, #4]
 210 001a 01FB02F2 		mul	r2, r1, r2
 211 001e 1046     		mov	r0, r2
 212 0020 9847     		blx	r3
 213              	.LVL0:
 106:../../../lib/libhalglue/common/bshal_delay.c **** }
 214              		.loc 1 106 1
 215 0022 00BF     		nop
 216 0024 0837     		adds	r7, r7, #8
 217              		.cfi_def_cfa_offset 8
 218 0026 BD46     		mov	sp, r7
 219              		.cfi_def_cfa_register 13
 220              		@ sp needed
 221 0028 80BD     		pop	{r7, pc}
 222              	.L10:
 223 002a 00BF     		.align	2
 224              	.L9:
 225 002c 00000000 		.word	bshal_delay_cycles
 226 0030 00000000 		.word	SystemCoreClock
 227 0034 83DE1B43 		.word	1125899907
 228              		.cfi_endproc
 229              	.LFE69:
 231              		.section	.text.bshal_delay_ms,"ax",%progbits
 232              		.align	1
 233              		.global	bshal_delay_ms
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 238              	bshal_delay_ms:
 239              	.LFB70:
 107:../../../lib/libhalglue/common/bshal_delay.c **** 
 108:../../../lib/libhalglue/common/bshal_delay.c **** void bshal_delay_ms(uint32_t delay_ms) {
 240              		.loc 1 108 40
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 8
 243              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc56ZRVS.s 			page 7


 244 0000 80B5     		push	{r7, lr}
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 7, -8
 247              		.cfi_offset 14, -4
 248 0002 82B0     		sub	sp, sp, #8
 249              		.cfi_def_cfa_offset 16
 250 0004 00AF     		add	r7, sp, #0
 251              		.cfi_def_cfa_register 7
 252 0006 7860     		str	r0, [r7, #4]
 109:../../../lib/libhalglue/common/bshal_delay.c **** 	bshal_delay_us(delay_ms * 1000);
 253              		.loc 1 109 2
 254 0008 7B68     		ldr	r3, [r7, #4]
 255 000a 4FF47A72 		mov	r2, #1000
 256 000e 02FB03F3 		mul	r3, r2, r3
 257 0012 1846     		mov	r0, r3
 258 0014 FFF7FEFF 		bl	bshal_delay_us
 110:../../../lib/libhalglue/common/bshal_delay.c **** }
 259              		.loc 1 110 1
 260 0018 00BF     		nop
 261 001a 0837     		adds	r7, r7, #8
 262              		.cfi_def_cfa_offset 8
 263 001c BD46     		mov	sp, r7
 264              		.cfi_def_cfa_register 13
 265              		@ sp needed
 266 001e 80BD     		pop	{r7, pc}
 267              		.cfi_endproc
 268              	.LFE70:
 270              		.section	.text.bshal_delay_init,"ax",%progbits
 271              		.align	1
 272              		.global	bshal_delay_init
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 277              	bshal_delay_init:
 278              	.LFB71:
 111:../../../lib/libhalglue/common/bshal_delay.c **** 
 112:../../../lib/libhalglue/common/bshal_delay.c **** int bshal_delay_init(void) {
 279              		.loc 1 112 28
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 8
 282              		@ frame_needed = 1, uses_anonymous_args = 0
 283              		@ link register save eliminated.
 284 0000 80B4     		push	{r7}
 285              		.cfi_def_cfa_offset 4
 286              		.cfi_offset 7, -4
 287 0002 83B0     		sub	sp, sp, #12
 288              		.cfi_def_cfa_offset 16
 289 0004 00AF     		add	r7, sp, #0
 290              		.cfi_def_cfa_register 7
 113:../../../lib/libhalglue/common/bshal_delay.c **** 	// Check whether our current core supports DWT
 114:../../../lib/libhalglue/common/bshal_delay.c **** #if ( __ARM_ARCH >= 7 ) && ( __ARM_ARCH_PROFILE == 'M' )
 115:../../../lib/libhalglue/common/bshal_delay.c **** 
 116:../../../lib/libhalglue/common/bshal_delay.c **** 	// ATMv7-M Architecture Reference Manual
 117:../../../lib/libhalglue/common/bshal_delay.c **** 	// page 742 Table C1-2
 118:../../../lib/libhalglue/common/bshal_delay.c **** 	// ROM Table Entry ROMDWT[0]
 119:../../../lib/libhalglue/common/bshal_delay.c **** 
 120:../../../lib/libhalglue/common/bshal_delay.c **** 	// Page 744 - Table C1-3
ARM GAS  /tmp/cc56ZRVS.s 			page 8


 121:../../../lib/libhalglue/common/bshal_delay.c **** 	// Points to the Data Watchpoint and Trace unit at 0xE0001000.
 122:../../../lib/libhalglue/common/bshal_delay.c **** 	// Bit[0] is set to 1 if a DWT is fitted.
 123:../../../lib/libhalglue/common/bshal_delay.c **** 	// Page 798 -
 124:../../../lib/libhalglue/common/bshal_delay.c **** 	// NOCYCCNT, bit[25] 0 - Cycle counter supported.
 125:../../../lib/libhalglue/common/bshal_delay.c **** 
 126:../../../lib/libhalglue/common/bshal_delay.c **** 	// TODO: Is there a mask defined for this?
 127:../../../lib/libhalglue/common/bshal_delay.c **** 	// Also... can we make use a struct with bitfields instead
 128:../../../lib/libhalglue/common/bshal_delay.c **** 	bool use_dwt = (CORTEX_M_ROMTABLE->dwt & 1) && (!(DWT->CTRL & (1 << 25)));
 291              		.loc 1 128 35
 292 0006 124B     		ldr	r3, .L17
 293 0008 5B68     		ldr	r3, [r3, #4]
 294              		.loc 1 128 41
 295 000a 03F00103 		and	r3, r3, #1
 296              		.loc 1 128 46
 297 000e 002B     		cmp	r3, #0
 298 0010 07D0     		beq	.L13
 299              		.loc 1 128 55 discriminator 1
 300 0012 104B     		ldr	r3, .L17+4
 301 0014 1B68     		ldr	r3, [r3]
 302              		.loc 1 128 62 discriminator 1
 303 0016 03F00073 		and	r3, r3, #33554432
 304              		.loc 1 128 46 discriminator 1
 305 001a 002B     		cmp	r3, #0
 306 001c 01D1     		bne	.L13
 307              		.loc 1 128 46 is_stmt 0 discriminator 3
 308 001e 0123     		movs	r3, #1
 309 0020 00E0     		b	.L14
 310              	.L13:
 311              		.loc 1 128 46 discriminator 4
 312 0022 0023     		movs	r3, #0
 313              	.L14:
 314              		.loc 1 128 7 is_stmt 1 discriminator 6
 315 0024 FB71     		strb	r3, [r7, #7]
 316 0026 FB79     		ldrb	r3, [r7, #7]
 317 0028 03F00103 		and	r3, r3, #1
 318 002c FB71     		strb	r3, [r7, #7]
 129:../../../lib/libhalglue/common/bshal_delay.c **** 
 130:../../../lib/libhalglue/common/bshal_delay.c **** 	if (use_dwt)
 319              		.loc 1 130 5 discriminator 6
 320 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 321 0030 002B     		cmp	r3, #0
 322 0032 03D0     		beq	.L15
 131:../../../lib/libhalglue/common/bshal_delay.c **** 		bshal_delay_cycles = delay_cycles_dwt;
 323              		.loc 1 131 22
 324 0034 084B     		ldr	r3, .L17+8
 325 0036 094A     		ldr	r2, .L17+12
 326 0038 1A60     		str	r2, [r3]
 327 003a 02E0     		b	.L16
 328              	.L15:
 132:../../../lib/libhalglue/common/bshal_delay.c **** 	else
 133:../../../lib/libhalglue/common/bshal_delay.c **** #endif
 134:../../../lib/libhalglue/common/bshal_delay.c **** 		bshal_delay_cycles = delay_cycles_asm;
 329              		.loc 1 134 22
 330 003c 064B     		ldr	r3, .L17+8
 331 003e 084A     		ldr	r2, .L17+16
 332 0040 1A60     		str	r2, [r3]
 333              	.L16:
ARM GAS  /tmp/cc56ZRVS.s 			page 9


 135:../../../lib/libhalglue/common/bshal_delay.c **** }
 334              		.loc 1 135 1
 335 0042 00BF     		nop
 336 0044 1846     		mov	r0, r3
 337 0046 0C37     		adds	r7, r7, #12
 338              		.cfi_def_cfa_offset 4
 339 0048 BD46     		mov	sp, r7
 340              		.cfi_def_cfa_register 13
 341              		@ sp needed
 342 004a 80BC     		pop	{r7}
 343              		.cfi_restore 7
 344              		.cfi_def_cfa_offset 0
 345 004c 7047     		bx	lr
 346              	.L18:
 347 004e 00BF     		.align	2
 348              	.L17:
 349 0050 00F00FE0 		.word	-535826432
 350 0054 001000E0 		.word	-536866816
 351 0058 00000000 		.word	bshal_delay_cycles
 352 005c 00000000 		.word	delay_cycles_dwt
 353 0060 00000000 		.word	delay_cycles_asm
 354              		.cfi_endproc
 355              	.LFE71:
 357              		.section	.data.cycles_per_loop.0,"aw"
 358              		.align	2
 361              	cycles_per_loop.0:
 362 0000 03000000 		.word	3
 363              		.text
 364              	.Letext0:
 365              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 366              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 367              		.file 4 "../../../lib/libhalglue/common/bshal_delay.h"
 368              		.file 5 "../../../ext/CMSIS_5//CMSIS/Core/Include/core_cm3.h"
 369              		.file 6 "../../../lib/libhalglue/common/arm_cpuid.h"
 370              		.file 7 "../../../ext/stm32/cmsis_device_f1/Include/system_stm32f1xx.h"
ARM GAS  /tmp/cc56ZRVS.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bshal_delay.c
     /tmp/cc56ZRVS.s:19     .text.delay_cycles_asm:0000000000000000 $t
     /tmp/cc56ZRVS.s:25     .text.delay_cycles_asm:0000000000000000 delay_cycles_asm
     /tmp/cc56ZRVS.s:43     .text.delay_cycles_asm:0000000000000008 loop
     /tmp/cc56ZRVS.s:74     .text.delay_cycles_asm:000000000000001c $d
     /tmp/cc56ZRVS.s:361    .data.cycles_per_loop.0:0000000000000000 cycles_per_loop.0
     /tmp/cc56ZRVS.s:83     .data.bshal_delay_cycles:0000000000000000 bshal_delay_cycles
     /tmp/cc56ZRVS.s:80     .data.bshal_delay_cycles:0000000000000000 $d
     /tmp/cc56ZRVS.s:86     .text.delay_cycles_dwt:0000000000000000 $t
     /tmp/cc56ZRVS.s:91     .text.delay_cycles_dwt:0000000000000000 delay_cycles_dwt
     /tmp/cc56ZRVS.s:172    .text.delay_cycles_dwt:0000000000000054 $d
     /tmp/cc56ZRVS.s:178    .text.bshal_delay_us:0000000000000000 $t
     /tmp/cc56ZRVS.s:184    .text.bshal_delay_us:0000000000000000 bshal_delay_us
     /tmp/cc56ZRVS.s:225    .text.bshal_delay_us:000000000000002c $d
     /tmp/cc56ZRVS.s:232    .text.bshal_delay_ms:0000000000000000 $t
     /tmp/cc56ZRVS.s:238    .text.bshal_delay_ms:0000000000000000 bshal_delay_ms
     /tmp/cc56ZRVS.s:271    .text.bshal_delay_init:0000000000000000 $t
     /tmp/cc56ZRVS.s:277    .text.bshal_delay_init:0000000000000000 bshal_delay_init
     /tmp/cc56ZRVS.s:349    .text.bshal_delay_init:0000000000000050 $d
     /tmp/cc56ZRVS.s:358    .data.cycles_per_loop.0:0000000000000000 $d
                           .group:0000000000000000 wm4.0.2a10468dd89b593cd64cc189d36e5bb7
                           .group:0000000000000000 wm4._newlib_version.h.4.529115dae5e4f67702b1de0b6e841f38
                           .group:0000000000000000 wm4.newlib.h.18.a58e9e86397e11d140a508f2e0db40b7
                           .group:0000000000000000 wm4.ieeefp.h.77.25247dc27dbe3b23bfe98c2dc18f6ac5
                           .group:0000000000000000 wm4.features.h.22.7877b139107948f7dadcf3660cc79cfd
                           .group:0000000000000000 wm4.config.h.224.18dfb280c62ae4ee788eb67b451eb1a6
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._ansi.h.8.aeadd4934928258a76627d21910677e3
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.stddef.h.267.6dda48f8b0edf141523347999dd9ec79
                           .group:0000000000000000 wm4.inttypes.h.28.684aa7736e7ecc9a6ffc44acc61c7a90
                           .group:0000000000000000 wm4.stdbool.h.29.4a1c88fe569adb8d03217dd16982ca34
                           .group:0000000000000000 wm4.stm32f1xx.h.39.e8c98c5ce2cd95856eed179966374e12
                           .group:0000000000000000 wm4.stm32f103xb.h.38.ec967d5ad9d3269cb0788eebda048e38
                           .group:0000000000000000 wm4.cmsis_version.h.32.0f826810625204eca22a19868bdc7586
                           .group:0000000000000000 wm4.core_cm3.h.66.fc46cac19810db8f98d67da7ef88f42c
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.549e8fd988111c6b396c357ef98aeb59
                           .group:0000000000000000 wm4.core_cm3.h.127.aaed3d1df272b0aa79c526153017805c
                           .group:0000000000000000 wm4.stm32f103xb.h.573.10249aa7473ca93be896fed94046a725
                           .group:0000000000000000 wm4.stm32f1xx.h.162.96b09079a093c34dbd7f0b85cbd0ddee
                           .group:0000000000000000 wm4.stm32f1xx_hal_conf.h.24.fb218a6cd2ee35d840b3eac0f5fb4119
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.22.3d81dc02d9b9459e9eac6fdca7f8f18e
                           .group:0000000000000000 wm4.stddef.h.39.82585dd3f3d03c4909f3d30d8739f57e
                           .group:0000000000000000 wm4.stm32f1xx_hal_def.h.56.d1c3014f99fce17329ff5ab2921c0923
                           .group:0000000000000000 wm4.stm32f1xx_hal_rcc.h.94.78ba4ec8cedd7ba94683a5fabb61b31e
                           .group:0000000000000000 wm4.stm32f1xx_hal_rcc_ex.h.21.8406672c8a3f21f71eb8441fb8ecb4bd
                           .group:0000000000000000 wm4.stm32f1xx_hal_rcc.h.1201.89d14cbb1b46fba2de70512ccfd8d5ce
                           .group:0000000000000000 wm4.stm32f1xx_hal_gpio.h.21.0099da253a68660e916195d3e8928be3
                           .group:0000000000000000 wm4.stm32f1xx_hal_gpio_ex.h.21.93f1f3ec7660fa76375def81b976f73c
                           .group:0000000000000000 wm4.stm32f1xx_hal_gpio.h.262.7df79220ec7519ba80c1763e6b4854a6
                           .group:0000000000000000 wm4.stm32f1xx_hal_exti.h.21.a7f1b393a0c9b2b56b72ccdbb8dee508
                           .group:0000000000000000 wm4.stm32f1xx_hal_dma.h.21.11e5a204ed6aa790b1cdae2e4192bc9d
                           .group:0000000000000000 wm4.stm32f1xx_hal_dma_ex.h.21.d438f745b4c04dc23f9f569190526864
                           .group:0000000000000000 wm4.stm32f1xx_hal_dma.h.408.14794a3f8621230c9ac7fca0cacf3e57
ARM GAS  /tmp/cc56ZRVS.s 			page 11


                           .group:0000000000000000 wm4.stm32f1xx_hal_can.h.21.d1dd4a884a3983bc975efc64fbbd5748
                           .group:0000000000000000 wm4.stm32f1xx_hal_cortex.h.21.6ab92041a8778f53d2d2d96b3825535a
                           .group:0000000000000000 wm4.stm32f1xx_hal_adc.h.21.8ae5a06b46334619d54b2469802d6db6
                           .group:0000000000000000 wm4.stm32f1xx_hal_adc_ex.h.21.f5c9ba15472af26c826d75096ae3e02a
                           .group:0000000000000000 wm4.stm32f1xx_hal_crc.h.21.b5b5d61856236c32a5704a7db1b8c77f
                           .group:0000000000000000 wm4.stm32f1xx_hal_flash.h.21.6df147ac02cc6dec8c4706cc1a34879c
                           .group:0000000000000000 wm4.stm32f1xx_hal_flash_ex.h.21.33e24ce7a8607e16d5a38297454fd963
                           .group:0000000000000000 wm4.stm32f1xx_hal_i2c.h.21.6a947c870feb456d84d10dd871ee01bd
                           .group:0000000000000000 wm4.stm32f1xx_hal_iwdg.h.21.14afe1e30714751a311b81d0791714c2
                           .group:0000000000000000 wm4.stm32f1xx_hal_pwr.h.21.ec3e2cfd4c26fffa32fc4ff0a8ac7390
                           .group:0000000000000000 wm4.stm32f1xx_hal_rtc.h.21.833c91cab3eef49edc59fd371d3c1ce0
                           .group:0000000000000000 wm4.stm32f1xx_hal_rtc_ex.h.21.b671683f6728965b6d8404d04009ed32
                           .group:0000000000000000 wm4.stm32f1xx_hal_spi.h.21.59f3c581a47a8dea5d070b46998af27e
                           .group:0000000000000000 wm4.stm32f1xx_hal_tim.h.21.76f9d96f76cba41ae3b6e27311c6f5ff
                           .group:0000000000000000 wm4.stm32f1xx_hal_uart.h.21.ffd6508e5e0a88f651472e5c80a9d587
                           .group:0000000000000000 wm4.stm32f1xx_hal_usart.h.21.0b32d58c93817e5f10bce7603c316c1e
                           .group:0000000000000000 wm4.stm32f1xx_hal_irda.h.21.b44168150ccb55c331f6e6afe3cf4b88
                           .group:0000000000000000 wm4.stm32f1xx_hal_smartcard.h.21.d256a98de9ec7b58600da5aa4b29abdb
                           .group:0000000000000000 wm4.stm32f1xx_hal_wwdg.h.21.ac611fc4089566604f02b81297147d50
                           .group:0000000000000000 wm4.stm32f1xx_ll_usb.h.21.4cb0f3c145693f977427d01b787de0c7
                           .group:0000000000000000 wm4.stm32f1xx_hal_pcd.h.160.b1d545af3cea9ada15575c2dedd78cdc
                           .group:0000000000000000 wm4.stm32f1xx_hal.h.87.60093b86a987865736d7cddecce3c235
                           .group:0000000000000000 wm4.arm_cpuid.h.28.a837135f8fd99522010eba001d9b4220

UNDEFINED SYMBOLS
SystemCoreClock
